<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>6 月 on 叶王笔记</title>
    <link>https://ikingye.github.io/note/docs/live/diary/2020/06/</link>
    <description>Recent content in 6 月 on 叶王笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    
	<atom:link href="https://ikingye.github.io/note/docs/live/diary/2020/06/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>2020-06-11</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/06/11/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/06/11/</guid>
      <description>2020 年 6 月 11 日（星期四） 今日待办     编程 VLC VLC media player (previously the VideoLAN Client and commonly known as simply VLC)
LAN: Local Area Network
 library vs package 常见的 C/C# 等语言中的 library，一般指的就是：
 静态的库文件：xxx.a 动态的库文件：xxx.dll  Python  module 就是 Python 文件 package 是一堆（相关的）module 组合而成的  Haskell A module is a set of functions, types, classes, &amp;hellip; put together in a common namespace.
A library is a set of modules which makes sense to be together and that can be used in a program or another library.</description>
    </item>
    
    <item>
      <title>2020-06-12</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/06/12/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/06/12/</guid>
      <description>2020 年 6 月 12 日（星期五） 今日待办     编程 Go tab vs 空格  Indentation
We use tabs for indentation and gofmt emits them by default. Use spaces only if you must.
 参考：
 Effective Go   Kubernetes 查一段时间的日志 --since-time 查一段时间的日志
k logs pedestrian-count-wrapper-5b7cb44c79-k4z6n --since-time=2020-06-12T14:00:00+08:00 &amp;gt; pedestrian-count.log 查看多个 pod 日志 传统来说，Kubernetes 环境下的日志都是靠 FluentD + ElasticSearch + Kibana 的组合实现的， 这一组合的功能和强大，所以成为一个事实标准来使用， 但是在一些比较简陋的测试集群中，或者不具备浏览器条件的自动化 / 控制台环境下， 归并多个 Pod 的日志进行集中的查看和处理还是很有用的。</description>
    </item>
    
    <item>
      <title>2020-06-10</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/06/10/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/06/10/</guid>
      <description>2020 年 6 月 10 日（星期三） 今日待办     编程 尾递归 Consider a simple function that adds the first N natural numbers. (e.g. sum(5) = 1 + 2 + 3 + 4 + 5 = 15).
// 普通递归 function recsum(x) { if (x === 1) { return x; } else { return x + recsum(x - 1); } } // 尾递归 function tailrecsum(x, running_total = 0) { if (x === 0) { return running_total; } else { return tailrecsum(x - 1, running_total + x); } } 怎么写尾递归 形式上只要最后一个 return 语句是单纯函数就可以。</description>
    </item>
    
    <item>
      <title>2020-06-09</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/06/09/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/06/09/</guid>
      <description>2020 年 6 月 9 日（星期二） 今日待办     编程 流媒体传输协议 流媒体协议的作用：流同步，播放控制，质量控制，多端跨平台播放等 直播三要素：低延时，高可用，质量反馈和检测
常见流媒体协议类型
常见流媒体协议适用场景
RTSP/RTP/RTCP 封装：
 ps ts  视频：
 H.264 H.265 VP9  音频：
 aac g711.a  RTSP
 基于 TCP 基于文本的双向实时传输协议，类似 HTTP 每个会话都含有状态，保持长连接，请求信令按顺序（HTTP 无状态）  RTP/RTCP
 基于 UDP   RTMP  Adobe 的私有协议，性能相对 HTTP 比较低下。 数据和信令在一条通道。 长连接   HLS  基于 HTTP，性能不错 延时常常大于 10 秒，无法做直播互动   export PATH 使用 ~ 不生效 # 不生效 # export PATH=&amp;#34;$PATH:~/code/study/cc/istio/istio-1.</description>
    </item>
    
    <item>
      <title>2020-06-08</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/06/08/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/06/08/</guid>
      <description>2020 年 6 月 8 日（星期一） 今日待办     编程 git git clone --depth 1 什么时候用？
git clone --depth 1 之后，想拉取所有
git pull --unshallow 参考：
 Pull updates with git after cloned with &amp;ndash;depth 1   流媒体 视频编码 AVC (H.264) H.264，又称为 MPEG-4 第 10 部分，高级视频编码（英语： MPEG-4 Part 10, Advanced Video Coding ，缩写为 MPEG-4 AVC）是一种面向块，基于运动补偿的视频编码标准（英语：Video_coding_format） 。
HEVC (H.265) 高效率视频编码（ High Efficiency Video Coding，简称 HEVC），又称为 H.265 和 MPEG-H 第 2 部分，是一种视频压缩标准，被视为是 ITU-T H.</description>
    </item>
    
    <item>
      <title>2020-06-05</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/06/05/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/06/05/</guid>
      <description>2020 年 6 月 5 日（星期五） 今日待办     编程 Beyond Compare MacOS 破解 移除失效的认证
rm -rf ~/Library/Application\ Support/Beyond\ Compare/ moranzcw/Computer-Networking-A-Top-Down-Approach-NOTES  《计算机网络－自顶向下方法 (原书第 6 版)》编程作业，Wireshark 实验文档的翻译和解答。
Packet Sender dannagle/PacketSender TCP, UDP, SSL 发包工具 https://packetsender.com/</description>
    </item>
    
    <item>
      <title>2020-06-04</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/06/04/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/06/04/</guid>
      <description>2020 年 6 月 4 日（星期四） 今日待办     编程 判断是物理机还是虚拟机 $ systemd-detect-virt On KVM for example it returns:
kvm and on a non-virtualized host:
none 其他方法 dmesg | grep -i virtual 基于 hardware，则说明是物理机
结果返回包含 virtual，则是虚拟机
$ dmesg |grep -i virtual [0.000000] Booting paravirtualized kernel on Xen HVM [1.034572] systemd[1]: Detected virtualization xen. [1.065757] systemd[1]: Starting Setup Virtual Console... [1.287144] xen_netfront: Initialising Xen virtual ethernet driver 参考：
 Easy way to determine virtualization technology  网络 TCP 和 UDP 的端口号可以是同一个吗 可以。</description>
    </item>
    
    <item>
      <title>2020-06-03</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/06/03/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/06/03/</guid>
      <description>2020 年 6 月 3 日（星期三） 今日待办     编程 kernel-devel 如果某个程序需要内核提供的一些功能，它就需要内核的 C header 来编译程序，这个时候 linux-devel 里面的东西就用上了。
比如 nvidia 和 ati 的官方显卡驱动，alsa-driver 声卡驱动，他们都需要编译一个放在内核里面运行的模块，编译这个模块就需要内核的 header 文件才能顺利编译。
当然，kernel-devel 不光是 C Header 文件，它还有内核的配置文件，以及其他的开发用的资料
kernel devel vs kernel source kernel-devel 包只包含用于内核开发环境所需的内核头文件以及 Makefile， 而 kernel-souce 包含所有内核源代码。
如果仅仅是用于你自己编写的模块开发的话，因为只需引用相应的内核头文件，所以只有 devel 包即可， 如果你要修改现有的内核源代码并重新编译，那必须是 kernel-souce。
kernel-devel 是用做内核一般开发的，比如编写内核模块，原则上，可以不需要内核的原代码。 kernel 则是专指内核本身的开发，因此需要内核的原代码。
 lspci 显示当前主机的所有 PCI 总线信息，以及所有已连接的 PCI 设备信息。
PCI Peripheral Component Interconnect 外设部件互连标准
个人电脑中使用最为广泛的接口，几乎所有的主板产品上都带有这种插槽
 centos 安装 Kubernetes 环境 安装 GPU 驱动 检测是否检测到 GPU 设备 $ lspci | grep -i nvidia 3b:00.</description>
    </item>
    
    <item>
      <title>2020-06-02</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/06/02/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/06/02/</guid>
      <description>2020 年 6 月 2 日（星期二） 今日待办     编程 shell keyword vs reserved word vs builtin reserved word 保留字
Keyword, reserved word, and builtin are all the &amp;ldquo;first word&amp;rdquo; of a Simple command. Could be placed in two groups: Keyword and Builtin. The two are mutually exclusive.
A word (token) can be either a Keyword or a builtin, but not both.
为什么 time 是 keyword，而不是 builtin To allow the existence of a command as the second word.</description>
    </item>
    
    <item>
      <title>2020-06-01</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/06/01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/06/01/</guid>
      <description>2020 年 6 月 1 日（星期一） 今日待办     编程 Jeecg-Boot zhangdaiscott/jeecg-boot 前后端分离架构：SpringBoot 2.x，Ant Design&amp;amp;Vue，Mybatis-plus，Shiro，JWT
jhipster jhipster/generator-jhipster JHipster is a development platform to quickly generate, develop, &amp;amp; deploy modern web applications &amp;amp; microservice architectures. https://www.jhipster.tech
SELinux The SELinux stands for Security-Enhanced Linux where it is a linux kernel security module. It is enabled by default on most of the linux distribution that we use for servers like centOS. It provides enhanced security measurements.</description>
    </item>
    
  </channel>
</rss>