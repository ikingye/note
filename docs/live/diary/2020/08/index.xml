<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>8 月 on 叶王笔记</title>
    <link>https://ikingye.github.io/note/docs/live/diary/2020/08/</link>
    <description>Recent content in 8 月 on 叶王笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    
	<atom:link href="https://ikingye.github.io/note/docs/live/diary/2020/08/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>2020-08-03</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/08/03/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/08/03/</guid>
      <description>2020 年 8 月 3 日（星期一） #  今日待办 #      编程 #  Python #  setuptools #  字典 #  float 作为 key #  参考：
 Why can a floating point dictionary key overwrite an integer key with the same value?  下划线命名方式 #   example：前后无下划线表示该变量、函数、成员或方法（以下简称内容）公有，可以以任何形式访问。 _example：前置单下划线表示该内容受保护。如果是变量或者函数，在 from a_instance import * 这种情况下，不会被导入。如果是成员或者方法，仅允许类内部使用及该类的子类继承。需要注意的是，受保护的内容在完整明确的引用下，仍然可以直接使用，例如 a_instance._a_method()。 __example：前置双下划线表示该内容私有，无法以任何方式被外部直接使用。类的私有成员及方法无法被子类继承，但对于本类来说，仍可以用 a_instance._ClassName__MethodName() 来调用。 __example__：前后双下划线的命名方式被 Python 用于命名各类 Magic 方法，具体内容请自行查询。此命名方式并没有被解释器禁止，但是 Python 官方建议最好避免这样做。 example_：后置单下划线，用于避免和 Python 关键词冲突，无特殊含义，例如：int_。  参考：</description>
    </item>
    
    <item>
      <title>2020-08-01</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/08/01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/08/01/</guid>
      <description>2020 年 8 月 1 日（星期六） #  今日待办 #      编程 #  Spring #   Spring Spring MVC Spring Framework Spring Boot Spring Cloud   EJB #  Enterprise JavaBean
EJB 3.0 #  EJB 3.0 几乎成为了一个全新的 API，与此前的数版可谓毫无相似度可言
 控制反转 #  控制反转（Inversion of Control，缩写为 IoC）
控制反转的常见方式：
 依赖注入（Dependency Injection，简称 DI） 依赖查找（Dependency Lookup)   敏捷软件开发 #  敏捷开发的方式：
 从 1991 年开始的迅速应用程序开发 从 1994 年开始的统一进程与动态系统开发法（DSDM） 从 1995 年开始的 Scrum 从 1996 年开始的水晶清透法 从 1996 年开始的极限编程 (Extreme programming，缩写为 XP) 从 1997 年开始的功能驱动开发  敏捷软件开发价值观 #   个体和互动：高于流程和工具 工作的软件：高于详尽的文档 客户合作：高于合同谈判 响应变化：高于遵循计划   Redis #  Redis 数据结构 #  zset #  参考：</description>
    </item>
    
  </channel>
</rss>