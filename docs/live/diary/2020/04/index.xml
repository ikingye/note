<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>4 月 on 叶王笔记</title>
    <link>https://ikingye.github.io/note/docs/live/diary/2020/04/</link>
    <description>Recent content in 4 月 on 叶王笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    
	<atom:link href="https://ikingye.github.io/note/docs/live/diary/2020/04/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>2020-04-30</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/04/30/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/04/30/</guid>
      <description>2020 年 4 月 30 日（星期四） 今日待办     编程 网络 增加组播路由 使用 route 命令添加
使用 route 命令添加的路由，机器重启或者网卡重启后路由就失效了，方法：
# 添加到主机的路由 route add –host 192.168.168.110 dev eth0 route add –host 192.168.168.119 gw 192.168.168.1 # 添加到网络的路由 route add –net IP netmask MASK eth0 route add –net IP netmask MASK gw IP route add –net IP/24 eth1 # 添加默认网关 route add default gw IP # 删除路由 route del –host 192.168.168.110 dev eth0  OCR 光学字符识别（Optical Character Recognition, OCR）</description>
    </item>
    
    <item>
      <title>2020-04-29</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/04/29/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/04/29/</guid>
      <description>2020 年 4 月 29 日（星期三） 今日待办     编程 docker 权限 docker run # 无法使用 gdb 调试 --cap-add SYS_PTRACE # 无法使用 date -s 修改时间 --cap-add=SYS_TIME # –privileged 等效于–cap-add=ALL 参考：
 使用 docker run &amp;ndash;cap-add 参数解决权限问题（无法使用 gdb 调试、无法 date -s 修改时间)  insecure-registry # vi /etc/docker/daemon.json { &amp;#34;insecure-registries&amp;#34; : [ &amp;#34;hostname.cloudapp.net:5000&amp;#34; ] } # 参考：https://stackoverflow.com/questions/42211380/add-insecure-registry-to-docker # 重启 docker systemctl restart docker  面试 字节头条面试要求  算法、数据结构和系统设计 提前温习软件工程的核心概念，  例如：如何从一个需求落实到一个系统设计，如何衡量两个不同设计的好坏，如何在各种限制下（人员、时间、资源等）选择其中更合适的设计，以及提升该设计的可拓展性等。​   在白板上练习算法题目，写出清晰、简洁、bug free 的代码，，并衡量时间和空间复杂度以及可能存在的副作用。​ 尝试用不同的方法，思路或数据结构去解决同一个问题，并且衡量不同解法之间的优劣。​ 练习  《Cracking the Coding Interview》​ https://leetcode.</description>
    </item>
    
    <item>
      <title>2020-04-28</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/04/28/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/04/28/</guid>
      <description>2020 年 4 月 28 日（星期二） 今日待办     编程 算法 树的最长路径 #coding=utf-8 class TreeNode(): def __init__(self, val): self.val = val self.left = None self.right = None def longest(root): if root is None: return 0 return max(length(root), length(root.left), length(root.right)) def length(root): if root is None: return 0 return height(root.left) + height(root.right) def height(root): if root is None: return 0 return max(height(root.left), height(root.right)) + 1 n1 = TreeNode(1) n2 = TreeNode(2) n3 = TreeNode(3) n4 = TreeNode(4) n5 = TreeNode(5) n6 = TreeNode(6) n7 = TreeNode(7) n8 = TreeNode(8) n9 = TreeNode(9) n1.</description>
    </item>
    
    <item>
      <title>2020-04-27</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/04/27/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/04/27/</guid>
      <description>2020 年 4 月 27 日（星期一） 今日待办     编程 GB28181 开源实现 标准  GB28181/GB28181.Solution   服务端  ossrs/srs  xiongziliang/ZLMediaKit  livegbs/GB28181-Server   客户端  pjsip/pjproject  ghettovoice/gosip  StefanKopieczek/gossip  kirm/sip.js    SIP 协议 Antisip
 VSCode  kasecato/vscode-intellij-idea-keybindings   运维 disconf  Distributed Configuration Management Platform (分布式配置管理平台) http://disconf.readthedocs.io/
consul + consul-template gcc vs g++  后缀为 .c 的  gcc 把它当做 C 程序 g++ 当做是 C++ 程序     编译可以用 gcc/g++，而链接可以用 g++ 或者 gcc -lstdc++  编译阶段，g++ 会调用 gcc，对于 c++ 代码，两者是等价的 gcc 命令不能自动和 C++ 程序使用的库联接，所以通常用 g++ 来完成链接 可以选择手动链接，gcc -lstdc++    乐观锁 vs 悲观锁 乐观锁（读多写少） 总是假设最好的情况，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据， 可以使用版本号机制和 CAS 算法实现。</description>
    </item>
    
    <item>
      <title>2020-04-26</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/04/26/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/04/26/</guid>
      <description>2020 年 4 月 26 日（星期日） 备注：
 法定上班。  今日待办     编程 duedge 基础架构
http Host header 函数式编程 MostlyAdequate/mostly-adequate-guide  Mostly adequate guide to FP (in javascript)
中文版 llh911001/mostly-adequate-guide-chinese 点击阅读
JavaScript 如何衡量一个人的 JavaScript 水平？
 python 猴子补丁 属性在运行时的动态替换，叫做猴子补丁（Monkey Patch）。
monkey patch 即运行时动态改变方法、类的方法。 不管是定义在类外的普通方法、类里面的方法、甚至是模块这些都可以进行 “动态替换的操作”
class A: def func(self): print(&amp;#34;Hi&amp;#34;) def monkey(self): print(&amp;#34;Hi, monkey&amp;#34;) a = A() A.func=A.monkey #在运行的时候，才改变了func a.func() def outer_monkey(a): # a 这个参数是没有用到的，因为func有一个参数，如果这个函数没有参数的话不能这样直接赋值 print(&amp;#34;Hi,outer monkey&amp;#34;) a = A() A.</description>
    </item>
    
    <item>
      <title>2020-04-25</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/04/25/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/04/25/</guid>
      <description>2020 年 4 月 25 日（星期六） 今日待办     编程 git submodule git submodule add -b 参考：
 How can I specify a branch/tag when adding a Git submodule?  submodule 修改 url  edit the .gitmodules file to update the URL git submodule sync  参考： How to change the remote repository for a git submodule?
delete submodule  Delete the relevant section from the .gitmodules file. Stage the .</description>
    </item>
    
    <item>
      <title>2020-04-24</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/04/24/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/04/24/</guid>
      <description>2020 年 4 月 24 日（星期五） 今日待办     编程 github comment Review Comments Commit Comments Issue Comments  OAM (Open Application Model) OAM 是阿里巴巴和微软共同开源的云原生应用规范模型
2019 年 10 月宣布开源，同时开源了基于 OAM 的实现 Rudr。
Rudr  A Kubernetes implementation of the Open Application Model specification https://oam.dev
OpenTelemetry  Specifications for OpenTelemetry https://opentelemetry.io
参考：
 OAM（开放应用模型）—— 定义云原生应用标准的野望   Kubernetes CRI（Container Runtime Interface） 容器运行时接口，提供计算资源
CNI（Container Network Interface） 容器网络接口，提供网络资源
CSI（Container Storage Interface） 容器存储接口，提供存储资源</description>
    </item>
    
    <item>
      <title>2020-04-23</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/04/23/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/04/23/</guid>
      <description>2020 年 4 月 23 日（星期四） 今日待办     编程 边缘计算  物联网关类，用 edgex 容器场景  it 类应用多的，rancher/k3s ct 类应用多的 kubeedge   starlingx 适合继承 openstack 的，又有容器要求的边缘场景  </description>
    </item>
    
    <item>
      <title>2020-04-22</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/04/22/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/04/22/</guid>
      <description>2020 年 4 月 22 日（星期三） 今日待办     编程 DCDN </description>
    </item>
    
    <item>
      <title>2020-04-21</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/04/21/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/04/21/</guid>
      <description>2020 年 4 月 21 日（星期二） 今日待办     编程 EdgeGallery EdgeGallery 是什么？ EdgeGallery 是华为联合运营商，垂直行业伙伴发起的一个 MEC 边缘计算开源项目。目的是打造一个符合电信产业 “联接 + 计算” 特点的边缘计算公共平台，实现网络能力（尤其是 5G 网络）开放的标准化和 MEC 应用开发、测试、迁移和运行等生命周期流程的通用化。
EdgeGallery 可以作为 Akraino 的上游项目，在 Akraino 里面可以立项新的面向 5G MEC 的 BP，把 EdgeGallery 作为 MEC 的 PaaS 层，然后集成其他的组件，比如 OpenStack、K8S、ONAP 等来形成一个完成的解决方案堆栈。
EdgeGallery 要解决什么问题？ EdgeGallery 要解决的是运营商 MEC 边缘计算平台的标准不统一带来的生态碎片化，产业规模做不大的问题。
MEC 是 5G 时代运营商新的蓝海市场，通过 MEC 平台，运营商可以把 “联接 + 计算” 的能力开放给行业应用，获取行业数字化的价值红利。
MEC 本质上是一个面向开发者的 ICT 基础设施市场，竞争力体现在为应用开发者提供的软件基础平台和工具链的丰富程度，市场结果体现在应用生态的丰富程度。
运营商对软件平台的研发传统模式是采用联合 ISV 进行定制开发的模式，如果 MEC 平台也采用传统模式，自然会导致不同运营商的 MEC 平台接口不一致，工具链不兼容。全球运营商很多，每个运营商都是区域化运营，这就自然的形成很多碎片化市场。</description>
    </item>
    
    <item>
      <title>2020-04-20</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/04/20/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/04/20/</guid>
      <description>2020 年 4 月 20 日（星期一） 今日待办     编程 TSN 时间敏感网络 参考：
 实时物联网 RT-IoT 终于有了自己的专属通讯网络 TSN！ 下一代工业通信 —TSN（时间敏感网络），工业物联网的助推器  cloudvr， tsn，物联网
5G 的大带宽，低时延，广连接
Cloud Native 云原生 什么是云原生 2018 年 CNCF 更新了云原生的定义。
这是新定义中描述的代表技术，其中容器和微服务两项在不同时期的不同定义中都有出现，
而服务网格这个在 2017 年才开始被社区接纳的新热点技术被非常醒目的列出来，和微服务并列，而不是我们通常认为的服务网格只是微服务在实施时的一种新的方式。
Cloud Native 翻译为云原生，是 Matt Stine 提出的一个概念，它是一个思想的集合，
包括 DevOps、 持续交付（Continuous Delivery）、微服务（MicroServices）、敏捷基础设施（Agile Infrastructure）、康威定律（Conways Law）等，以及根据商业能力对公司进行重组。
Cloud Native 既包含
 技术（微服务，敏捷基础设施）， 也包含管理（DevOps，持续交付，康威定律，重组等）。  Cloud Native 也可以说是一系列 Cloud 技术、企业管理方法的集合。
参考：
 CNCF Cloud Native Definition v1.0  云原生代表技术 云原生的代表技术包括容器、服务网格、微服务、不可变基础设施和声明式 API。</description>
    </item>
    
    <item>
      <title>2020-04-19</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/04/19/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/04/19/</guid>
      <description>2020 年 4 月 19 日（星期日） 今日待办     编程 github 周报 开发 probot https://github.com/probot/probot
weekly-digest https://github.com/probot/weekly-digest
repo-report octokit github rest api 库
参考文档  octokit docs github api docs  github api 限制 老是出现错误
connect ECONNREFUSED 13.250.168.23:443
 javascript print object // print object str = JSON.stringify(obj); console.log(`obj ============== : ${str}`); 星期几配置判断 根据给的周几的字符串（前缀就行），获取第几天
function getNumDayFromLongDay(day) { if (typeof day === &amp;#34;number&amp;#34; &amp;amp;&amp;amp; day &amp;gt;= 0 &amp;amp;&amp;amp; day &amp;lt; 7) { return day; } else { const longDay = [ &amp;#34;sunday&amp;#34;, &amp;#34;monday&amp;#34;, &amp;#34;tuesday&amp;#34;, &amp;#34;wednesday&amp;#34;, &amp;#34;thursday&amp;#34;, &amp;#34;friday&amp;#34;, &amp;#34;saturday&amp;#34;, ]; for (let i = 0; i &amp;lt; 7; i++) { if (longDay[i].</description>
    </item>
    
    <item>
      <title>2020-04-17</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/04/17/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/04/17/</guid>
      <description>2020 年 4 月 17 日（星期五） 今日待办     编程 TSF (Tencent Service Framework) 腾讯微服务平台
TSF Serverless Serverless 微服务平台
TSF Mesh Mesh 微服务平台
 互联网巨头常用词汇 腾讯 精品、微创新、正能量、打法、发力、精细化、闭环、布局、商业模式、联动、泛娱乐、场景、痛点、减法、落地、聚焦、我们查下、跟进、不忘初心、方法论、迭代、快速响应、影响力、全栈、价值、细分、大数据、垂直领域、维度、颗粒、定性定量、聚焦、去中心化、关键路径、干货、接地气、梳理、输出、格局、生态、沉淀、结果导向、套路、用户体验、眼界、话术、体系、对齐、同步、认知、分享、面交、去中心化、勾兑、流程、感知度、赞、加速、用户画像、打磨、摸索、提炼、玩法、反哺、阈值。
阿里巴巴 价值观、颠覆、拥抱、改变、相信、基础设施、电子商务生态系统、企业社会责任、造福社会、理想主义、阿里云、技术、第五大经济体、促进进口、阿里人、野心、鲶鱼、DT 战略、全球化、营业额、改变世界、团队精神、知识产权、打假、情怀、挣一块钱、脱贫、平台公益、利益共同体、生态化发展、引爆消费力、农村经济、赋能、把控能力、专业化人才、战略踩空、无人区、练兵场、倒逼、互联网下半场。
百度 人工智能、无人驾驶、交互、刷脸、车、永久免费、更懂你、革新、迎接、技术创新、梦想、生态链、未来已来、智能营销、降维攻击、转变、可能性、搜索场景、AI 思维、洞察、开放能力、深度学习、人脸识别、万物互联、数字化、风口、精准识别、云端仿真、共享、感知、海量数据、赋能、开发者。
今日头条 独立发展、不上市、连接、用户体验、粉丝分发、跨越式机遇、新责任、未来、用户需求、概念推导、内容生态、国际化、体量、创作者、规模效应、平台属性、数字经济、估值、融资、智能社交、超级内容平台、颗粒度、价值创造、视频化、增长点、出海、流量红利、产品渗透率、拥抱 AI、模式重构、信息分发、人工智能实验室、算法、技术、数据挖掘、趋势、变革、内容创业、涨粉、赚钱、自媒体人、用户、创作者、构建、打击低俗信息、覆盖、粘性、精准、内容分发、产品体验、反馈、平台级公司、回馈、版权保护。
网易 猪厂、养猪、一日五餐、考拉上新货了、严选上新货了、代购、我们公司自己做的、我们公司自己养的、我们公司自己卖的、创新、品味、精品、工匠精神、匠心、新消费、泛中产、生活家、正品、世界级品质、用户体验、模式创新、中国智造、美好生活、丁磊同款、非典型、网易特色、走心、有毒营销、IP 营销、戏精、扎心、套路、竞争壁垒、差异化、价值、公益、企业家精神、有态度、各有态度、好的老板、广告公司、段子手、又双叒震荡了、工资回收计划、丁爸爸喊你 XXX。
京东 电商、亏损、商品流通、综合零售、物流网、供应链、智能商业体、技术转型、短链、成本管控、正道成功、世界 500 强、B2C、智慧化、重构、产业链、共生、品牌附加值、白条、无人仓、无界零售、一体化、倒三角战略、一体化、整合、流量端、竞争求异、盟国思维、赋能、O2O、云端服务、一锤子买卖、终端、库房、产业价值、最后一公里。
滴滴出行 小桔人、合理定价、用户价值、我要打车、神器、美好出行、智能派单、服务、足迹、系安全带、车主和司机、线上、打破价格僵局、尊享五星级出行服务、平台、智能交通、全球领先、随叫随到、将你安全带向爱、网约车、竞争壁垒、创新、包容性、出租车产业转型升级、私家车保有量、挑战、共享汽车、大数据。
参考：
 腾讯阿里等互联网巨头常用词汇，泄露了哪些商业机密？   产品经理必知词汇 UCD User Centered Design
是一种设计思维、模式，指以用户为中心的设计。
在设计过程中以用户体验为设计决策的中心，强调用户优先的设计模式。
先不要考虑盈利，先让用户用的爽再说。
AIOT 智联网 (AIOT，是 AI + IOT 物联网的结合) 2018 年开始崛起，核心是能够运用大量传感设备，综合语音、视觉、动作、温度等数据，实现 IOT 设备的全自然化的人机交互。</description>
    </item>
    
    <item>
      <title>2020-04-15</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/04/15/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/04/15/</guid>
      <description>2020 年 4 月 15 日（星期三） 今日待办     编程 Service Mesh 南北流量 vs 东西流量 南北流量（NORTH-SOUTH traffic）
东西流量（EAST-WEST traffic）
在云计算和 SDN 下，我们经常听到流量的东西南北向概念，简单来说从外部 Internet 等到数据中心内部的流量走向被称为南北流量，数据中心内部的 VM 之间的流量被称为东西流量。
南北流量：client - server
东西流量：server 之间
智慧城市  平安城市是一个综合性的安防系统，包含子系统较多； 天网工程和雪亮工程偏向于视频监控系统。  三者都是分级建设，平安城市和天网工程主要利用政府资源，而雪亮工程鼓励警民结合、资源互补。
按工程的建设规模排序，平安城市 ＞ 天网工程 ＞ 雪亮工程。
平安城市 平安城市就是通过三防系统（技防系统、物防系统、人防系统）建设城市的平安和谐。它是一个特大型、综合性非常强的管理系统，不仅需要满足治安管理、城市管理、交通管理、应急指挥等需求，而且还要兼顾灾难事故预警、安全生产监控等方面对图像监控的需求，同时还要考虑各系统之间的联动。
天网工程 天网工程是指为满足城市治安防控和城市管理需要，利用图像采集、传输、控制、显示等设备和控制软件组成，对固定区域进行实时监控和信息记录的视频监控系统。天网工程整体按照部级 - 省厅级 - 市县级平台架构部署实施，具有良好的拓展性与融合性。
雪亮工程 雪亮工程是以县、乡、村三级综治中心为指挥平台、以综治信息化为支撑、以网格化管理为基础、以公共安全视频监控联网应用为重点的 “群众性治安防控工程”。它通过三级综治中心建设把治安防范措施延伸到群众身边，发动社会力量和广大群众共同监看视频监控，共同参与治安防范，从而真正实现治安防控 “全覆盖、无死角”。
从平安城市到智慧城市 平安城市是现代城市信息化建设的第一步，随着物联网技术的发展，平安城市在未来会进一步在物联网的基础上向数字城市、智慧城市发展。
在不久前召开的北京安防技术应用论坛上，就探讨了平安城市建设与物联网技术应用。平安城市将从传统安防到平安城市大安防体系、数字城市、智慧城市方向发展。展望未来，平安城市将与城市应急、水体与气体检测、垃圾处理等，数字城管、智能建筑、工业与自动化控制、城市一卡通等各个方面涵盖，届时，将全面服务居民的生活。
平安城市与数字城市、智慧城市和感知中国随着技术不断发展，不断向前发展的城市管理模式，所涵盖技术各不相同，所使用目的也各不相同，但其重要部分视频监控技术都在发挥重要作用。
从功能上区分，平安城市的主体就是利用现代信息通信技术，构建城市综合预警系统和应急指挥体系，达到指挥统一、反应及时、作战有效的目的。实现对城市的有效管理和打击违法犯罪，加强中国城市安全防范能力，加快城市安全系统建设，建设平安城市和谐社会。
数字城市作为一个城市发展的战略目标，它主要是以计算机技术、多媒体技术和大规模存储技术为基础，利用信息技术手段把城市的过去、现状和未来的全部内容在网络上进行数字化虚拟实现。数字城市的建设涉及城市建设、规划、运行、管理、服务等各个方面，包括政府、交通、医疗、消防等等。
智慧城市是未来城市发展演进的必然趋势，不管是绿色城市，环保城市等等，智慧城市的加强是顺应当前全球技术变革及新一轮产业发展的时代潮流。每一个城市都要充分发挥信息技术带给他的优势，来建设好这个城市。所以，信息资源应该成为建设社会的重要要素，信息世界与物理世界的融合已经成为城市的支撑。
docker 上传到 私有仓库 docker build -t human-attribute:20200415_1585818439123 .</description>
    </item>
    
    <item>
      <title>2020-04-14</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/04/14/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/04/14/</guid>
      <description>2020 年 4 月 14 日（星期二） 今日待办     编程 豆瓣 API 文档 zce/douban-api-docs  英文 basic vs basis basic: 以什么为基础，进行再加工创造
basic: 基础内容
Basis = foundation of something. The basis of multiplication is serial addition, for example.
Basics = the core concepts. Multiplication tables are part of the basics because understanding them allows students to do higher order arithmetic much more efficiently.
So no, they are really not interchangeable.</description>
    </item>
    
    <item>
      <title>2020-04-13</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/04/13/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/04/13/</guid>
      <description>2020 年 4 月 13 日（星期一） 今日待办     编程 Git merge vs squash vs rebase merge 不能保持 master 分支干净，但是保持了所有的 commit history，大多数情况下都是不好的，个别情况挺好 squash 也可以保持 master 分支干净，但是 master 中 author 都是 maintainer，而不是原 owner rebase 可以尽可能保持 master 分支干净整洁，并且易于识别 author
squash merge # 切换到目标分支 $ git checkout master # 以 squash 的形式 merge $ git merge --squash devel # it does not produce a commit right away: you need an additional commit $ git commit -m &amp;#34;squash branch&amp;#34;  你会发现，在 master 分支上居然有未提交的修改，然后你就需要在 master 上主动提交了修改， 注意，这里是你 commit 的，也就是改变了 commit 的 author。 git merge has a &amp;ndash;commit option, but it cannot be used with &amp;ndash;squash.</description>
    </item>
    
    <item>
      <title>2020-04-12</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/04/12/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/04/12/</guid>
      <description>2020 年 4 月 12 日（星期日） 今日待办  Istio Handbook 周报  周一发布到钉钉群     编程 GitHub 周报 probot/weekly-digest  配置
# Configuration for weekly-digest - https://github.com/apps/weekly-digest publishDay: sun canPublishIssues: true canPublishPullRequests: true canPublishContributors: true canPublishStargazers: true canPublishCommits: true </description>
    </item>
    
    <item>
      <title>2020-04-11</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/04/11/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/04/11/</guid>
      <description>2020 年 4 月 11 日（星期六） 今日待办  Istio Handbook 周报  周一发布到钉钉群     编程 架构设计 HA 高可用 High Availability
LB 负载均衡 Load Balance
产品设计 POC 概念验证 Proof Of Concept
MVP 最小化可行产品 Minimum Viable Product
需求管理 KANO 模型 价值 vs 复杂度矩阵 分布式一致性 Paxos Raft https://raft.github.io
由于 Paxos 难以理解，所以才有了 Raft
Raft 以可理解性和易于实现为目标：
 Leader 选举（Leader election） 日志同步（Log replication） 安全性（Safety） 日志压缩（Log compaction） 成员变更（Membership change）  shell top htop
brew install htop</description>
    </item>
    
    <item>
      <title>2020-04-10</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/04/10/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/04/10/</guid>
      <description>2020 年 4 月 10 日（星期五） 今日待办  Istio Handbook 编委会双周会 21:00-22:00   编程 mosquitto (mqtt) mosquitto_pub mosquitto_pub [-d] [-h hostname] [-i client_id] [-I client id prefix] [-p port number] [-q message QoS] [--quiet] [-r] { -f file | -l | -m message | -n | -s} [-u username [-P password] ] [ --will-topic topic [--will-payload payload] [--will-qos qos] [--will-retain] ] -t message-topic mosquitto_pub -t &amp;lsquo;application/1/device/ffffff100000d143/rx&amp;rsquo; -m &amp;lsquo;{&amp;ldquo;applicationID&amp;rdquo;:&amp;ldquo;1&amp;rdquo;,&amp;ldquo;applicationName&amp;rdquo;:&amp;ldquo;0000000000000001&amp;rdquo;,&amp;ldquo;deviceName&amp;rdquo;:&amp;ldquo;d143-K5-out&amp;rdquo;,&amp;ldquo;devEUI&amp;rdquo;:&amp;ldquo;ffffff100000d143&amp;rdquo;,&amp;ldquo;txInfo&amp;rdquo;:{&amp;ldquo;frequency&amp;rdquo;:481700000,&amp;ldquo;dr&amp;rdquo;:2},&amp;ldquo;adr&amp;rdquo;:false,&amp;ldquo;fCnt&amp;rdquo;:68570,&amp;ldquo;fPort&amp;rdquo;:44,&amp;ldquo;data&amp;rdquo;:&amp;ldquo;BQEA&amp;rdquo;}&amp;rsquo;
mosquitto_sub mosquitto_sub -t &amp;lsquo;application/1/device/ffffff100000d143/rx&amp;rsquo;</description>
    </item>
    
    <item>
      <title>2020-04-09</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/04/09/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/04/09/</guid>
      <description>2020 年 4 月 9 日（星期四） 今日待办  编程  熟悉基本算法  排序算法（时间 / 空间复杂度） 大数据查找 / 排序   CORS     编程 基本算法 排序算法  插入排序类  直接插入排序 希尔排序 二分法插入排序   选择排序类  直接选择排序 堆排序   交换排序类  冒泡排序 快速排序   归并排序 基数排序  时间 / 空间复杂度 排序大的分类可分为内排序和外排序，不需要访问外存就能进行排序的叫做内排序。
   排序方法 时间复杂度（平均） 时间复杂度（最坏) 时间复杂度（最好) 空间复杂度 稳定性 复杂性     希尔排序 O(nlog2n) O(n2) O(n) O(1) 不稳定 较复杂   堆排序 O(nlog2n) O(nlog2n) O(nlog2n) O(1) 不稳定 较复杂   快速排序 O(nlog2n) O(n2) O(nlog2n) O(nlog2n) 不稳定 较复杂   归并排序 O(nlog2n) O(nlog2n) O(nlog2n) O(n) 稳定 较复杂   直接插入排序 O(n2) O(n2) O(n) O(1) 稳定 简单   直接选择排序 O(n2) O(n2) O(n2) O(1) 不稳定 简单   冒泡排序 O(n2) O(n2) O(n) O(1) 稳定 简单   基数排序 O(d(n+r)) O(d(n+r)) O(d(n+r)) O(n+r) 稳定 较复杂    稳定排序与不稳定排序 稳定排序：假设在待排序的文件中，存在两个或两个以上的记录具有相同的关键字，在用某种排序法排序后，若这些相同关键字的元素的相对次序仍然不变，则这种排序方法是稳定的。</description>
    </item>
    
    <item>
      <title>2020-04-08</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/04/08/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/04/08/</guid>
      <description>2020 年 4 月 8 日（星期三） 今日待办     编程 依赖注入 可以通过多种方式为实例提供必要的依赖关系：
 构造函数注入 属性注入 方法注入  构造函数注入 构造函数注入是许多依赖注入框架的首选方法，常受依赖注入框架的青睐。
它清楚地告诉我们创建特定组件所需的所有依赖关系，并且这些依赖不是可选的，这些依赖关系在整个组件中应该都是必需的。
public class DataProcessor { private final DbManager manager; private final Calculator calculator; public DataProcessor(DbManager manager, Calculator calculator) { this.manager = manager; this.calculator = calculator; } // ... }  优点：  不变性：依赖关系始终如初。   缺点  必须在初始化时提供所有依赖项。  有时，我们无法自己初始化一个组件，或者在某个时刻我们无法提供组件的所有依赖关系。或者我们需要使用另外一个构造函数。一旦设置了依赖项，我们就无法再改变它们了。      属性注入 属性注入更适合可选参数，例如监听或委托。又或是我们无法在初始化时提供依赖关系。
其它编程语言，例如 Swift，大量使用了带属性的 委托模式。因此，使用属性注入将使其它语言的开发人员更熟悉我们的代码。</description>
    </item>
    
    <item>
      <title>2020-04-07</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/04/07/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/04/07/</guid>
      <description>2020 年 4 月 7 日（星期二） 今日待办  201 PoSD 翻译  修改负责的 5 个 Principles 并提交到 icode 前 20 个 Principles 合并到 word，并提交给出版社进行初审     编程 编程哲学 中文房间 中文房间（英语：Chinese room），是由约翰・希尔勒提出的一个思想实验，借以反驳强人工智能的观点。根据强人工智能的观点，只要计算机拥有了适当的程序，理论上就可以说计算机拥有它的认知状态并且可以像人一样地进行理解活动。
该实验出自约翰・罗杰斯・希尔勒的论文《心灵、大脑和程序》（ Minds, Brains, and Programs）中，发表于 1980 年的《 行为与脑科学（英语：Behavioral and Brain Sciences）》。
中文房间思想实验是什么？它是否成功地否决了图灵测试的有效性？
中文房间是否可以否定人类会思考？
因果论与自由意志 k8s canonical/multipass  Multipass orchestrates virtual Ubuntu instances https://multipass.run
# 创建一个 VM, 1GB 内存和 5GB 磁盘 multipass launch --name k3s --mem 1G --disk 5G # 为 VM 启动一个 shell multipass shell k3s # 在其上安装 k3s curl -sfL https://get.</description>
    </item>
    
    <item>
      <title>2020-04-06</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/04/06/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/04/06/</guid>
      <description>2020 年 4 月 6 日（星期一） 备注：
 清明节放假  今日待办  201 PoSD 翻译  前 20 个 Principles 翻译审校（评论） 编委会讨论前 20 个 Principles 翻译修改版 修改负责的 5 个 Principles 并提交到 icode    </description>
    </item>
    
    <item>
      <title>2020-04-03</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/04/03/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/04/03/</guid>
      <description>2020 年 4 月 3 日（星期五） 今日待办     编程 Bookinfo Application 安装 istio istioctl manifest apply --set profile=demo kubectl label namespace default istio-injection=enabled 参考：https://istio.io/docs/setup/getting-started/
运行 Bookinfo sample application alias k=&amp;#34;kubectl&amp;#34; k apply -f samples/bookinfo/platform/kube/bookinfo.yaml k get services 查看 Bookinfo 应用是否正常
by checking for the page title in the response
kubectl exec -it $(kubectl get pod -l app=ratings -o jsonpath=&amp;#39;{.items[0].metadata.name}&amp;#39;) -c ratings -- curl productpage:9080/productpage | grep -o &amp;#34;&amp;lt;title&amp;gt;.</description>
    </item>
    
    <item>
      <title>2020-04-02</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/04/02/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/04/02/</guid>
      <description>2020 年 4 月 2 日（星期四） 今日待办     编程 Istio 安装 minikube minikube start --image-mirror-country=&#39;cn&#39; --registry-mirror=https://registry.docker-cn.com
安装 istio istioctl manifest apply --set profile=demo kubectl label namespace default istio-injection=enabled 参考：https://istio.io/docs/setup/getting-started/
运行 Bookinfo sample application kubectl apply -f samples/bookinfo/platform/kube/bookinfo.yaml kubectl get services 一切顺利，输出 service list。
过了一会，报错，连不上 server
The connection to the server 192.168.99.100:8443 was refused - did you specify the right host or port? minikube status minikube start --image-mirror-country=&amp;#39;cn&amp;#39; --registry-mirror=https://registry.</description>
    </item>
    
  </channel>
</rss>