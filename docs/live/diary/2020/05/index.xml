<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>5 月 on 叶王笔记</title>
    <link>https://ikingye.github.io/note/docs/live/diary/2020/05/</link>
    <description>Recent content in 5 月 on 叶王笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    
	<atom:link href="https://ikingye.github.io/note/docs/live/diary/2020/05/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>2020-05-29</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/05/29/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/05/29/</guid>
      <description>2020 年 5 月 29 日（星期五） 今日待办     编程 OpenYurt alibaba/openyurt 阿里云原生团队表示，使用 OpenYurt （Yurt，/jɜːrt/，蒙古包）作为本次开源项目名称，期望以其 “形” 来表示边缘计算侧重于创建一个集中管理但物理分布的基础设施，并支持自动 / 自治运行操作的含义。</description>
    </item>
    
    <item>
      <title>2020-05-28</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/05/28/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/05/28/</guid>
      <description>2020 年 5 月 28 日（星期四） 今日待办     编程 Hadoop HDFS Hadoop Distributed File System，是 Hadoop 的分布式文件系统
每台机器上运行一个 DataNode 进程，负责管理一部分数据。
有一台机器上运行了 NameNode 进程，负责管理整个 HDFS 集群的这么一个进程，里面存储了 HDFS 集群的所有元数据
每次内存里改完了，写一条 edits log，元数据修改的操作日志到磁盘文件里，不修改磁盘文件内容，就是顺序追加
每次 NameNode 重启的时候，把 edits log 里的操作日志读到内存里，就可以恢复元数据
YARN MapReduce  Spring Cloud  Eureka：各个服务启动时，Eureka Client 都会将服务注册到 Eureka Server，并且 Eureka Client 还可以反过来从 Eureka Server 拉取注册表，从而知道其他服务在哪里 Ribbon：服务间发起请求的时候，基于 Ribbon 做负载均衡，从一个服务的多台机器中选择一台 Feign：基于 Feign 的动态代理机制，根据注解和选择的机器，拼接请求 URL 地址，发起请求 Hystrix：发起请求是通过 Hystrix 的线程池来走的，不同的服务走不同的线程池，实现了不同服务调用的隔离，避免了服务雪崩的问题 Zuul：如果前端、移动端要调用后端系统，统一从 Zuul 网关进入，由 Zuul 网关转发请求给对应的服务  Eureka Eureka 是微服务架构中的注册中心，专门负责服务的注册与发现。</description>
    </item>
    
    <item>
      <title>2020-05-25</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/05/25/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/05/25/</guid>
      <description>2020 年 5 月 25 日（星期一） 今日待办     编程 I/O 多路复用 vs 基于事件驱动 高并发是指不活跃的长连接，并不是并发请求
典型的后端服务，在逻辑上可以划分为两层，
 跟业务无关的通信层，负责 socket 连接的创建和管理，负责 bind/listen/accept/send/recv&amp;hellip; 通信层上面是业务逻辑层，负责被动响应请求，或主动推送业务消息  通信层特点：
 都是 IO 行为，几乎不大消耗 CPU 连接数很多，可能同时有 10K 甚至 100K 个 TCP 连接 通信协议就那么几种，decode/encode 简单 外部网络是慢速 IO，收发一点数据可能要 1 秒甚至更久  业务逻辑层特点：
 少量 CPU 消耗，大部分时间在等待数据库或者其它网络服务返回 业务逻辑五花八门，逻辑中往往需要调用别的网络服务，如 db 并发请求数，往往小于连接数，10K 个连接，可能每秒只有 100 个请求 单个业务请求通常很快，毫秒级别，几十毫秒算慢的了  如果完全采用传统的多线程模型，1 个 tcp 连接对应 1 个线程，10K 个连接需要 10K 个线程，典型的内存消耗是 10G。但是业务逻辑层并发请求往往要小 1 到 2 个数量级，每个请求往往只需要 100ms 以内，所以业务逻辑层需要的线程数，比通信层小 2-3 个数量级，不需要 10K 个线程，只要 100 个甚至 10 个就够了。</description>
    </item>
    
    <item>
      <title>2020-05-23</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/05/23/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/05/23/</guid>
      <description>2020 年 5 月 23 日（星期六） 今日待办     编程 VPS 文件下载服务器 Nginx server { listen 80; server_name vultr.kingye.me; set $php_upstream &amp;#39;unix:/run/php/php7.2-fpm.sock&amp;#39;; root /root/download; index index.php; location / { #try_files $uri $uri/ /index.php?$args;  add_header Content-disposition &amp;#34;attachment; filename=$1&amp;#34;; } location ~ \.php$ { fastcgi_pass $php_upstream; fastcgi_index index.php; include fastcgi.conf; } location ~ /\.(ht|svn|git) { deny all; } }  tampermonkey（chrome 插件） AC-baidu: 重定向优化百度搜狗谷歌搜索去广告_favicon双列 Endless_Google 豆瓣和 IMDb 互相显示评分 Mouseover Popup Image Viewer Search By Image 网页限制解除 (改) 一键 VIP 视频解析 Feedly filtering and sorting 视频网页全屏 迅雷、快车、QQ 旋风等专有链解密 新浪微博根据关键词、作者、话题、来源等过滤微博 百度网盘直接下载助手  英语 i.</description>
    </item>
    
    <item>
      <title>2020-05-20</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/05/20/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/05/20/</guid>
      <description>2020 年 5 月 20 日（星期三） 今日待办     编程 </description>
    </item>
    
    <item>
      <title>2020-05-19</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/05/19/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/05/19/</guid>
      <description>2020 年 5 月 19 日（星期二） 今日待办     编程 TLS rfc5246
TLS 握手流程 TLS 是一个信道建立和信道的表达方式，向下依托于 TCP，向上对应用程序服务。
 1994 年，NetScape 公司设计了 SSL 协议（Secure Sockets Layer）的 1.0 版，但是未发布。
  1995 年，NetScape 公司发布 SSL 2.0 版，很快发现有严重漏洞。
  1996 年，SSL 3.0 版问世，得到大规模应用。
  1999 年，互联网标准化组织 ISOC 接替 NetScape 公司，发布了 SSL 的升级版 TLS 1.0 版。
  2006 年和 2008 年，TLS 进行了两次升级，分别为 TLS 1.1 版和 TLS 1.2 版。最新的变动是 2018 年 TLS 1.</description>
    </item>
    
    <item>
      <title>2020-05-14</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/05/14/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/05/14/</guid>
      <description>2020 年 5 月 14 日（星期四） 今日待办     编程 Go Go Module goproxy 阿里云 Go Module 代理仓库服务
  使用 go1.11 以上版本并开启 go module 机制
  导出 GOPROXY 环境变量
  export GOPROXY=https://mirrors.aliyun.com/goproxy/ go-yaml/yaml  YAML support for the Go language.
package main import ( &amp;#34;io/ioutil&amp;#34; &amp;#34;gopkg.in/yaml.v2&amp;#34; &amp;#34;fmt&amp;#34; ) func main() { var c conf conf:=c.getConf() fmt.Println(conf.Host) } //profile variables type conf struct { Host string `yaml:&amp;#34;host&amp;#34;` User string `yaml:&amp;#34;user&amp;#34;` Pwd string `yaml:&amp;#34;pwd&amp;#34;` Dbname string `yaml:&amp;#34;dbname&amp;#34;` } func (c *conf) getConf() *conf { yamlFile, err := ioutil.</description>
    </item>
    
    <item>
      <title>2020-05-12</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/05/12/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/05/12/</guid>
      <description>2020 年 5 月 12 日（星期二） 今日待办     编程 Redis redis-cli -h host -p port -a password 设置密码 打开文件 /etc/redis.conf， 找到其中的 # requirepass foobared，去掉前面的 #， 并把 foobared 改成你的密码。
ps: 如果 redis 没有启用密码，我使用 redis-cli -a xxx 可以访问吗？ 答案是：可以
为什么 Redis 默认端口是 6379 6379 在是手机按键上 MERZ 对应的号码，而 MERZ 取自意大利歌女 Alessia Merz 的名字。 MERZ 长期以来被 antirez 及其朋友当作愚蠢的代名词。
参考：http://oldblog.antirez.com/post/redis-as-LRU-cache.html
5G 开源 5G 核心网 free5gc/free5gc  https://www.free5gc.org/
Docker docker logs --follow
copy vs add add 是 copy 的超集</description>
    </item>
    
    <item>
      <title>2020-05-11</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/05/11/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/05/11/</guid>
      <description>2020 年 5 月 11 日（星期一） 今日待办     编程 Linux curl / wget wget -c http://xxxx curl -Lo filename http://xxxx # Write output to a file named as the remote file curl -LO http://xxxx Docker # stop all containers sudo docker stop $(sudo docker ps -aq) # rm all containers sudo docker rm $(sudo docker ps -aq) docker system prune This docker system prune clean the following stuff:</description>
    </item>
    
    <item>
      <title>2020-05-09</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/05/09/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/05/09/</guid>
      <description>2020 年 5 月 9 日（星期六） 备注： 法定加班（五一调休）
今日待办     编程 中文排版 sparanoid/chinese-copywriting-guidelines  Chinese copywriting guidelines for better written communication／中文文案排版指北
mzlogin/chinese-copywriting-guidelines  Chinese Copywriting Guidelines：中文文案排版指北（简体中文版）
https://mazhuang.org/wiki/chinese-copywriting-guidelines/
参考：
 中英文混排时中文与英文之间是否要有空格？ 写给大家看的中文排版指南   Docker Dockerfile 目标:
 更快的构建速度 更小的 Docker 镜像大小 更少的 Docker 镜像层 充分利用镜像缓存 增加 Dockerfile 可读性 让 Docker 容器使用起来更简单  做法：
  编写.dockerignore 文件
  容器只运行单个应用
  将多个 RUN 指令合并为一个
  基础镜像的标签不要用 latest</description>
    </item>
    
    <item>
      <title>2020-05-08</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/05/08/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/05/08/</guid>
      <description>2020 年 5 月 8 日（星期五） 今日待办  servicemesher/istio-handbook 发周报   编程 Kubernetes node  Name Labels Taints Conditions  MemoryPressure DiskPressure PIDPressure Ready    Name: njjs-sys-jomo14d34c80103718120200110164857.njjs.baidu.com Roles: &amp;lt;none&amp;gt; Labels: aiedge-web=1 beta.kubernetes.io/arch=amd64 beta.kubernetes.io/os=linux gpuenable=1 kubernetes.io/hostname=njjs-sys-jomo14d34c80103718120200110164857.njjs.baidu.com Annotations: node.alpha.kubernetes.io/ttl: 0 volumes.kubernetes.io/controller-managed-attach-detach: true CreationTimestamp: Wed, 04 Mar 2020 14:44:57 +0800 Taints: &amp;lt;none&amp;gt; Unschedulable: false Conditions: Type Status LastHeartbeatTime LastTransitionTime Reason Message ---- ------ ----------------- ------------------ ------ ------- MemoryPressure False Fri, 08 May 2020 20:32:14 +0800 Tue, 14 Apr 2020 19:18:50 +0800 KubeletHasSufficientMemory kubelet has sufficient memory available DiskPressure False Fri, 08 May 2020 20:32:14 +0800 Tue, 14 Apr 2020 19:18:50 +0800 KubeletHasNoDiskPressure kubelet has no disk pressure PIDPressure False Fri, 08 May 2020 20:32:14 +0800 Tue, 14 Apr 2020 19:18:50 +0800 KubeletHasSufficientPID kubelet has sufficient PID available Ready True Fri, 08 May 2020 20:32:14 +0800 Wed, 29 Apr 2020 15:34:10 +0800 KubeletReady kubelet is posting ready status Addresses: InternalIP: 10.</description>
    </item>
    
    <item>
      <title>2020-05-07</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/05/07/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/05/07/</guid>
      <description>2020 年 5 月 7 日（星期四） 今日待办     编程 brookhong/Surfingkeys  Surfingkeys 和现有的一些插件一样，让你尽可能的通过键盘来使用 Chrome/Firefox 浏览器，比如跳转网页，上下左右滚屏。但不只是给 vim 用户使用，Surfingkeys 的基本特性是让你自己写一段 Javascript 脚本，然后通过 mapkey 映射到某些按键。之后当你按了那几个键以后，对应的 Javascript 脚本就会被执行。
快捷键  ?: 显示帮助   t: 搜索收藏夹和访问历史  参考：
 Surfingkeys &amp;ndash; 用 javascript 和键盘扩展你的 chrome  SaltStack Saltstack 是基于 python 开发的一套 C/S 自动化运维工具。
漏洞风险 参考：
 SaltStack 远程命令执行漏洞风险通告（CVE-2020-11651/CVE-2020-11652）   公司 今日头条  EE 效率工程部：做飞书，包括存储/文档 Data 广告数据部：包括数据分析，AI-Lab，广告系统，接入分发，内容平台 IES 抖音多媒体部：抖音引擎，服务端中台，faceu 产品研发部：小说，小游戏，今日头条主端 app，新业务孵化以及基础架构  大的分类就这四个部门，还有 EA 企业信息化，风控跟安全一级部门等等</description>
    </item>
    
    <item>
      <title>2020-05-06</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/05/06/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/05/06/</guid>
      <description>2020 年 5 月 6 日（星期三） 备注： 五一假后第一天
今日待办     编程 算法复杂度 圈复杂度 圈复杂度（Cyclomatic complexity，简写 CC）也称为条件复杂度，是一种代码复杂度的衡量标准。由托马斯・J・麦凯布（Thomas J. McCabe, Sr.）于 1976 年提出，用来表示程序的复杂度，其符号为 VG 或是 M。它可以用来衡量一个模块判定结构的复杂程度，数量上表现为独立现行路径条数，也可理解为覆盖所有的可能情况最少使用的测试用例数。圈复杂度大说明程序代码的判断逻辑复杂，可能质量低且难于测试和 维护。程序的可能错误和高的圈复杂度有着很大关系。
圈复杂度的计算方法很简单，计算公式为：
V(G) = E - N + 2
其中，e 表示控制流图中边的数量，n 表示控制流图中节点的数量。
几个节点通过边连接。
其实，圈复杂度的计算还有更直观的方法，因为圈复杂度所反映的是 “判定条件” 的数量，所以圈复杂度实际上就是等于判定节点的数量再加上 1，也即控制流图的区域数，对应的计算公式为：
V (G) = P + 1
其中 P 为判定节点数，判定节点举例：
if 语句 while 语句 for 语句 case 语句 catch 语句 and 和 or 布尔操作 ?: 三元运算符
参考：</description>
    </item>
    
    <item>
      <title>2020-05-04</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/05/04/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/05/04/</guid>
      <description>2020 年 5 月 4 日（星期一） 备注： 五一假日
今日待办     编程 亚马逊的 14 条领导力原则 中文 1
顾客至上
简而言之，客户永远是第一位的，不管发生什么。这一点超越了所有的职责要求。从客户的角度出发、为客户牺牲自己的利益，实际上是说，你要愿意承担损失以便让客户获利，哪怕是违背你自己的使用条款或政策。如果你知道自己犯了错，要主动考虑退款，也就是说，要在客户要求之前作出补偿。
2
主人翁精神
主人翁精神意味着两件事：
（1）总是优先考虑长期目标，而不是短期目标；
（2）始终代表团队和整个公司行事，一切都是 “你的工作”。
3
创新与简化
成功的关键是保持简单，为此，需要不断创新。
4
正确，很多
这个原则应该被理解为 “领导者要正确决策”。它说的不仅仅是不犯错误，而是要有全局观，在必要时能够并且愿意 180 度转变态度。史蒂夫・乔布斯正是因此而出名：今天他相信 XYZ，第二天他就会意识到自己完全错了，突然间他就完全支持 ABC 了。从这个角度来说，他做出了正确的决策。
5
学习并充满好奇心
这项原则可以说是不言而喻。领导者必须时刻努力吸收更多的知识，进行自我提升。
6
雇佣人才，更要实现人尽其才
这一点也是显而易见，但除了要确保提高雇佣标准外，更重要是，确定雇佣关系后，你要不断地培养员工，使他们发挥出最大潜力。
7
坚持高标准
伟大的领导者总是在提高标准，创造最优质的产品和服务。
8
往大处着眼
这项原则并不是说脱离实际，好高骛远；往大处着眼的同时，也要遵从第一条 “顾客至上” 的原则。
9
积极行动
这项原则常常令人困惑不已。它的原理在于，由于多数错误并非不可挽回，所以冒险犯错也无可厚非。因此，伟大的领导者要积极行动：快速前进，而非被分析捆住了手脚，裹足不前。
10
节俭
这条普遍适用于所有创业公司创始人：不能毫无节制地花钱。基本上，就是用最少的钱干最多的事，在投入最小化的同时做到产出的最大化。
11
赢得信任
这是一条双行道：不仅需要取得他人的信任，也需要使他人感受到被信任的感觉。
12
深入研究
数据才是最重要的。当数据和感觉不一致时，可以质疑，但要相信数据。
13
永远坚守核心，处理好争议与承诺
虽然排到第十三位，但这条原则至关重要。它是说：当两方存在争议时，这很平常，有人最后坚决反对，十分坚定地说 “不”，也说清楚了个中缘由，在这样的情况下，你依然能同意去尝试不同的选择，并且给予全力支持。也就是说，即使你不同意，你也会给出自己的承诺去尝试。
14</description>
    </item>
    
  </channel>
</rss>