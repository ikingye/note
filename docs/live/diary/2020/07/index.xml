<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>7 月 on 叶王笔记</title>
    <link>https://ikingye.github.io/note/docs/live/diary/2020/07/</link>
    <description>Recent content in 7 月 on 叶王笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    
	<atom:link href="https://ikingye.github.io/note/docs/live/diary/2020/07/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>2020-07-30</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/07/30/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/07/30/</guid>
      <description>2020 年 7 月 30 日（星期三） #  今日待办 #      编程 #  编译 #  编译过程 #  预处理 (Preprocess) #   将 #include 的头文件展开 将 #define 语句指定的值转换为变量 将将宏定义转换为具体代码 根据 #if #elif 和 #endif 指定的位置包含或排除特定部分的代码  $ gcc -E hello.cpp -o hello.i 或 $ cpp hello.cpp &amp;gt; hello.i 编译 (Compilation) #   对展开后的源文件 hello.i 进行语法检查，确认代码是否满足语言相关的语法规则 检查通过后生成汇编文件 hello.s  $ gcc -S hello.i -o hello.</description>
    </item>
    
    <item>
      <title>2020-07-28</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/07/28/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/07/28/</guid>
      <description>2020 年 7 月 28 日（星期二） #  今日待办 #      编程 #  HTTP #  HTTP/2 #  握手方式 #  h2 #   必须使用 TLS 加密 在 TLS 握手期间会顺带完成 HTTPS/2 协议的协商 如果协商失败（比如客户端不支持或者服务端不支持），则会使用 HTTPS/1 继续后续通讯  h2c #   不使用 TLS 多了一次基于 HTTP 协议的握手往返来完成向 HTTP/2 协议的升级 一般不建议使用   Go #  打印变量类型 #  import &amp;#34;reflect&amp;#34; tst := &amp;#34;string&amp;#34; fmt.Println(reflect.TypeOf(tst)) Go 类型转换 #   断言  类型断言 s, ok := x.</description>
    </item>
    
    <item>
      <title>2020-07-27</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/07/27/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/07/27/</guid>
      <description>2020 年 7 月 27 日（星期一） #  今日待办 #      编程 #  Python #  异常 #  while True: try: x = int(input(&amp;#34;Please enter a number: &amp;#34;)) break except ValueError: print(&amp;#34;Oops! That was no valid number. Try again...&amp;#34;) else: print(&amp;#34;else&amp;#34;) finally: print(&amp;#34;goobye&amp;#34;) Python2 和 Python3 的 Exception 区别 #  Python2 是逗号，Python3 是 as
# python2 try: raise except Exception, e: print (e) return false # python3 try: raise except Exception as e: print (e) return false import 兼容 python2 和 python3 #  try: # Python3 from configparser import ConfigParser except ImportError: # Python2 from ConfigParser import ConfigParser config = ConfigParser()  Go #  函数 #  命名返回值 #  在函数有多个返回值时，只要有一个返回值有命名，其他的也必须命名。</description>
    </item>
    
    <item>
      <title>2020-07-24</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/07/24/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/07/24/</guid>
      <description>2020 年 7 月 24 日（星期五） #  今日待办 #      编程 #  Istio #  Ingress vs Egress #  参考：
 Istio ingress and egress gateways  服务限流熔断 #  MaxConnections
 Python #   对 CPU 密集型代码（比如循环计算），多进程效率更高 对 IO 密集型代码（比如文件操作，网络爬虫），多线程效率更高  CPU 非瓶颈，而且没有进程切换那么大消耗    Python 多进程 #  进程间通信 #   管道 / 匿名管道 (pipe)  管道的实质是一个内核缓冲区   有名管道 (FIFO)  有名管道的名字存在于文件系统中，内容存放在内存中   信号 信号量  信号量是一个计数器，用于多进程对共享数据的访问   套接字 共享内存 消息队列  消息队列存放在内核中，只有在内核重启 (即，操作系统重启) 或者显示地删除一个消息队列时，该消息队列才会被真正的删除    multiprocess #  Process #  from multiprocessing import Process, Queue # 使用队列进行数据共享和通信 # 父进程创建 Queue，并传给各个子进程 q = Queue() p1 = Process(target=long_time_task, args=(q,)) p1.</description>
    </item>
    
    <item>
      <title>2020-07-23</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/07/23/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/07/23/</guid>
      <description>2020 年 7 月 23 日（星期四） #  今日待办 #      编程 #  Go #  集合类型 #   数组 切片 哈希表 Channel  零值 #  在 Go 语言中， 布尔类型的零值（初始值）为 false， 数值类型的零值为 0， 字符串类型的零值为空字符串 &amp;ldquo;&amp;quot;， 而指针、切片、映射、通道、函数和接口的零值则是 nil。
循环变量取地址错误 #  func main() { var out []*int for i := 0; i &amp;lt; 3; i++ { out = append(out, &amp;amp;i) } fmt.Println(&amp;#34;Values:&amp;#34;, *out[0], *out[1], *out[2]) fmt.</description>
    </item>
    
    <item>
      <title>2020-07-22</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/07/22/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/07/22/</guid>
      <description>2020 年 7 月 22 日（星期三） #  今日待办 #      编程 #  算法 #  回溯法 #  回溯法（探索与回溯法）是一种选优搜索法，又称为试探法，按选优条件向前搜索，以达到目标。 但当探索到某一步时，发现原先选择并不优或达不到目标，就退回一步重新选择， 这种走不通就退回再走的技术为回溯法，而满足回溯条件的某个状态的点称为 “回溯点”。
回溯法其实就是递归算法的一种，但是有要注意的点：
 保留现场：在进行递归的时候，保存上一次的状态，递归回来之后仍然能回到上次的状态 结束条件：满足条件的时候保存结果   QOS #  Quality of Serivce
IP QoS 是指 IP 网络的一种能力，即在跨越多种底层网络技术（MP、FR、ATM、Ethernet、SDH、MPLS 等）的 IP 网络上，为特定的业务提供其所需要的服务。服务质量包括：
 传输的带宽 传输的时延和抖动 数据的丢包率  通常 QoS 提供以下三种服务模型：
 Best-Effort service（尽力而为服务模型） Integrated service（综合服务模型，简称 Int-Serv） Differentiated service（区分服务模型，简称 Diff-Serv）。   C++ 深拷贝 vs 浅拷贝 #  问题：在 C++ 中 default constructor 对对象进行的是怎样的拷贝动作？</description>
    </item>
    
    <item>
      <title>2020-07-21</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/07/21/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/07/21/</guid>
      <description>2020 年 7 月 21 日（星期二） #  今日待办 #      编程 #  YAML #  YAML 是 &amp;ldquo;YAML Ain&#39;t a Markup Language&amp;rdquo;（YAML 不是一种标记语言）的递归缩写。
格式 #   缩排字符数目不重要，只要相同阶层的左侧对齐就可以了（不能使用 TAB 字符） 同时包含多个文件，并用 “---” 分隔 选择性的符号 “...” 可以用来表示档案结尾 字串不一定要用双引号标识 允许在文件中加入选择性的空行，以增加可读性  YAML Lists #  List 数组，使用连字符（-）表示，例如：
volumeMounts: - name: kubernetes-dashboard-certs mountPath: /certs { &amp;#34;volumeMounts&amp;#34;: [ { &amp;#34;name&amp;#34;: &amp;#34;kubernetes-dashboard-certs&amp;#34;, &amp;#34;mountPath&amp;#34;: &amp;#34;/certs&amp;#34; } ] } 使用 - 表示新的一组 #  多个成员中的若刚个</description>
    </item>
    
    <item>
      <title>2020-07-20</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/07/20/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/07/20/</guid>
      <description>2020 年 7 月 20 日（星期一） #  今日待办 #      编程 #  Go #  glibc #  Go 可直接编译成机器码，不依赖其他库，glibc 的版本有一定要求，部署就是扔一个文件上去就完成了。
并发性能 #   避免使用管道 chan 传递主业务数据，避免将业务流程处理流程分割到对个 Go 程中执行，这样做减少 chan 传输耗时  参考：
 Golang 号称高并发，但高并发时性能不高   Istio #  ingress gateway #  $ kubectl get svc istio-ingressgateway -n istio-system NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE istio-ingressgateway LoadBalancer 10.110.126.136 &amp;lt;pending&amp;gt; 15020:31287/TCP,80:30083/TCP,443:32328/TCP,31400:31271/TCP,15443:30247/TCP 3d16h EXTERNAL-IP 值为 &amp;lt;none&amp;gt; （或持续显示 &amp;lt;pending&amp;gt;），说明环境没有提供外部负载均衡，无法使用 ingress gateway。 在这种情况下，你可以使用服务的 node port 访问网关。</description>
    </item>
    
    <item>
      <title>2020-07-17</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/07/17/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/07/17/</guid>
      <description>2020 年 7 月 17 日（星期五） #  今日待办 #      编程 #  Istio #  ingressGateway 代理 #  server { listen 8500; location / { proxy_pass http://localhost:31443; # nginx 反向代理默认走的 http 1.0 版本 # 但是 被反向代理的服务器是 1.1 版本的！ proxy_http_version 1.1; } error_log /var/log/nginx/istio-ingressgateway_error.log; access_log /var/log/nginx/istio-ingressgateway_access.log; } rate limit #  安装
# Policy enforcement must be enabled istioctl install --set profile=demo --set meshConfig.disablePolicyChecks=false --set values.</description>
    </item>
    
    <item>
      <title>2020-07-16</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/07/16/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/07/16/</guid>
      <description>2020 年 7 月 16 日（星期四） #  今日待办 #      编程 #  Kubernetes #  安装 #  # 添加源 cat &amp;lt;&amp;lt;EOF &amp;gt; /etc/yum.repos.d/kubernetes.repo [kubernetes] name=Kubernetes baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/ enabled=1 gpgcheck=1 repo_gpgcheck=1 gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg EOF yum -y makecache # 查看版本 # yum list kubelet --showduplicates | sort -r # 安装 kubelet, kubeadm, kubectl yum install -y kubelet-1.18.3 kubeadm-1.18.3 kubectl-1.18.3 # 启动 kubelet 并设置开机启动 systemctl enable kubelet &amp;amp;&amp;amp; systemctl start kubelet # kubelet 命令补全 echo &amp;#34;source &amp;lt;(kubectl completion bash)&amp;#34; &amp;gt;&amp;gt; ~/.</description>
    </item>
    
    <item>
      <title>2020-07-15</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/07/15/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/07/15/</guid>
      <description>2020 年 7 月 15 日（星期三） #  今日待办 #      编程 #  HTTP #  Content-Type #  用于定义用户的浏览器或相关设备如何显示将要加载的数据，或者如何处理将要加载的数据
 multipart/form-data  常见的 POST 数据提交的方式 我们使用表单上传文件时，必须把 form 标签的 enctype 设置为 multipart/form-data   application/x-www-form-urlencoded  浏览器的原生 form 表单 提交的数据按照 key1=val1&amp;amp;key2=val2 的方式进行编码，key 和 val 都进行了 URL 转码   application/json  消息主体是序列化后的 JSON 字符串   application/javascript application/xml  xml 格式数据   application/form-data  主要是用来上传文件   text/plain  将文件设置为纯文本的形式，浏览器在获取到这种文件时并不会对其进行处理   text/html  意思是将文件的 content-type 设置为 text/html 的形式 浏览器在获取到这种文件时会自动调用 html 的解析器对文件进行相应的处理   text/xml  使用 HTTP 作为传输协议，XML 作为编码方式的远程调用规范    无 #  POST /api/v1/account/ HTTP/1.</description>
    </item>
    
    <item>
      <title>2020-07-14</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/07/14/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/07/14/</guid>
      <description>2020 年 7 月 14 日（星期二） #  今日待办 #      编程 #  k3s #  $ k version Client Version: version.Info{Major:&amp;#34;1&amp;#34;, Minor:&amp;#34;18&amp;#34;, GitVersion:&amp;#34;v1.18.2&amp;#34;, GitCommit:&amp;#34;52c56ce7a8272c798dbc29846288d7cd9fbae032&amp;#34;, GitTreeState:&amp;#34;clean&amp;#34;, BuildDate:&amp;#34;2020-04-16T23:34:25Z&amp;#34;, GoVersion:&amp;#34;go1.14.2&amp;#34;, Compiler:&amp;#34;gc&amp;#34;, Platform:&amp;#34;darwin/amd64&amp;#34;} Server Version: version.Info{Major:&amp;#34;1&amp;#34;, Minor:&amp;#34;18&amp;#34;, GitVersion:&amp;#34;v1.18.4+k3s1&amp;#34;, GitCommit:&amp;#34;97b7a0e9df2883f08028fb7171c1e62fc1899a0c&amp;#34;, GitTreeState:&amp;#34;clean&amp;#34;, BuildDate:&amp;#34;2020-06-18T01:30:45Z&amp;#34;, GoVersion:&amp;#34;go1.13.11&amp;#34;, Compiler:&amp;#34;gc&amp;#34;, Platform:&amp;#34;linux/amd64&amp;#34;} $ k get all -A NAMESPACE NAME READY STATUS RESTARTS AGE kube-system pod/metrics-server-7566d596c8-xg6ht 1/1 Running 0 4m43s kube-system pod/local-path-provisioner-6d59f47c7-cr5pg 1/1 Running 0 4m43s kube-system pod/coredns-8655855d6-t86q8 1/1 Running 0 4m43s NAMESPACE NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE default service/kubernetes ClusterIP 10.</description>
    </item>
    
    <item>
      <title>2020-07-13</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/07/13/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/07/13/</guid>
      <description>2020 年 7 月 13 日（星期一） #  今日待办 #      编程 #  Vert.x #  Eclipse Vert.x is a tool-kit for building reactive applications on the JVM.
Vert.x 项目起始于 2011 年，最开始的名字叫做 node.x，是一个仿照 Node.js 以 Java 开发的，基于 EventLoop 的异步非阻塞编程框架。虽然从时间上来说也算有一定年头了，但是一直没有大火，从 3.x 开始才稍微流行了一点。
Vert.x 的底层 IO 基于 Netty4 实现，核心模块 Vertx Core，支持非阻塞 文件 IO，TCP，UDP，DNS，HTTP，HTTPS，HTTP2 (包括 h2 和 h2c)。比较基础的模块 Vert.x-Web ，提供了包括 URL 路由，模板引擎在内的开发 web server 所需的 API，Vert.x Web Client，提供一个非阻塞 Http Client 实现。</description>
    </item>
    
    <item>
      <title>2020-07-11</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/07/11/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/07/11/</guid>
      <description>2020 年 7 月 11 日（星期六） #  今日待办 #      编程 #  网站统计 #  Google Analytics #  Google Tag Manager #  参考：
 What is the difference between google tag manager and google analytics?  </description>
    </item>
    
    <item>
      <title>2020-07-10</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/07/10/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/07/10/</guid>
      <description>2020 年 7 月 10 日（星期五） #  今日待办 #      编程 #  RTSP #  RTSP over UDP #  优点
 实时流延迟较小  缺点
 UDP 协议上的 RTSP/RTP 需要打开许多 UDP 端口（每一路流媒体都需要 2 个 UDP 端口，一个用于接收数据，一个用于接收控制信息）； 当因特网上的路由器没有打开这些端口的时候，上述第一点将会存在问题； 中间网络路由器很容易就过滤或者忽略掉 UDP 数据包； UDP 是不可靠传输协议，媒体包在因特网上传输时会面临着丢包。  RTSP over TCP #  优点
 RTSP/RTP 的控制命令和数据都通过一个端口，即 RTSP 的端口（默认为 554），进行交互。 TCP 包更容易穿透中间网络路由器。  缺点
 由于二元交织，会使得 RTP 包封包和解包的过程变得更加复杂。 TCP 是可靠的传输协议，但正是因为如此，会导致在实时流媒体中的延时。  ffplay #  指定使用 TCP 播放</description>
    </item>
    
    <item>
      <title>2020-07-09</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/07/09/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/07/09/</guid>
      <description>2020 年 7 月 9 日（星期四） #  今日待办 #      编程 #  socketio/socket.io #  Realtime application framework (Node.JS server)
 知乎批量取消关注 #  取消关注问题 #  点击关注的问题列表 https://www.zhihu.com/question/following
// https://www.zhihu.com/question/following function unfollow_question_all() { var remaining = $(&amp;#34;.zg-unfollow&amp;#34;).length if (remaining &amp;gt; 0) { $(&amp;#34;.zg-unfollow&amp;#34;).first().trigger(&amp;#34;click&amp;#34;) setTimeout(unfollow_question_all, 1000) window.scrollTo(0, document.body.scrollHeight) } } unfollow_question_all() 取消关注用户 #  点击关注的用户列表，点击到最后一页 https://www.zhihu.com/people/your-name/following?page=last
// 保存 $，否则下一轮提示 $ is not defined var j = $ function unfollow_people(follower_less_than) { j(&amp;#34;#Profile-following &amp;gt; :nth-child(2)&amp;#34;).</description>
    </item>
    
    <item>
      <title>2020-07-08</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/07/08/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/07/08/</guid>
      <description>2020 年 7 月 8 日（星期三） #  今日待办 #      编程 #  HPKP 协议 #  HTTP Public Key Pinning
HTTP 公钥固定
是 HTTPS 网站防止攻击者利用 数字证书认证机构（CA）错误签发的证书进行中间人攻击的一种安全机制，用于预防 CA 遭受入侵或其他会造成 CA 签发未授权证书的情况。采用公钥固定时，网站会提供已授权公钥的哈希列表，指示客户端在后续通讯中只接受列表上的公钥。
 OICT #  OT + IT + ICT + IoT + OTT
ICT #  信息通信技术 (Information and Communication Technology，简称 ICT)， 是 IT 和 CT 两个领域越来越紧密结合的产物。
 Podman #  基于 CRI 等标准（Docker 新架构也符合 CRI 标准）的新一代容器工具 Podman、Skopero 和 Buiddah 套件</description>
    </item>
    
    <item>
      <title>2020-07-07</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/07/07/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/07/07/</guid>
      <description>2020 年 7 月 7 日（星期二） #  今日待办 #      编程 #  Log #   Go  sirupsen/logrus  uber-go/zap    Python  cool-RR/PySnooper    PHP  itsgoingd/clockwork  Clockwork - php dev tools in your browser - server-side component     C++  gabime/spdlog    Kubernetes  fluent/fluentd      Debug #   Go  pprof go-delve/delve      Web 框架 #   PHP  laravel/laravel    Scala  playframework/playframework      Go #  interface 转 string #  // Strval 获取变量的字符串值 // 浮点型 3.</description>
    </item>
    
    <item>
      <title>2020-07-06</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/07/06/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/07/06/</guid>
      <description>2020 年 7 月 6 日（星期一） #  今日待办 #      编程 #  ELF 文件格式 #  Executable and Linkable Format，可执行连接格式， 是 UNIX 系统实验室（USL）作为应用程序二进制接口（Application Binary Interface，ABI）而开发和发布的。 扩展名为 elf。
主要有三种主要类型:
 适于连接的可重定位文件 (relocatable file)，可与其它目标文件一起创建可执行文件和共享目标文件。 适于执行的可执行文件 (executable file)，用于提供程序的进程映像，加载的内存执行。 共享目标文件 (shared object file)，连接器可将它与其它可重定位文件和共享目标文件连接成其它的目标文件，动态连接器又可将它与可执行文件和其它共享目标文件结合起来创建一个进程映像。  为了方便和高效，ELF 文件内容有两个平行的视角：
 程序连接角度 程序运行角度   Go #  go test #  GOTEST := $(GO) test GOPKGS := $$($(GO) list ./...| grep -vE &amp;#34;vendor&amp;#34;) test-case: $(GOTEST) -v -cover $(GOPKGS)  Hasura actions #  hasura/graphql-engine #  Blazing fast, instant realtime GraphQL APIs on Postgres with fine grained access control, also trigger webhooks on database events.</description>
    </item>
    
    <item>
      <title>2020-07-05</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/07/05/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/07/05/</guid>
      <description>2020 年 7 月 5 日（星期日） #  今日待办 #      编程 #  Markdown #  在表格单元格里换行 #  &amp;lt;br&amp;gt;
图片在右侧 #  &amp;lt;img align=&amp;#34;right&amp;#34; src=&amp;#34;https://demo.png&amp;#34;/&amp;gt; 行首空格 #  需要借助 HTML 转义字符在行首添加空格来实现，
 &amp;amp;ensp; 代表半角空格， &amp;amp;emsp; 代表全角空格。  参考：
 关于 Markdown 的一些奇技淫巧  </description>
    </item>
    
    <item>
      <title>2020-07-02</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/07/02/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/07/02/</guid>
      <description>2020 年 7 月 2 日（星期四） #  今日待办 #      编程 #  软件设计原则 #   Don’t Repeat Yourself (DRY) Keep It Simple, Stupid (KISS) Program to an interface, not an implementation Command-Query Separation (CQS) – 命令 - 查询分离原则 You Ain’t Gonna Need It (YAGNI) Law of Demeter – 迪米特法则 面向对象的 S.O.L.I.D 原则 Common Closure Principle（CCP）– 共同封闭原则 Common Reuse Principle (CRP) – 共同重用原则 Hollywood Principle – 好莱坞原则 High Cohesion &amp;amp; Low/Loose coupling &amp;amp; – 高内聚， 低耦合 Convention over Configuration（CoC）– 惯例优于配置原则 Separation of Concerns (SoC) – 关注点分离 Design by Contract (DbC) – 契约式设计  参考：</description>
    </item>
    
    <item>
      <title>2020-07-01</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/07/01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/07/01/</guid>
      <description>2020 年 7 月 1 日（星期三） #  今日待办 #      编程 #  SIP #  BYE vs CANCEL #  For short, BYE is used when the callee already pick up the phone and talk for a while, otherwise, CANCEL takes place.
参考：
 Introduction to SIP BYE, CANCEL and hop-by-hop messages [video]understanding difference between sip bye &amp;amp; cancel request   作用域 #   局部变量  在 C 语言中局部变量，只有执行了才会分配存储空间，只要离开作用域就会自动释放，C 语言的局部变量存储在栈区 Go 语言局部变量的生命周期和 C 语言一样   全局变量  在 C 语言中全局变量，只要程序一启动就会分配存储空间，只有程序关闭才会释放存储空间，C 语言的全局变量存储在静态区 (数据区) Go 语言全局变量的生命周期和 C 语言一样     如何学习 Web 安全 #   一切的安全问题都体现在 “输入输出” 上，一切的安全问题都存在于 “数据流” 的整个过程中。</description>
    </item>
    
  </channel>
</rss>