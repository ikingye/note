<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>首页 on 叶王笔记</title>
    <link>https://ikingye.github.io/note/</link>
    <description>Recent content in 首页 on 叶王笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    
	<atom:link href="https://ikingye.github.io/note/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>2020-03-31</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/03/31/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/03/31/</guid>
      <description>2020 年 3 月 31 日（星期二） #  今日待办 #   xxx   语言 #  滥觞 lànshāng #  浮起酒杯。喻事情的开始
夫江始出于岷山,其源可以滥觞。——《孔子家语·三恕》
社会 #  内卷化（网络） #   靠极端剥削、压榨自己，从而在社会获得少量的竞争优势 明明可以有更加轻松，效果还更好的选择，却仍旧在旧有的选择中不断投入各类资源，以及由此产生的各种现象 不改变生产方式，不提高技术水平，而是靠极端剥削、压榨本国的劳动力在国际市场获得竞争优势  举一个很简单的例子：
假定某省考生数量，录取名额不变，即录取率不变。
现在有一所学校，甲校要求高中生每天学习 14 个小时，寒暑假和双休日补课。这一操作的效果是在短期内提高了甲校的录取率。
这种录取率提升的甜头让乙、丙、丁校羡慕，于是均决定向甲校学习，推行甲校的教学管理模式。
由于担心甲、乙、丙、丁校录取率的上升导致某省其余中学的录取率相对下降，于是该省其余学校也不得不采取跟进策略，学习和推广甲校的教学管理模式。
最终，某省所有中学都开始强迫学生一天学习 14 个小时，取消寒暑假和双休日。
于是，由于全省均采用甲校的模式，各个学校的考分尽管普遍上涨，在高考录取率不变的前提下，各个学校的录取率与推广甲学校模式之前相差无几（比如，原来一本线是 550 分，由于学生成绩普遍提高，一本线上调至 590 分，导致各个学校录取率与推广甲校之前无异）。
在这一过程中，为提高分数，中学生不得不投入更多的学习时间和资源。由于该省高考录取分数线提高，单个学生的分数看似提高，但从录取结果看，这种投入没有意义。这就是所谓的分数增长，但学生考取好大学的几率没有实质增长，即 “没有发展的增长”—— 内卷化。
内卷化（学术） #  从词源来看，“内卷化” 一词的英文为 involution, 它源于拉丁语 involutum, 原意是 “转或卷起来”。
从起源看，“内卷化”（involution）滥觞于顶顶大名的大哲学家康德，他初步区分了内卷化（involution）和 “演化”（evolution），随后学者 Alexander Goldenweiser 借用该概念描述 “一种内部不断精细化的文化现象”。
真正把 “内卷化” 这一概念发扬光大的是人类学家 Clifford Geertz 和经济史学家黄宗智。</description>
    </item>
    
    <item>
      <title>2020-05-31</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/05/31/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/05/31/</guid>
      <description>2020 年 5 月 31 日（星期日） #  今日待办 #      编程 #  Service Mesh Comparison #  </description>
    </item>
    
    <item>
      <title>婚姻故事</title>
      <link>https://ikingye.github.io/note/docs/humanities/movie/others/Merrage-Story/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/humanities/movie/others/Merrage-Story/</guid>
      <description>婚姻故事 —— 不容易 #  豆瓣</description>
    </item>
    
    <item>
      <title>肖申克的救赎</title>
      <link>https://ikingye.github.io/note/docs/humanities/movie/doubantop250/The-Shawshank-Redemption/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/humanities/movie/doubantop250/The-Shawshank-Redemption/</guid>
      <description>肖申克的救赎 —— 自由 #  豆瓣</description>
    </item>
    
    <item>
      <title>2020-04-30</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/04/30/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/04/30/</guid>
      <description>2020 年 4 月 30 日（星期四） #  今日待办 #      编程 #  网络 #  增加组播路由 #  使用 route 命令添加
使用 route 命令添加的路由，机器重启或者网卡重启后路由就失效了，方法：
# 添加到主机的路由 route add –host 192.168.168.110 dev eth0 route add –host 192.168.168.119 gw 192.168.168.1 # 添加到网络的路由 route add –net IP netmask MASK eth0 route add –net IP netmask MASK gw IP route add –net IP/24 eth1 # 添加默认网关 route add default gw IP # 删除路由 route del –host 192.</description>
    </item>
    
    <item>
      <title>2020-05-30</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/05/30/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/05/30/</guid>
      <description>2020 年 5 月 30 日（星期六） #  今日待办 #      编程 #  华为 5G 边缘计算 #  CSP Edge #  现在使用 Kubernetes，原来是 CSP Edge
communicationsservice provider (CSP)
 5G 时代的运营商 #  5G MEC 将云计算和 5G 核心网带到网络边缘，带来了新的流量模型和部署模型。 如果运营商还继续采用 4G 移动承载网的设计思路，在 5G 时代，运营商网络将面临边缘计算的困局。
MEC 使运营商能在网络边缘分流业务， 通过端到端整体方案为客户提供更低时延、更高带宽、更低成本的业务体验， 快速响应用户请求并提升服务质量。</description>
    </item>
    
    <item>
      <title>2020-06-30</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/06/30/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/06/30/</guid>
      <description>2020 年 6 月 30 日（星期二） #  今日待办 #      编程 #  Go #  GMP 调度器 #  </description>
    </item>
    
    <item>
      <title>hugo-academic</title>
      <link>https://ikingye.github.io/note/docs/study/docs/note/hugo/theme/academic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/study/docs/note/hugo/theme/academic/</guid>
      <description>Academic #  配置 #  写博客 #  hugo new &amp;ndash;kind post post/my-post</description>
    </item>
    
    <item>
      <title>基础</title>
      <link>https://ikingye.github.io/note/docs/live/parenting/appendix/interview/basic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/parenting/appendix/interview/basic/</guid>
      <description>基础面试题 #  </description>
    </item>
    
    <item>
      <title>进阶</title>
      <link>https://ikingye.github.io/note/docs/live/parenting/appendix/interview/advanced/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/parenting/appendix/interview/advanced/</guid>
      <description>进阶面试题 #  </description>
    </item>
    
    <item>
      <title>配置</title>
      <link>https://ikingye.github.io/note/docs/study/docs/note/hugo/config/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/study/docs/note/hugo/config/</guid>
      <description>Hugo 配置 #  参考：https://themes.gohugo.io/hugo-book</description>
    </item>
    
    <item>
      <title>2020-04-29</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/04/29/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/04/29/</guid>
      <description>2020 年 4 月 29 日（星期三） #  今日待办 #      编程 #  docker #  权限 #  docker run # 无法使用 gdb 调试 --cap-add SYS_PTRACE # 无法使用 date -s 修改时间 --cap-add=SYS_TIME # –privileged 等效于–cap-add=ALL 参考：
 使用 docker run &amp;ndash;cap-add 参数解决权限问题（无法使用 gdb 调试、无法 date -s 修改时间)  insecure-registry #  # vi /etc/docker/daemon.json { &amp;#34;insecure-registries&amp;#34; : [ &amp;#34;hostname.cloudapp.net:5000&amp;#34; ] } # 参考：https://stackoverflow.com/questions/42211380/add-insecure-registry-to-docker # 重启 docker systemctl restart docker  面试 #  字节头条面试要求 #   算法、数据结构和系统设计 提前温习软件工程的核心概念，  例如：如何从一个需求落实到一个系统设计，如何衡量两个不同设计的好坏，如何在各种限制下（人员、时间、资源等）选择其中更合适的设计，以及提升该设计的可拓展性等。​   在白板上练习算法题目，写出清晰、简洁、bug free 的代码，，并衡量时间和空间复杂度以及可能存在的副作用。​ 尝试用不同的方法，思路或数据结构去解决同一个问题，并且衡量不同解法之间的优劣。​ 练习  《Cracking the Coding Interview》​ https://leetcode.</description>
    </item>
    
    <item>
      <title>2020-05-29</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/05/29/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/05/29/</guid>
      <description>2020 年 5 月 29 日（星期五） #  今日待办 #      编程 #  OpenYurt #  alibaba/openyurt 阿里云原生团队表示，使用 OpenYurt （Yurt，/jɜːrt/，蒙古包）作为本次开源项目名称，期望以其 “形” 来表示边缘计算侧重于创建一个集中管理但物理分布的基础设施，并支持自动 / 自治运行操作的含义。</description>
    </item>
    
    <item>
      <title>2020-06-29</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/06/29/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/06/29/</guid>
      <description>2020 年 6 月 29 日（星期一） #  今日待办 #      编程 #  Kubernetes #  Pod 重启原因 #  标签 vs 注解 #  annotations
 算法 #  数组中，所有的数都是 2 个，只有一个数是 1 个 #  按位异或，结果为这个数
 相同的两个数按位异或，等于 0 0 与任何一个数按位异或，等于这个数  数组中，所有的数都是偶数个，只有一个数是奇数个（2n + 1） #  按位异或，结果为这个数
数组中，所有的数都是偶数个，只有两个数是奇数个 （2n +2） #  按位异或，看结果的二进制表示，得知奇数个的两个数，不同的位是哪些 （结果的二进制表示值为 1 的位，就是不同的）， 按结果任意一个不同的位进行分组，就可以分成两组，然后分别再异或，就得到结果
if num &amp;amp; (1 &amp;lt;&amp;lt; n): print(&amp;#34;num 的第 n 位是 1&amp;#34;) else: print(&amp;#34;num 的第 n 位是 0&amp;#34;) 3n +1, 3n +2, an +b #  TODO</description>
    </item>
    
    <item>
      <title>hugo-book</title>
      <link>https://ikingye.github.io/note/docs/study/docs/note/hugo/theme/hugo-book/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/study/docs/note/hugo/theme/hugo-book/</guid>
      <description>hugo-book #  配置 #  Site Configuration #   点击查看配置详情 ...  # (Optional) Set Google Analytics if you use it to track your website. # Always put it on the top of the configuration file, otherwise it won&amp;#39;t work googleAnalytics = &amp;#34;UA-XXXXXXXXX-X&amp;#34; # (Optional) If you provide a Disqus shortname, comments will be enabled on # all pages. disqusShortname = &amp;#34;my-site&amp;#34; # (Optional) Set this to true if you use capital letters in file names disablePathToLower = true # (Optional) Set this to true to enable &amp;#39;Last Modified by&amp;#39; date and git author # information on &amp;#39;doc&amp;#39; type pages.</description>
    </item>
    
    <item>
      <title>总统</title>
      <link>https://ikingye.github.io/note/docs/social/history/country/south-korea/president/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/social/history/country/south-korea/president/</guid>
      <description>韩国总统 #  </description>
    </item>
    
    <item>
      <title>高阶</title>
      <link>https://ikingye.github.io/note/docs/live/parenting/appendix/interview/expert/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/parenting/appendix/interview/expert/</guid>
      <description>高阶面试题 #  </description>
    </item>
    
    <item>
      <title>2020-04-28</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/04/28/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/04/28/</guid>
      <description>2020 年 4 月 28 日（星期二） #  今日待办 #      编程 #  算法 #  树的最长路径 #  #coding=utf-8 class TreeNode(): def __init__(self, val): self.val = val self.left = None self.right = None def longest(root): if root is None: return 0 return max(length(root), length(root.left), length(root.right)) def length(root): if root is None: return 0 return height(root.left) + height(root.right) def height(root): if root is None: return 0 return max(height(root.</description>
    </item>
    
    <item>
      <title>2020-05-28</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/05/28/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/05/28/</guid>
      <description>2020 年 5 月 28 日（星期四） #  今日待办 #      编程 #  Hadoop #  HDFS #  Hadoop Distributed File System，是 Hadoop 的分布式文件系统
每台机器上运行一个 DataNode 进程，负责管理一部分数据。
有一台机器上运行了 NameNode 进程，负责管理整个 HDFS 集群的这么一个进程，里面存储了 HDFS 集群的所有元数据
每次内存里改完了，写一条 edits log，元数据修改的操作日志到磁盘文件里，不修改磁盘文件内容，就是顺序追加
每次 NameNode 重启的时候，把 edits log 里的操作日志读到内存里，就可以恢复元数据
YARN #  MapReduce #   Spring Cloud #   Eureka：各个服务启动时，Eureka Client 都会将服务注册到 Eureka Server，并且 Eureka Client 还可以反过来从 Eureka Server 拉取注册表，从而知道其他服务在哪里 Ribbon：服务间发起请求的时候，基于 Ribbon 做负载均衡，从一个服务的多台机器中选择一台 Feign：基于 Feign 的动态代理机制，根据注解和选择的机器，拼接请求 URL 地址，发起请求 Hystrix：发起请求是通过 Hystrix 的线程池来走的，不同的服务走不同的线程池，实现了不同服务调用的隔离，避免了服务雪崩的问题 Zuul：如果前端、移动端要调用后端系统，统一从 Zuul 网关进入，由 Zuul 网关转发请求给对应的服务  Eureka #  Eureka 是微服务架构中的注册中心，专门负责服务的注册与发现。</description>
    </item>
    
    <item>
      <title>2020-06-28</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/06/28/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/06/28/</guid>
      <description>2020 年 6 月 28 日（星期日） #  备注：上班（端午调休）
今日待办 #      编程 #  Redis #  redis.conf 配置
 daemonize  daemonize:yes: redis 采用的是单进程多线程的模式。当 redis.conf 中选项 daemonize 设置成 yes 时，代表开启守护进程模式。在该模式下，redis 会在后台运行，并将进程 pid 号写入至 redis.conf 选项 pidfile 设置的文件中，此时 redis 将一直运行，除非手动 kill 该进程。 daemonize:no: 当 daemonize 选项设置成 no 时，当前界面将进入 redis 的命令行界面，exit 强制退出或者关闭连接工具 (putty,xshell 等) 都会导致 redis 进程退出。    supervisor 管理 redis #  参考：</description>
    </item>
    
    <item>
      <title>2020-04-27</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/04/27/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/04/27/</guid>
      <description>2020 年 4 月 27 日（星期一） #  今日待办 #      编程 #  GB28181 #  SIP 协议 #  Antisip
 VSCode #   kasecato/vscode-intellij-idea-keybindings   运维 #  disconf #  Distributed Configuration Management Platform (分布式配置管理平台) http://disconf.readthedocs.io/
consul + consul-template #  gcc vs g++ #   后缀为 .c 的  gcc 把它当做 C 程序 g++ 当做是 C++ 程序     编译可以用 gcc/g++，而链接可以用 g++ 或者 gcc -lstdc++  编译阶段，g++ 会调用 gcc，对于 c++ 代码，两者是等价的 gcc 命令不能自动和 C++ 程序使用的库联接，所以通常用 g++ 来完成链接 可以选择手动链接，gcc -lstdc++    乐观锁 vs 悲观锁 #  乐观锁（读多写少） #  总是假设最好的情况，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据， 可以使用版本号机制和 CAS 算法实现。</description>
    </item>
    
    <item>
      <title>2020-04-26</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/04/26/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/04/26/</guid>
      <description>2020 年 4 月 26 日（星期日） #  备注：
 法定上班。  今日待办 #      编程 #  duedge #  基础架构
http #  Host header #  函数式编程 #  MostlyAdequate/mostly-adequate-guide #  Mostly adequate guide to FP (in javascript)
中文版 #  llh911001/mostly-adequate-guide-chinese 点击阅读
JavaScript #  如何衡量一个人的 JavaScript 水平？
 python #  猴子补丁 #  属性在运行时的动态替换，叫做猴子补丁（Monkey Patch）。
monkey patch 即运行时动态改变方法、类的方法。 不管是定义在类外的普通方法、类里面的方法、甚至是模块这些都可以进行 “动态替换的操作”</description>
    </item>
    
    <item>
      <title>2020-04-25</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/04/25/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/04/25/</guid>
      <description>2020 年 4 月 25 日（星期六） #  今日待办 #      编程 #  git #  submodule #  git submodule add -b #  参考：
 How can I specify a branch/tag when adding a Git submodule?  submodule 修改 url #   edit the .gitmodules file to update the URL git submodule sync  参考： How to change the remote repository for a git submodule?</description>
    </item>
    
    <item>
      <title>2020-05-25</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/05/25/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/05/25/</guid>
      <description>2020 年 5 月 25 日（星期一） #  今日待办 #      编程 #  I/O 多路复用 vs 基于事件驱动 #  高并发是指不活跃的长连接，并不是并发请求
典型的后端服务，在逻辑上可以划分为两层，
 跟业务无关的通信层，负责 socket 连接的创建和管理，负责 bind/listen/accept/send/recv&amp;hellip; 通信层上面是业务逻辑层，负责被动响应请求，或主动推送业务消息  通信层特点：
 都是 IO 行为，几乎不大消耗 CPU 连接数很多，可能同时有 10K 甚至 100K 个 TCP 连接 通信协议就那么几种，decode/encode 简单 外部网络是慢速 IO，收发一点数据可能要 1 秒甚至更久  业务逻辑层特点：
 少量 CPU 消耗，大部分时间在等待数据库或者其它网络服务返回 业务逻辑五花八门，逻辑中往往需要调用别的网络服务，如 db 并发请求数，往往小于连接数，10K 个连接，可能每秒只有 100 个请求 单个业务请求通常很快，毫秒级别，几十毫秒算慢的了  如果完全采用传统的多线程模型，1 个 tcp 连接对应 1 个线程，10K 个连接需要 10K 个线程，典型的内存消耗是 10G。但是业务逻辑层并发请求往往要小 1 到 2 个数量级，每个请求往往只需要 100ms 以内，所以业务逻辑层需要的线程数，比通信层小 2-3 个数量级，不需要 10K 个线程，只要 100 个甚至 10 个就够了。</description>
    </item>
    
    <item>
      <title>2020-04-24</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/04/24/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/04/24/</guid>
      <description>2020 年 4 月 24 日（星期五） #  今日待办 #      编程 #  github #  comment #  Review Comments #  Commit Comments #  Issue Comments #   OAM (Open Application Model) #  OAM 是阿里巴巴和微软共同开源的云原生应用规范模型
2019 年 10 月宣布开源，同时开源了基于 OAM 的实现 Rudr。
Rudr #  A Kubernetes implementation of the Open Application Model specification https://oam.dev
OpenTelemetry #  Specifications for OpenTelemetry https://opentelemetry.</description>
    </item>
    
    <item>
      <title>2020-06-24</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/06/24/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/06/24/</guid>
      <description>2020 年 6 月 24 日（星期三） #  今日待办 #      编程 #  Ctrl + C vs Ctrl + D #  Ctrl + C tells the terminal to send a SIGINT to the current foreground process, which by default translates into terminating the application. Ctrl + D tells the terminal that it should register a EOF on standard input, which bash interprets as a desire to exit.</description>
    </item>
    
    <item>
      <title>2020-04-23</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/04/23/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/04/23/</guid>
      <description>2020 年 4 月 23 日（星期四） #  今日待办 #      编程 #  边缘计算 #   物联网关类，用 edgex 容器场景  it 类应用多的，rancher/k3s ct 类应用多的 kubeedge   starlingx 适合继承 openstack 的，又有容器要求的边缘场景  </description>
    </item>
    
    <item>
      <title>2020-05-23</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/05/23/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/05/23/</guid>
      <description>2020 年 5 月 23 日（星期六） #  今日待办 #      编程 #  VPS #  文件下载服务器 #  Nginx #  server { listen 80; server_name vultr.kingye.me; set $php_upstream &amp;#39;unix:/run/php/php7.2-fpm.sock&amp;#39;; root /root/download; index index.php; location / { #try_files $uri $uri/ /index.php?$args;  add_header Content-disposition &amp;#34;attachment; filename=$1&amp;#34;; } location ~ \.php$ { fastcgi_pass $php_upstream; fastcgi_index index.php; include fastcgi.conf; } location ~ /\.(ht|svn|git) { deny all; } }  tampermonkey（chrome 插件） #  AC-baidu: 重定向优化百度搜狗谷歌搜索去广告_favicon双列 #  Endless_Google #  豆瓣和 IMDb 互相显示评分 #  Mouseover Popup Image Viewer #  Search By Image #  网页限制解除 (改) #  一键 VIP 视频解析 #  Feedly filtering and sorting #  视频网页全屏 #  迅雷、快车、QQ 旋风等专有链解密 #  新浪微博根据关键词、作者、话题、来源等过滤微博 #  百度网盘直接下载助手 #   英语 #  i.</description>
    </item>
    
    <item>
      <title>2020-06-23</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/06/23/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/06/23/</guid>
      <description>2020 年 6 月 23 日（星期二） #  今日待办 #      编程 #  Spring #  spring 事务 REQUIRED REQUIRES_NEW 区别 #   hyperkit #  moby/hyperkit HyperKit 是一种轻量级虚拟化方法，基于 MacOSX10.10 之后引入的 Hypervisor 框架。HyperKit 应用可以利用硬件虚拟化运行 VMs，但是并不需要特殊权限或者复杂管理工具栈。
HyperKit 是基于 xHyve 和 vHyve 项目，与其他相关功能模块（例如：VPNKit 和 DataKit）合作使得运行更加有效。由于 HyperKit 架构与库之上，因此将其和 unikernel 库连接起来就显得很直接。例如，我们可以通过使用 MirageOS QCow 库（用 OCaml 编写），加入持久化块设备支持。
 k3s 安装 istio #  # 如果 curl 下载失败，可以直接访问 https://get.k3s.io，然后把 install 文本复制到本地文件（比如 install-k3s.</description>
    </item>
    
    <item>
      <title>2020-04-22</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/04/22/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/04/22/</guid>
      <description>2020 年 4 月 22 日（星期三） #  今日待办 #      编程 #  DCDN #  </description>
    </item>
    
    <item>
      <title>2020-06-22</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/06/22/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/06/22/</guid>
      <description>2020 年 6 月 22 日（星期一） #  今日待办 #      编程 #  MB 与 Mb #   网络通信领域：  一般是 bps  b 是 bit   因为在传输过程中传输的是具体的 0 和 1 不宜换算成字节。通常数据传输率是不用字节来表示的。 k=10 的 3 次方, M=10 的 6 次方 在通信网络中是非常不建议用字节来表示速率的 运营商所谓的 4M 宽带，指的就是数据率为 4Mb/s  非要换算成字节表示应该是 500kB/s（请注意这里一定是小写的 k）     计算机领域：  一般是 B  B 是 Byte   K=2 的 10 次方, M=2 的 20 次方     K 单独出现时，代表 1000 或 1024 K 与 Ki 一起出现时，K 代表 1000，Ki 代表 1024 K 与 k 一起出现时，K 代表 1024，k 代表 1000  参考：</description>
    </item>
    
    <item>
      <title>教程</title>
      <link>https://ikingye.github.io/note/docs/study/domain/operate/tutorial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/study/domain/operate/tutorial/</guid>
      <description>教程 #  书籍 #  有哪些互联网运营方面的书值得推荐？</description>
    </item>
    
    <item>
      <title>2020-04-21</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/04/21/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/04/21/</guid>
      <description>2020 年 4 月 21 日（星期二） #  今日待办 #      编程 #  EdgeGallery #  EdgeGallery 是什么？ #  EdgeGallery 是华为联合运营商，垂直行业伙伴发起的一个 MEC 边缘计算开源项目。目的是打造一个符合电信产业 “联接 + 计算” 特点的边缘计算公共平台，实现网络能力（尤其是 5G 网络）开放的标准化和 MEC 应用开发、测试、迁移和运行等生命周期流程的通用化。
EdgeGallery 可以作为 Akraino 的上游项目，在 Akraino 里面可以立项新的面向 5G MEC 的 BP，把 EdgeGallery 作为 MEC 的 PaaS 层，然后集成其他的组件，比如 OpenStack、K8S、ONAP 等来形成一个完成的解决方案堆栈。
EdgeGallery 要解决什么问题？ #  EdgeGallery 要解决的是运营商 MEC 边缘计算平台的标准不统一带来的生态碎片化，产业规模做不大的问题。
MEC 是 5G 时代运营商新的蓝海市场，通过 MEC 平台，运营商可以把 “联接 + 计算” 的能力开放给行业应用，获取行业数字化的价值红利。</description>
    </item>
    
    <item>
      <title>2020-07-21</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/07/21/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/07/21/</guid>
      <description>2020 年 7 月 21 日（星期二） #  今日待办 #      编程 #  YAML #  YAML 是 &amp;ldquo;YAML Ain&#39;t a Markup Language&amp;rdquo;（YAML 不是一种标记语言）的递归缩写。
格式 #   缩排字符数目不重要，只要相同阶层的左侧对齐就可以了（不能使用 TAB 字符） 同时包含多个文件，并用 “---” 分隔 选择性的符号 “...” 可以用来表示档案结尾 字串不一定要用双引号标识 允许在文件中加入选择性的空行，以增加可读性  YAML Lists #  List 数组，使用连字符（-）表示，例如：
volumeMounts: - name: kubernetes-dashboard-certs mountPath: /certs { &amp;#34;volumeMounts&amp;#34;: [ { &amp;#34;name&amp;#34;: &amp;#34;kubernetes-dashboard-certs&amp;#34;, &amp;#34;mountPath&amp;#34;: &amp;#34;/certs&amp;#34; } ] } 使用 - 表示新的一组 #  多个成员中的若刚个</description>
    </item>
    
    <item>
      <title>2020-04-20</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/04/20/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/04/20/</guid>
      <description>2020 年 4 月 20 日（星期一） #  今日待办 #      编程 #  TSN 时间敏感网络 #  参考：
 实时物联网 RT-IoT 终于有了自己的专属通讯网络 TSN！ 下一代工业通信 —TSN（时间敏感网络），工业物联网的助推器  cloudvr， tsn，物联网
5G 的大带宽，低时延，广连接
Cloud Native 云原生 #  什么是云原生 #  2018 年 CNCF 更新了云原生的定义。
这是新定义中描述的代表技术，其中容器和微服务两项在不同时期的不同定义中都有出现，
而服务网格这个在 2017 年才开始被社区接纳的新热点技术被非常醒目的列出来，和微服务并列，而不是我们通常认为的服务网格只是微服务在实施时的一种新的方式。
Cloud Native 翻译为云原生，是 Matt Stine 提出的一个概念，它是一个思想的集合，
包括 DevOps、 持续交付（Continuous Delivery）、微服务（MicroServices）、敏捷基础设施（Agile Infrastructure）、康威定律（Conways Law）等，以及根据商业能力对公司进行重组。
Cloud Native 既包含
 技术（微服务，敏捷基础设施）， 也包含管理（DevOps，持续交付，康威定律，重组等）。  Cloud Native 也可以说是一系列 Cloud 技术、企业管理方法的集合。</description>
    </item>
    
    <item>
      <title>2020-05-20</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/05/20/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/05/20/</guid>
      <description>2020 年 5 月 20 日（星期三） #  今日待办 #      编程 #  </description>
    </item>
    
    <item>
      <title>2020-06-20</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/06/20/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/06/20/</guid>
      <description>2020 年 6 月 20 日（星期六） #  今日待办 #      编程 #  Ubuntu 版本 #     Version Code name Release date General support until Security support (ESM) until     14.04 LTS Trusty Tahr 2014-04-17 2019-04 2022-04   16.04 LTS Xenial Xerus 2016-04-21 2021-04 2024-04   18.04 LTS Bionic Beaver 2018-04-26 2023-04 2028-04   19.10 Eoan Ermine 2019-10-17 2020-07 n/a   20.</description>
    </item>
    
    <item>
      <title>2020-07-20</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/07/20/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/07/20/</guid>
      <description>2020 年 7 月 20 日（星期一） #  今日待办 #      编程 #  Go #  glibc #  Go 可直接编译成机器码，不依赖其他库，glibc 的版本有一定要求，部署就是扔一个文件上去就完成了。
并发性能 #   避免使用管道 chan 传递主业务数据，避免将业务流程处理流程分割到对个 Go 程中执行，这样做减少 chan 传输耗时  参考：
 Golang 号称高并发，但高并发时性能不高   Istio #  ingress gateway #  $ kubectl get svc istio-ingressgateway -n istio-system NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE istio-ingressgateway LoadBalancer 10.110.126.136 &amp;lt;pending&amp;gt; 15020:31287/TCP,80:30083/TCP,443:32328/TCP,31400:31271/TCP,15443:30247/TCP 3d16h EXTERNAL-IP 值为 &amp;lt;none&amp;gt; （或持续显示 &amp;lt;pending&amp;gt;），说明环境没有提供外部负载均衡，无法使用 ingress gateway。 在这种情况下，你可以使用服务的 node port 访问网关。</description>
    </item>
    
    <item>
      <title>2020-04-19</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/04/19/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/04/19/</guid>
      <description>2020 年 4 月 19 日（星期日） #  今日待办 #      编程 #  github 周报 开发 #  probot #  https://github.com/probot/probot
weekly-digest #  https://github.com/probot/weekly-digest
repo-report #  octokit #  github rest api 库
参考文档 #   octokit docs github api docs  github api 限制 #  老是出现错误
connect ECONNREFUSED 13.250.168.23:443
 javascript #  print object #  // print object str = JSON.</description>
    </item>
    
    <item>
      <title>2020-05-19</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/05/19/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/05/19/</guid>
      <description>2020 年 5 月 19 日（星期二） #  今日待办 #      编程 #  TLS #  rfc5246
TLS 握手流程 #  TLS 是一个信道建立和信道的表达方式，向下依托于 TCP，向上对应用程序服务。
 1994 年，NetScape 公司设计了 SSL 协议（Secure Sockets Layer）的 1.0 版，但是未发布。
  1995 年，NetScape 公司发布 SSL 2.0 版，很快发现有严重漏洞。
  1996 年，SSL 3.0 版问世，得到大规模应用。
  1999 年，互联网标准化组织 ISOC 接替 NetScape 公司，发布了 SSL 的升级版 TLS 1.0 版。
  2006 年和 2008 年，TLS 进行了两次升级，分别为 TLS 1.</description>
    </item>
    
    <item>
      <title>2020-06-19</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/06/19/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/06/19/</guid>
      <description>2020 年 6 月 19 日（星期五） #  今日待办 #      编程 #  Go #  类型转化
num := dat[&amp;#34;num&amp;#34;].(float64) 类型推断
newA, ok := a.(string) func checkType(i interface{}) { // 这里是通过 i.(type) 来判断是什么类型  // 下面的 case 分支匹配到了，则执行相关的分支  switch v := i.(type) { case int: fmt.Printf(&amp;#34;%v is an int&amp;#34;, v) case string: fmt.Printf(&amp;#34;%v is string&amp;#34;, v) case bool: fmt.Printf(&amp;#34;%v is bool&amp;#34;, v) } }  产品文档 #  需求分析文档 #  前期分析阶段中，需求方主要是与产品经理进行沟通，产出文档有三种：</description>
    </item>
    
    <item>
      <title>2020-06-18</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/06/18/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/06/18/</guid>
      <description>2020 年 6 月 18 日（星期四） #  今日待办 #      编程 #  ZLMediaKit 开发 #  安装依赖库 #  MacOS cd ZLMediaKit mkdir build cd build # 查看 openssl 的路径 cmake .. -DOPENSSL_ROOT_DIR=/usr/local/Cellar/openssl@1.1/1.1.1g/ make -j4 Debian Debian 系 (包括 ubuntu）
# 除了openssl,其他其实都可以不安装 sudo apt-get install libssl-dev sudo apt-get install libsdl-dev sudo apt-get install libavcodec-dev sudo apt-get install libavutil-dev sudo apt-get install ffmpeg Windows  构建和编译 #  MacOS cd ZLMediaKit mkdir build cd build cmake .</description>
    </item>
    
    <item>
      <title>2020-04-17</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/04/17/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/04/17/</guid>
      <description>2020 年 4 月 17 日（星期五） #  今日待办 #      编程 #  TSF (Tencent Service Framework) #  腾讯微服务平台
TSF Serverless #  Serverless 微服务平台
TSF Mesh #  Mesh 微服务平台
 互联网巨头常用词汇 #  腾讯 #  精品、微创新、正能量、打法、发力、精细化、闭环、布局、商业模式、联动、泛娱乐、场景、痛点、减法、落地、聚焦、我们查下、跟进、不忘初心、方法论、迭代、快速响应、影响力、全栈、价值、细分、大数据、垂直领域、维度、颗粒、定性定量、聚焦、去中心化、关键路径、干货、接地气、梳理、输出、格局、生态、沉淀、结果导向、套路、用户体验、眼界、话术、体系、对齐、同步、认知、分享、面交、去中心化、勾兑、流程、感知度、赞、加速、用户画像、打磨、摸索、提炼、玩法、反哺、阈值。
阿里巴巴 #  价值观、颠覆、拥抱、改变、相信、基础设施、电子商务生态系统、企业社会责任、造福社会、理想主义、阿里云、技术、第五大经济体、促进进口、阿里人、野心、鲶鱼、DT 战略、全球化、营业额、改变世界、团队精神、知识产权、打假、情怀、挣一块钱、脱贫、平台公益、利益共同体、生态化发展、引爆消费力、农村经济、赋能、把控能力、专业化人才、战略踩空、无人区、练兵场、倒逼、互联网下半场。
百度 #  人工智能、无人驾驶、交互、刷脸、车、永久免费、更懂你、革新、迎接、技术创新、梦想、生态链、未来已来、智能营销、降维攻击、转变、可能性、搜索场景、AI 思维、洞察、开放能力、深度学习、人脸识别、万物互联、数字化、风口、精准识别、云端仿真、共享、感知、海量数据、赋能、开发者。
今日头条 #  独立发展、不上市、连接、用户体验、粉丝分发、跨越式机遇、新责任、未来、用户需求、概念推导、内容生态、国际化、体量、创作者、规模效应、平台属性、数字经济、估值、融资、智能社交、超级内容平台、颗粒度、价值创造、视频化、增长点、出海、流量红利、产品渗透率、拥抱 AI、模式重构、信息分发、人工智能实验室、算法、技术、数据挖掘、趋势、变革、内容创业、涨粉、赚钱、自媒体人、用户、创作者、构建、打击低俗信息、覆盖、粘性、精准、内容分发、产品体验、反馈、平台级公司、回馈、版权保护。
网易 #  猪厂、养猪、一日五餐、考拉上新货了、严选上新货了、代购、我们公司自己做的、我们公司自己养的、我们公司自己卖的、创新、品味、精品、工匠精神、匠心、新消费、泛中产、生活家、正品、世界级品质、用户体验、模式创新、中国智造、美好生活、丁磊同款、非典型、网易特色、走心、有毒营销、IP 营销、戏精、扎心、套路、竞争壁垒、差异化、价值、公益、企业家精神、有态度、各有态度、好的老板、广告公司、段子手、又双叒震荡了、工资回收计划、丁爸爸喊你 XXX。
京东 #  电商、亏损、商品流通、综合零售、物流网、供应链、智能商业体、技术转型、短链、成本管控、正道成功、世界 500 强、B2C、智慧化、重构、产业链、共生、品牌附加值、白条、无人仓、无界零售、一体化、倒三角战略、一体化、整合、流量端、竞争求异、盟国思维、赋能、O2O、云端服务、一锤子买卖、终端、库房、产业价值、最后一公里。</description>
    </item>
    
    <item>
      <title>2020-06-17</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/06/17/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/06/17/</guid>
      <description>2020 年 6 月 17 日（星期三） #  今日待办 #      编程 #  最大传输单元 #  Maximum Transmission Unit，MTU
用来通知对方所能接受数据服务单元的最大尺寸，说明发送方能够接受的有效载荷大小。
是包或帧的最大长度，一般以字节记。如果 MTU 过大，在碰到路由器时会被拒绝转发，因为它不能处理过大的包。如果太小，因为协议一定要在包 (或帧) 上加上包头，那实际传送的数据量就会过小，这样也划不来。大部分操作系统会提供给用户一个默认值，该值一般对用户是比较合适的。
  以太网 MTU 是 1500 字节
  802.3 MTU 是 1492 字节。
  UDP MTU 是 1400
  最大分节大小 #  maximum segment size，MSS
为 TCP 数据包每次传输的最大数据分段大小，一般由发送端向对端 TCP 通知对端在每个分节中能发送的最大 TCP 数据。
MSS 值为 MTU 值减去 IPv4 Header（20 Byte）和 TCP header（20 Byte）。</description>
    </item>
    
    <item>
      <title>2020-07-17</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/07/17/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/07/17/</guid>
      <description>2020 年 7 月 17 日（星期五） #  今日待办 #      编程 #  Istio #  ingressGateway 代理 #  server { listen 8500; location / { proxy_pass http://localhost:31443; # nginx 反向代理默认走的 http 1.0 版本 # 但是 被反向代理的服务器是 1.1 版本的！ proxy_http_version 1.1; } error_log /var/log/nginx/istio-ingressgateway_error.log; access_log /var/log/nginx/istio-ingressgateway_access.log; } rate limit #  安装
# Policy enforcement must be enabled istioctl install --set profile=demo --set meshConfig.disablePolicyChecks=false --set values.</description>
    </item>
    
    <item>
      <title>2020-06-16</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/06/16/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/06/16/</guid>
      <description>2020 年 6 月 16 日（星期二） #  今日待办 #      编程 #  IOT #  物管理 #  物影子 #  物影子反映物理世界中的一个物（设备），是物在云端的映射。 运行时，物将监控值上报给物影子，物影子会用一个 json 文档存储设备的最后一次上报的状态，可以直接通过 MQTT 或 HTTP 访问。 同时，物影子也提供反控功能。
物模型 #  物模型由一个或多个属性构成，可以用他来表示一类（或同一型号的一批）设备。 基于物模型可以创建物影子。
物模型可以选择开启 ota 服务，这样使用这个物模型创建的物影子就可以使用 ota 服务，并通过这个物模型做统一的管理。
 常见直播协议 #   RTMP: 底层基于 TCP，在浏览器端依赖 Flash。 HTTP-FLV: 基于 HTTP 流式 IO 传输 FLV，依赖浏览器支持播放 FLV。 WebSocket-FLV: 基于 WebSocket 传输 FLV，依赖浏览器支持播放 FLV。 WebSocket 建立在 HTTP 之上，建立 WebSocket 连接前还要先建立 HTTP 连接。 HLS: Http Live Streaming，苹果提出基于 HTTP 的流媒体传输协议。HTML5 可以直接打开播放。 RTP: 基于 UDP，延迟 1 秒，浏览器不支持。  HTML5 FLV Player</description>
    </item>
    
    <item>
      <title>2020-07-16</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/07/16/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/07/16/</guid>
      <description>2020 年 7 月 16 日（星期四） #  今日待办 #      编程 #  Kubernetes #  安装 #  # 添加源 cat &amp;lt;&amp;lt;EOF &amp;gt; /etc/yum.repos.d/kubernetes.repo [kubernetes] name=Kubernetes baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/ enabled=1 gpgcheck=1 repo_gpgcheck=1 gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg EOF yum -y makecache # 查看版本 # yum list kubelet --showduplicates | sort -r # 安装 kubelet, kubeadm, kubectl yum install -y kubelet-1.18.3 kubeadm-1.18.3 kubectl-1.18.3 # 启动 kubelet 并设置开机启动 systemctl enable kubelet &amp;amp;&amp;amp; systemctl start kubelet # kubelet 命令补全 echo &amp;#34;source &amp;lt;(kubectl completion bash)&amp;#34; &amp;gt;&amp;gt; ~/.</description>
    </item>
    
    <item>
      <title>2020-04-15</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/04/15/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/04/15/</guid>
      <description>2020 年 4 月 15 日（星期三） #  今日待办 #      编程 #  Service Mesh #  南北流量 vs 东西流量 #  南北流量（NORTH-SOUTH traffic）
东西流量（EAST-WEST traffic）
在云计算和 SDN 下，我们经常听到流量的东西南北向概念，简单来说从外部 Internet 等到数据中心内部的流量走向被称为南北流量，数据中心内部的 VM 之间的流量被称为东西流量。
南北流量：client - server
东西流量：server 之间
智慧城市 #   平安城市是一个综合性的安防系统，包含子系统较多； 天网工程和雪亮工程偏向于视频监控系统。  三者都是分级建设，平安城市和天网工程主要利用政府资源，而雪亮工程鼓励警民结合、资源互补。
按工程的建设规模排序，平安城市 ＞ 天网工程 ＞ 雪亮工程。
平安城市 #  平安城市就是通过三防系统（技防系统、物防系统、人防系统）建设城市的平安和谐。它是一个特大型、综合性非常强的管理系统，不仅需要满足治安管理、城市管理、交通管理、应急指挥等需求，而且还要兼顾灾难事故预警、安全生产监控等方面对图像监控的需求，同时还要考虑各系统之间的联动。
天网工程 #  天网工程是指为满足城市治安防控和城市管理需要，利用图像采集、传输、控制、显示等设备和控制软件组成，对固定区域进行实时监控和信息记录的视频监控系统。天网工程整体按照部级 - 省厅级 - 市县级平台架构部署实施，具有良好的拓展性与融合性。
雪亮工程 #  雪亮工程是以县、乡、村三级综治中心为指挥平台、以综治信息化为支撑、以网格化管理为基础、以公共安全视频监控联网应用为重点的 “群众性治安防控工程”。它通过三级综治中心建设把治安防范措施延伸到群众身边，发动社会力量和广大群众共同监看视频监控，共同参与治安防范，从而真正实现治安防控 “全覆盖、无死角”。</description>
    </item>
    
    <item>
      <title>2020-06-15</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/06/15/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/06/15/</guid>
      <description>2020 年 6 月 15 日（星期一） #  今日待办 #      编程 #  URL vs URI vs URN #   URI 在于 I (Identifier) 是统一资源标示符，可以唯一标识一个资源 URL 在于 Locater，一般来说（URL）统一资源定位符，可以提供找到该资源的路径 URL 是 URI 的特例  apache/zookeeper #  Mirror of Apache Hadoop ZooKeeper
samuel/go-zookeeper #  </description>
    </item>
    
    <item>
      <title>2020-07-15</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/07/15/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/07/15/</guid>
      <description>2020 年 7 月 15 日（星期三） #  今日待办 #      编程 #  HTTP #  Content-Type #  用于定义用户的浏览器或相关设备如何显示将要加载的数据，或者如何处理将要加载的数据
 multipart/form-data  常见的 POST 数据提交的方式 我们使用表单上传文件时，必须把 form 标签的 enctype 设置为 multipart/form-data   application/x-www-form-urlencoded  浏览器的原生 form 表单 提交的数据按照 key1=val1&amp;amp;key2=val2 的方式进行编码，key 和 val 都进行了 URL 转码   application/json  消息主体是序列化后的 JSON 字符串   application/javascript application/xml  xml 格式数据   application/form-data  主要是用来上传文件   text/plain  将文件设置为纯文本的形式，浏览器在获取到这种文件时并不会对其进行处理   text/html  意思是将文件的 content-type 设置为 text/html 的形式 浏览器在获取到这种文件时会自动调用 html 的解析器对文件进行相应的处理   text/xml  使用 HTTP 作为传输协议，XML 作为编码方式的远程调用规范    无 #  POST /api/v1/account/ HTTP/1.</description>
    </item>
    
    <item>
      <title>2020-04-14</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/04/14/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/04/14/</guid>
      <description>2020 年 4 月 14 日（星期二） #  今日待办 #      编程 #  豆瓣 API 文档 #  zce/douban-api-docs  英文 #  basic vs basis #  basic: 以什么为基础，进行再加工创造
basic: 基础内容
Basis = foundation of something. The basis of multiplication is serial addition, for example.
Basics = the core concepts. Multiplication tables are part of the basics because understanding them allows students to do higher order arithmetic much more efficiently.</description>
    </item>
    
    <item>
      <title>2020-05-14</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/05/14/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/05/14/</guid>
      <description>2020 年 5 月 14 日（星期四） #  今日待办 #      编程 #  Go #  Go Module #  goproxy #  阿里云 Go Module 代理仓库服务
  使用 go1.11 以上版本并开启 go module 机制
  导出 GOPROXY 环境变量
  export GOPROXY=https://mirrors.aliyun.com/goproxy/ go-yaml/yaml #  YAML support for the Go language.
package main import ( &amp;#34;io/ioutil&amp;#34; &amp;#34;gopkg.in/yaml.v2&amp;#34; &amp;#34;fmt&amp;#34; ) func main() { var c conf conf:=c.</description>
    </item>
    
    <item>
      <title>2020-06-14</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/06/14/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/06/14/</guid>
      <description>2020 年 6 月 14 日（星期日） #  今日待办 #      编程 #  Istio #  向 pod 中注入 Istio sidecar #  istioctl 手动注入 #  使用 istioctl 手动注入
Istio sidecar 注入器自动注入 #  启用 pod 所属命名空间的 Istio sidecar 注入器自动注入
区别于手动注入，自动注入发生在 pod 层面。 你将看不到 deployment 本身有任何更改。 取而代之，需要检查单独的 pod（使用 kubectl describe）来查询被注入的代理。
 Kubernetes #  kubectl get 结果排序 #  --sort-by= ##### pod # name kubectl --sort-by=.</description>
    </item>
    
    <item>
      <title>2020-07-14</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/07/14/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/07/14/</guid>
      <description>2020 年 7 月 14 日（星期二） #  今日待办 #      编程 #  k3s #  $ k version Client Version: version.Info{Major:&amp;#34;1&amp;#34;, Minor:&amp;#34;18&amp;#34;, GitVersion:&amp;#34;v1.18.2&amp;#34;, GitCommit:&amp;#34;52c56ce7a8272c798dbc29846288d7cd9fbae032&amp;#34;, GitTreeState:&amp;#34;clean&amp;#34;, BuildDate:&amp;#34;2020-04-16T23:34:25Z&amp;#34;, GoVersion:&amp;#34;go1.14.2&amp;#34;, Compiler:&amp;#34;gc&amp;#34;, Platform:&amp;#34;darwin/amd64&amp;#34;} Server Version: version.Info{Major:&amp;#34;1&amp;#34;, Minor:&amp;#34;18&amp;#34;, GitVersion:&amp;#34;v1.18.4+k3s1&amp;#34;, GitCommit:&amp;#34;97b7a0e9df2883f08028fb7171c1e62fc1899a0c&amp;#34;, GitTreeState:&amp;#34;clean&amp;#34;, BuildDate:&amp;#34;2020-06-18T01:30:45Z&amp;#34;, GoVersion:&amp;#34;go1.13.11&amp;#34;, Compiler:&amp;#34;gc&amp;#34;, Platform:&amp;#34;linux/amd64&amp;#34;} $ k get all -A NAMESPACE NAME READY STATUS RESTARTS AGE kube-system pod/metrics-server-7566d596c8-xg6ht 1/1 Running 0 4m43s kube-system pod/local-path-provisioner-6d59f47c7-cr5pg 1/1 Running 0 4m43s kube-system pod/coredns-8655855d6-t86q8 1/1 Running 0 4m43s NAMESPACE NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE default service/kubernetes ClusterIP 10.</description>
    </item>
    
    <item>
      <title>2020-04-13</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/04/13/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/04/13/</guid>
      <description>2020 年 4 月 13 日（星期一） #  今日待办 #      编程 #  Git #  merge vs squash vs rebase #  merge 不能保持 master 分支干净，但是保持了所有的 commit history，大多数情况下都是不好的，个别情况挺好 squash 也可以保持 master 分支干净，但是 master 中 author 都是 maintainer，而不是原 owner rebase 可以尽可能保持 master 分支干净整洁，并且易于识别 author
squash merge #  # 切换到目标分支 $ git checkout master # 以 squash 的形式 merge $ git merge --squash devel # it does not produce a commit right away: you need an additional commit $ git commit -m &amp;#34;squash branch&amp;#34;  你会发现，在 master 分支上居然有未提交的修改，然后你就需要在 master 上主动提交了修改， 注意，这里是你 commit 的，也就是改变了 commit 的 author。 git merge has a &amp;ndash;commit option, but it cannot be used with &amp;ndash;squash.</description>
    </item>
    
    <item>
      <title>2020-06-13</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/06/13/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/06/13/</guid>
      <description>2020 年 6 月 13 日（星期六） #  今日待办 #      编程 #  求最大公约数 #   暴力枚举法：时间复杂度是 O (min (a, b))) 辗转相除法：时间复杂度不太好计算，可以近似为 O (log (max (a, b)))，但是取模运算性能较差。 更相减损术：避免了取模运算，但是算法性能不稳定，最坏时间复杂度为 O (max (a, b))) 更相减损术与移位结合：不但避免了取模运算，而且算法性能稳定，时间复杂度为 O (log (max (a, b)))  辗转相除法 #  辗转相除法， 又名欧几里得算法（Euclidean algorithm）， 目的是求出两个正整数的最大公约数。 它是已知最古老的算法， 其可追溯至公元前 300 年前。
这条算法基于一个定理： 两个正整数 a 和 b（a&amp;gt;b），它们的最大公约数等于 a 除以 b 的余数 c 和 b 之间的最大公约数。
比如 10 和 25，25 除以 10 商 2 余 5, 那么 10 和 25 的最大公约数，等同于 10 和 5 的最大公约数。</description>
    </item>
    
    <item>
      <title>2020-07-13</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/07/13/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/07/13/</guid>
      <description>2020 年 7 月 13 日（星期一） #  今日待办 #      编程 #  Vert.x #  Eclipse Vert.x is a tool-kit for building reactive applications on the JVM.
Vert.x 项目起始于 2011 年，最开始的名字叫做 node.x，是一个仿照 Node.js 以 Java 开发的，基于 EventLoop 的异步非阻塞编程框架。虽然从时间上来说也算有一定年头了，但是一直没有大火，从 3.x 开始才稍微流行了一点。
Vert.x 的底层 IO 基于 Netty4 实现，核心模块 Vertx Core，支持非阻塞 文件 IO，TCP，UDP，DNS，HTTP，HTTPS，HTTP2 (包括 h2 和 h2c)。比较基础的模块 Vert.x-Web ，提供了包括 URL 路由，模板引擎在内的开发 web server 所需的 API，Vert.x Web Client，提供一个非阻塞 Http Client 实现。</description>
    </item>
    
    <item>
      <title>2020-04-12</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/04/12/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/04/12/</guid>
      <description>2020 年 4 月 12 日（星期日） #  今日待办 #   Istio Handbook 周报  周一发布到钉钉群     编程 #  GitHub 周报 #  probot/weekly-digest #  配置
# Configuration for weekly-digest - https://github.com/apps/weekly-digest publishDay: sun canPublishIssues: true canPublishPullRequests: true canPublishContributors: true canPublishStargazers: true canPublishCommits: true </description>
    </item>
    
    <item>
      <title>2020-05-12</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/05/12/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/05/12/</guid>
      <description>2020 年 5 月 12 日（星期二） #  今日待办 #      编程 #  Redis #  redis-cli -h host -p port -a password 设置密码 #  打开文件 /etc/redis.conf， 找到其中的 # requirepass foobared，去掉前面的 #， 并把 foobared 改成你的密码。
ps: 如果 redis 没有启用密码，我使用 redis-cli -a xxx 可以访问吗？ 答案是：可以
为什么 Redis 默认端口是 6379 #  6379 在是手机按键上 MERZ 对应的号码，而 MERZ 取自意大利歌女 Alessia Merz 的名字。 MERZ 长期以来被 antirez 及其朋友当作愚蠢的代名词。
参考：http://oldblog.antirez.com/post/redis-as-LRU-cache.html</description>
    </item>
    
    <item>
      <title>2020-06-12</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/06/12/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/06/12/</guid>
      <description>2020 年 6 月 12 日（星期五） #  今日待办 #      编程 #  Go #  tab vs 空格 #   Indentation
We use tabs for indentation and gofmt emits them by default. Use spaces only if you must.
 参考：
 Effective Go   Kubernetes #  查一段时间的日志 #  --since-time 查一段时间的日志
k logs pedestrian-count-wrapper-5b7cb44c79-k4z6n --since-time=2020-06-12T14:00:00+08:00 &amp;gt; pedestrian-count.log 查看多个 pod 日志 #  传统来说，Kubernetes 环境下的日志都是靠 FluentD + ElasticSearch + Kibana 的组合实现的， 这一组合的功能和强大，所以成为一个事实标准来使用， 但是在一些比较简陋的测试集群中，或者不具备浏览器条件的自动化 / 控制台环境下， 归并多个 Pod 的日志进行集中的查看和处理还是很有用的。</description>
    </item>
    
    <item>
      <title>产品</title>
      <link>https://ikingye.github.io/note/docs/social/economic/insurance/product/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/social/economic/insurance/product/</guid>
      <description>产品 #  产品推荐 #  重疾险 #   我的选择 #     保险类型 优先级 保险产品 费用 所属公司 备注     社保 ★★★★★ - - - 五险一金   重疾险 ★★★★       百万医疗险 ★★★★       一年期意外险 ★★★★       定期寿险 ★★★★       车险 ★★★★       家财险 ★★★★                 参考 #   全面测评 135 款重疾险，选出九月的性价比之王 全面测评 65 款少儿重疾险，选出九月的性价比之王 全面测评 113 款百万医疗险，选出九月的性价比之王  </description>
    </item>
    
    <item>
      <title>教程</title>
      <link>https://ikingye.github.io/note/docs/humanities/language/english/tutorial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/humanities/language/english/tutorial/</guid>
      <description>英语教程 #  听写 #  CoachShane - 每日英语听写 Daily English Dictation 1-400 #   表达 #  CoachShane - Daily Easy English Expression 1-899 #  </description>
    </item>
    
    <item>
      <title>谥号</title>
      <link>https://ikingye.github.io/note/docs/social/history/posthumous-name/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/social/history/posthumous-name/</guid>
      <description>谥号 #  </description>
    </item>
    
    <item>
      <title>2020-04-11</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/04/11/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/04/11/</guid>
      <description>2020 年 4 月 11 日（星期六） #  今日待办 #   Istio Handbook 周报  周一发布到钉钉群     编程 #  架构设计 #  HA 高可用 #  High Availability
LB 负载均衡 #  Load Balance
产品设计 #  POC 概念验证 #  Proof Of Concept
MVP 最小化可行产品 #  Minimum Viable Product
需求管理 #  KANO 模型 #  价值 vs 复杂度矩阵 #  分布式一致性 #  Paxos #  Raft #  https://raft.</description>
    </item>
    
    <item>
      <title>2020-05-11</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/05/11/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/05/11/</guid>
      <description>2020 年 5 月 11 日（星期一） #  今日待办 #      编程 #  Linux #  curl / wget #  wget -c http://xxxx curl -Lo filename http://xxxx # Write output to a file named as the remote file curl -LO http://xxxx Docker #  # stop all containers sudo docker stop $(sudo docker ps -aq) # rm all containers sudo docker rm $(sudo docker ps -aq) docker system prune #  This docker system prune clean the following stuff:</description>
    </item>
    
    <item>
      <title>2020-06-11</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/06/11/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/06/11/</guid>
      <description>2020 年 6 月 11 日（星期四） #  今日待办 #      编程 #  VLC #  VLC media player (previously the VideoLAN Client and commonly known as simply VLC)
LAN: Local Area Network
 library vs package #  常见的 C/C# 等语言中的 library，一般指的就是：
 静态的库文件：xxx.a 动态的库文件：xxx.dll  Python #   module 就是 Python 文件 package 是一堆（相关的）module 组合而成的  Haskell #  A module is a set of functions, types, classes, &amp;hellip; put together in a common namespace.</description>
    </item>
    
    <item>
      <title>2020-07-11</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/07/11/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/07/11/</guid>
      <description>2020 年 7 月 11 日（星期六） #  今日待办 #      编程 #  网站统计 #  Google Analytics #  Google Tag Manager #  参考：
 What is the difference between google tag manager and google analytics?  </description>
    </item>
    
    <item>
      <title>2020-04-10</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/04/10/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/04/10/</guid>
      <description>2020 年 4 月 10 日（星期五） #  今日待办 #   Istio Handbook 编委会双周会 21:00-22:00   编程 #  mosquitto (mqtt) #  mosquitto_pub #  mosquitto_pub [-d] [-h hostname] [-i client_id] [-I client id prefix] [-p port number] [-q message QoS] [--quiet] [-r] { -f file | -l | -m message | -n | -s} [-u username [-P password] ] [ --will-topic topic [--will-payload payload] [--will-qos qos] [--will-retain] ] -t message-topic mosquitto_pub -t &amp;lsquo;application/1/device/ffffff100000d143/rx&amp;rsquo; -m &amp;lsquo;{&amp;ldquo;applicationID&amp;rdquo;:&amp;ldquo;1&amp;rdquo;,&amp;ldquo;applicationName&amp;rdquo;:&amp;ldquo;0000000000000001&amp;rdquo;,&amp;ldquo;deviceName&amp;rdquo;:&amp;ldquo;d143-K5-out&amp;rdquo;,&amp;ldquo;devEUI&amp;rdquo;:&amp;ldquo;ffffff100000d143&amp;rdquo;,&amp;ldquo;txInfo&amp;rdquo;:{&amp;ldquo;frequency&amp;rdquo;:481700000,&amp;ldquo;dr&amp;rdquo;:2},&amp;ldquo;adr&amp;rdquo;:false,&amp;ldquo;fCnt&amp;rdquo;:68570,&amp;ldquo;fPort&amp;rdquo;:44,&amp;ldquo;data&amp;rdquo;:&amp;ldquo;BQEA&amp;rdquo;}&amp;rsquo;</description>
    </item>
    
    <item>
      <title>2020-06-10</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/06/10/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/06/10/</guid>
      <description>2020 年 6 月 10 日（星期三） #  今日待办 #      编程 #  尾递归 #  Consider a simple function that adds the first N natural numbers. (e.g. sum(5) = 1 + 2 + 3 + 4 + 5 = 15).
// 普通递归 function recsum(x) { if (x === 1) { return x; } else { return x + recsum(x - 1); } } // 尾递归 function tailrecsum(x, running_total = 0) { if (x === 0) { return running_total; } else { return tailrecsum(x - 1, running_total + x); } } 怎么写尾递归 #  形式上只要最后一个 return 语句是单纯函数就可以。</description>
    </item>
    
    <item>
      <title>2020-07-10</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/07/10/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/07/10/</guid>
      <description>2020 年 7 月 10 日（星期五） #  今日待办 #      编程 #  RTSP #  RTSP over UDP #  优点
 实时流延迟较小  缺点
 UDP 协议上的 RTSP/RTP 需要打开许多 UDP 端口（每一路流媒体都需要 2 个 UDP 端口，一个用于接收数据，一个用于接收控制信息）； 当因特网上的路由器没有打开这些端口的时候，上述第一点将会存在问题； 中间网络路由器很容易就过滤或者忽略掉 UDP 数据包； UDP 是不可靠传输协议，媒体包在因特网上传输时会面临着丢包。  RTSP over TCP #  优点
 RTSP/RTP 的控制命令和数据都通过一个端口，即 RTSP 的端口（默认为 554），进行交互。 TCP 包更容易穿透中间网络路由器。  缺点
 由于二元交织，会使得 RTP 包封包和解包的过程变得更加复杂。 TCP 是可靠的传输协议，但正是因为如此，会导致在实时流媒体中的延时。  ffplay #  指定使用 TCP 播放</description>
    </item>
    
    <item>
      <title>2020-04-09</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/04/09/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/04/09/</guid>
      <description>2020 年 4 月 9 日（星期四） #  今日待办 #   编程  熟悉基本算法  排序算法（时间 / 空间复杂度） 大数据查找 / 排序   CORS     编程 #  基本算法 #  排序算法 #   插入排序类  直接插入排序 希尔排序 二分法插入排序   选择排序类  直接选择排序 堆排序   交换排序类  冒泡排序 快速排序   归并排序 基数排序  时间 / 空间复杂度 #  排序大的分类可分为内排序和外排序，不需要访问外存就能进行排序的叫做内排序。
   排序方法 时间复杂度（平均） 时间复杂度（最坏) 时间复杂度（最好) 空间复杂度 稳定性 复杂性     希尔排序 O(nlog2n) O(n2) O(n) O(1) 不稳定 较复杂   堆排序 O(nlog2n) O(nlog2n) O(nlog2n) O(1) 不稳定 较复杂   快速排序 O(nlog2n) O(n2) O(nlog2n) O(nlog2n) 不稳定 较复杂   归并排序 O(nlog2n) O(nlog2n) O(nlog2n) O(n) 稳定 较复杂   直接插入排序 O(n2) O(n2) O(n) O(1) 稳定 简单   直接选择排序 O(n2) O(n2) O(n2) O(1) 不稳定 简单   冒泡排序 O(n2) O(n2) O(n) O(1) 稳定 简单   基数排序 O(d(n+r)) O(d(n+r)) O(d(n+r)) O(n+r) 稳定 较复杂    稳定排序与不稳定排序 #  稳定排序：假设在待排序的文件中，存在两个或两个以上的记录具有相同的关键字，在用某种排序法排序后，若这些相同关键字的元素的相对次序仍然不变，则这种排序方法是稳定的。</description>
    </item>
    
    <item>
      <title>2020-05-09</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/05/09/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/05/09/</guid>
      <description>2020 年 5 月 9 日（星期六） #  备注： 法定加班（五一调休）
今日待办 #      编程 #  中文排版 #  sparanoid/chinese-copywriting-guidelines #  Chinese copywriting guidelines for better written communication／中文文案排版指北
mzlogin/chinese-copywriting-guidelines #  Chinese Copywriting Guidelines：中文文案排版指北（简体中文版）
https://mazhuang.org/wiki/chinese-copywriting-guidelines/
参考：
 中英文混排时中文与英文之间是否要有空格？ 写给大家看的中文排版指南   Docker #  Dockerfile #  目标:
 更快的构建速度 更小的 Docker 镜像大小 更少的 Docker 镜像层 充分利用镜像缓存 增加 Dockerfile 可读性 让 Docker 容器使用起来更简单  做法：</description>
    </item>
    
    <item>
      <title>2020-06-09</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/06/09/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/06/09/</guid>
      <description>2020 年 6 月 9 日（星期二） #  今日待办 #      编程 #  export PATH 使用 ~ 不生效 #  # 不生效 # export PATH=&amp;#34;$PATH:~/code/study/cc/istio/istio-1.6.1/bin&amp;#34; # 必须使用完整路径 export PATH=&amp;#34;$PATH:/Users/yewang/code/study/cc/istio/istio-1.6.1/bin&amp;#34;  IoT #  LPWA #  Low-Power Wide-Area, 低功耗广域技术，使用较低功耗实现远距离的无线信号传输。 相较于熟悉的低功耗蓝牙（BLE）、Zigbee 和 Wifi 等技术，LPWA 的传输距离更远，一般在公里级， 其链接预算（link budget）可达 160dBm，而 BLE 和 Zigbee 等一般在 100dBm 以下。
和传统的蜂窝网络技术（2G、3G）相比，LPWA 的功耗更低，电池供电的设备使用寿命可达数年。
基于这两个显著特点，LPWA 可以真正使能物物互联，助力和引领物联网（IoT）革命。
LoRa、SigFox、NB-IOT 这些都属于 LPWA
参考：
 什么是 LPWA？  LPWAN #  LPWAN – Low power wide area network，低功耗广域网络，即使用 LPWA 技术搭建的无线连接网络。</description>
    </item>
    
    <item>
      <title>2020-07-09</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/07/09/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/07/09/</guid>
      <description>2020 年 7 月 9 日（星期四） #  今日待办 #      编程 #  socketio/socket.io #  Realtime application framework (Node.JS server)
 知乎批量取消关注 #  取消关注问题 #  点击关注的问题列表 https://www.zhihu.com/question/following
// https://www.zhihu.com/question/following function unfollow_question_all() { var remaining = $(&amp;#34;.zg-unfollow&amp;#34;).length if (remaining &amp;gt; 0) { $(&amp;#34;.zg-unfollow&amp;#34;).first().trigger(&amp;#34;click&amp;#34;) setTimeout(unfollow_question_all, 1000) window.scrollTo(0, document.body.scrollHeight) } } unfollow_question_all() 取消关注用户 #  点击关注的用户列表，点击到最后一页 https://www.zhihu.com/people/your-name/following?page=last
// 保存 $，否则下一轮提示 $ is not defined var j = $ function unfollow_people(follower_less_than) { j(&amp;#34;#Profile-following &amp;gt; :nth-child(2)&amp;#34;).</description>
    </item>
    
    <item>
      <title>2020-03-08</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/03/08/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/03/08/</guid>
      <description>2020 年 3 月 8 日（星期日） #  今日待办 #   陪闵子玩 Istio 1.5 发布了，学习一个   编程 #  算法教程 #  今天看到一个算法教程还不错，推荐一下，labuladong 的算法小抄。
 Istio 1.5 #  Istio 1.5 于 2020-03-05 发布了。
引入 Istiod #  将控制平面整合为一个新的二进制文件 Istiod，简化了安装、运行和升级。所有 API 和运行时特性均与以前的组件一致。
参考：官网 1.5 change note
可扩展性的新模型 #  Istio 一直是最可扩展的服务网格，其 Mixer 插件允许自定义策略和遥测支持，而 Envoy 扩展则允许数据平面自定义。Istio 1.5 带来了了一个新模型，该模型使用 WebAssembly（Wasm）将 Istio 的可扩展性模型与 Envoy 的统一。Wasm 使开发人员能够安全地在 Envoy 代理中分发和执行代码，以便与遥测系统和策略系统集成，并控制路由，甚至转换消息正文。它将更加灵活和高效，从而无需单独运行 Mixer 组件（这也简化了部署）。
更容易使用 #  现在，使用 istioctl 的 Istio 命令行安装已进入 beta 阶段。istioctl 也有十几项改进，包括分析新项目、更好的验证规则，以及更好的与 CI 系统集成的能力等。它已经成为了解 Istio 的系统运行状态并确保配置更改安全的必要工具。</description>
    </item>
    
    <item>
      <title>2020-04-08</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/04/08/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/04/08/</guid>
      <description>2020 年 4 月 8 日（星期三） #  今日待办 #      编程 #  依赖注入 #  可以通过多种方式为实例提供必要的依赖关系：
 构造函数注入 属性注入 方法注入  构造函数注入 #  构造函数注入是许多依赖注入框架的首选方法，常受依赖注入框架的青睐。
它清楚地告诉我们创建特定组件所需的所有依赖关系，并且这些依赖不是可选的，这些依赖关系在整个组件中应该都是必需的。
public class DataProcessor { private final DbManager manager; private final Calculator calculator; public DataProcessor(DbManager manager, Calculator calculator) { this.manager = manager; this.calculator = calculator; } // ... }  优点：  不变性：依赖关系始终如初。   缺点  必须在初始化时提供所有依赖项。  有时，我们无法自己初始化一个组件，或者在某个时刻我们无法提供组件的所有依赖关系。或者我们需要使用另外一个构造函数。一旦设置了依赖项，我们就无法再改变它们了。      属性注入 #  属性注入更适合可选参数，例如监听或委托。又或是我们无法在初始化时提供依赖关系。</description>
    </item>
    
    <item>
      <title>2020-05-08</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/05/08/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/05/08/</guid>
      <description>2020 年 5 月 8 日（星期五） #  今日待办 #   servicemesher/istio-handbook 发周报   编程 #  Kubernetes #  node #   Name Labels Taints Conditions  MemoryPressure DiskPressure PIDPressure Ready    Name: njjs-sys-jomo14d34c80103718120200110164857.njjs.baidu.com Roles: &amp;lt;none&amp;gt; Labels: aiedge-web=1 beta.kubernetes.io/arch=amd64 beta.kubernetes.io/os=linux gpuenable=1 kubernetes.io/hostname=njjs-sys-jomo14d34c80103718120200110164857.njjs.baidu.com Annotations: node.alpha.kubernetes.io/ttl: 0 volumes.kubernetes.io/controller-managed-attach-detach: true CreationTimestamp: Wed, 04 Mar 2020 14:44:57 +0800 Taints: &amp;lt;none&amp;gt; Unschedulable: false Conditions: Type Status LastHeartbeatTime LastTransitionTime Reason Message ---- ------ ----------------- ------------------ ------ ------- MemoryPressure False Fri, 08 May 2020 20:32:14 +0800 Tue, 14 Apr 2020 19:18:50 +0800 KubeletHasSufficientMemory kubelet has sufficient memory available DiskPressure False Fri, 08 May 2020 20:32:14 +0800 Tue, 14 Apr 2020 19:18:50 +0800 KubeletHasNoDiskPressure kubelet has no disk pressure PIDPressure False Fri, 08 May 2020 20:32:14 +0800 Tue, 14 Apr 2020 19:18:50 +0800 KubeletHasSufficientPID kubelet has sufficient PID available Ready True Fri, 08 May 2020 20:32:14 +0800 Wed, 29 Apr 2020 15:34:10 +0800 KubeletReady kubelet is posting ready status Addresses: InternalIP: 10.</description>
    </item>
    
    <item>
      <title>2020-06-08</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/06/08/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/06/08/</guid>
      <description>2020 年 6 月 8 日（星期一） #  今日待办 #      编程 #  git #  git clone --depth 1 #  什么时候用？
git clone --depth 1 之后，想拉取所有
git pull --unshallow 参考：
 Pull updates with git after cloned with &amp;ndash;depth 1   CPU #  amd64 #  386 #  arm64 #  arm_v7 #  arm_v6 #  arm_v5 #  mips64le #  mips64 #  mipsle #  mips #   操作系统内核 #  linux #  freebsd #  darwin #  windows #  ios #  android #  npc_sdk #  npc_syno #   linux #  top #  排序</description>
    </item>
    
    <item>
      <title>2020-07-08</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/07/08/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/07/08/</guid>
      <description>2020 年 7 月 8 日（星期三） #  今日待办 #      编程 #  HPKP 协议 #  HTTP Public Key Pinning
HTTP 公钥固定
是 HTTPS 网站防止攻击者利用 数字证书认证机构（CA）错误签发的证书进行中间人攻击的一种安全机制，用于预防 CA 遭受入侵或其他会造成 CA 签发未授权证书的情况。采用公钥固定时，网站会提供已授权公钥的哈希列表，指示客户端在后续通讯中只接受列表上的公钥。
 OICT #  OT + IT + ICT + IoT + OTT
ICT #  信息通信技术 (Information and Communication Technology，简称 ICT)， 是 IT 和 CT 两个领域越来越紧密结合的产物。
 Podman #  基于 CRI 等标准（Docker 新架构也符合 CRI 标准）的新一代容器工具 Podman、Skopero 和 Buiddah 套件</description>
    </item>
    
    <item>
      <title>2020-04-07</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/04/07/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/04/07/</guid>
      <description>2020 年 4 月 7 日（星期二） #  今日待办 #   201 PoSD 翻译  修改负责的 5 个 Principles 并提交到 icode 前 20 个 Principles 合并到 word，并提交给出版社进行初审     编程 #  编程哲学 #  中文房间 #  中文房间（英语：Chinese room），是由约翰・希尔勒提出的一个思想实验，借以反驳强人工智能的观点。根据强人工智能的观点，只要计算机拥有了适当的程序，理论上就可以说计算机拥有它的认知状态并且可以像人一样地进行理解活动。
该实验出自约翰・罗杰斯・希尔勒的论文《心灵、大脑和程序》（ Minds, Brains, and Programs）中，发表于 1980 年的《 行为与脑科学（英语：Behavioral and Brain Sciences）》。
中文房间思想实验是什么？它是否成功地否决了图灵测试的有效性？
中文房间是否可以否定人类会思考？
因果论与自由意志 #  k8s #  rancher/fleet #  Rancher 开源 Fleet：业界首个海量 K8S 集群管理项目</description>
    </item>
    
    <item>
      <title>2020-05-07</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/05/07/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/05/07/</guid>
      <description>2020 年 5 月 7 日（星期四） #  今日待办 #      编程 #  brookhong/Surfingkeys #  Surfingkeys 和现有的一些插件一样，让你尽可能的通过键盘来使用 Chrome/Firefox 浏览器，比如跳转网页，上下左右滚屏。但不只是给 vim 用户使用，Surfingkeys 的基本特性是让你自己写一段 Javascript 脚本，然后通过 mapkey 映射到某些按键。之后当你按了那几个键以后，对应的 Javascript 脚本就会被执行。
快捷键 #   ?: 显示帮助   t: 搜索收藏夹和访问历史  参考：
 Surfingkeys &amp;ndash; 用 javascript 和键盘扩展你的 chrome  SaltStack #  Saltstack 是基于 python 开发的一套 C/S 自动化运维工具。
漏洞风险 #  参考：
 SaltStack 远程命令执行漏洞风险通告（CVE-2020-11651/CVE-2020-11652）   公司 #  今日头条 #   EE 效率工程部：做飞书，包括存储/文档 Data 广告数据部：包括数据分析，AI-Lab，广告系统，接入分发，内容平台 IES 抖音多媒体部：抖音引擎，服务端中台，faceu 产品研发部：小说，小游戏，今日头条主端 app，新业务孵化以及基础架构  大的分类就这四个部门，还有 EA 企业信息化，风控跟安全一级部门等等</description>
    </item>
    
    <item>
      <title>2020-07-07</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/07/07/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/07/07/</guid>
      <description>2020 年 7 月 7 日（星期二） #  今日待办 #      编程 #  Log #   Go  sirupsen/logrus  uber-go/zap    Python  cool-RR/PySnooper    PHP  itsgoingd/clockwork  Clockwork - php dev tools in your browser - server-side component     C++  gabime/spdlog    Kubernetes  fluent/fluentd      Debug #   Go  pprof go-delve/delve      Web 框架 #   PHP  laravel/laravel    Scala  playframework/playframework      Go #  interface 转 string #  // Strval 获取变量的字符串值 // 浮点型 3.</description>
    </item>
    
    <item>
      <title>2020-04-06</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/04/06/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/04/06/</guid>
      <description>2020 年 4 月 6 日（星期一） #  备注：
 清明节放假  今日待办 #   201 PoSD 翻译  前 20 个 Principles 翻译审校（评论） 编委会讨论前 20 个 Principles 翻译修改版 修改负责的 5 个 Principles 并提交到 icode    </description>
    </item>
    
    <item>
      <title>2020-05-06</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/05/06/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/05/06/</guid>
      <description>2020 年 5 月 6 日（星期三） #  备注： 五一假后第一天
今日待办 #      编程 #  算法复杂度 #  圈复杂度 #  圈复杂度（Cyclomatic complexity，简写 CC）也称为条件复杂度，是一种代码复杂度的衡量标准。由托马斯・J・麦凯布（Thomas J. McCabe, Sr.）于 1976 年提出，用来表示程序的复杂度，其符号为 VG 或是 M。它可以用来衡量一个模块判定结构的复杂程度，数量上表现为独立现行路径条数，也可理解为覆盖所有的可能情况最少使用的测试用例数。圈复杂度大说明程序代码的判断逻辑复杂，可能质量低且难于测试和 维护。程序的可能错误和高的圈复杂度有着很大关系。
圈复杂度的计算方法很简单，计算公式为：
V(G) = E - N + 2
其中，e 表示控制流图中边的数量，n 表示控制流图中节点的数量。
几个节点通过边连接。
其实，圈复杂度的计算还有更直观的方法，因为圈复杂度所反映的是 “判定条件” 的数量，所以圈复杂度实际上就是等于判定节点的数量再加上 1，也即控制流图的区域数，对应的计算公式为：
V (G) = P + 1
其中 P 为判定节点数，判定节点举例：
if 语句 while 语句 for 语句 case 语句 catch 语句 and 和 or 布尔操作 ?</description>
    </item>
    
    <item>
      <title>2020-07-06</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/07/06/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/07/06/</guid>
      <description>2020 年 7 月 6 日（星期一） #  今日待办 #      编程 #  ELF 文件格式 #  Executable and Linkable Format，可执行连接格式， 是 UNIX 系统实验室（USL）作为应用程序二进制接口（Application Binary Interface，ABI）而开发和发布的。 扩展名为 elf。
主要有三种主要类型:
 适于连接的可重定位文件 (relocatable file)，可与其它目标文件一起创建可执行文件和共享目标文件。 适于执行的可执行文件 (executable file)，用于提供程序的进程映像，加载的内存执行。 共享目标文件 (shared object file)，连接器可将它与其它可重定位文件和共享目标文件连接成其它的目标文件，动态连接器又可将它与可执行文件和其它共享目标文件结合起来创建一个进程映像。  为了方便和高效，ELF 文件内容有两个平行的视角：
 程序连接角度 程序运行角度   Go #  go test #  GOTEST := $(GO) test GOPKGS := $$($(GO) list ./...| grep -vE &amp;#34;vendor&amp;#34;) test-case: $(GOTEST) -v -cover $(GOPKGS)  Hasura actions #  hasura/graphql-engine #  Blazing fast, instant realtime GraphQL APIs on Postgres with fine grained access control, also trigger webhooks on database events.</description>
    </item>
    
    <item>
      <title>2020-06-05</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/06/05/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/06/05/</guid>
      <description>2020 年 6 月 5 日（星期五） #  今日待办 #      编程 #  Beyond Compare MacOS 破解 #  移除失效的认证
rm -rf ~/Library/Application\ Support/Beyond\ Compare/ moranzcw/Computer-Networking-A-Top-Down-Approach-NOTES #  《计算机网络－自顶向下方法 (原书第 6 版)》编程作业，Wireshark 实验文档的翻译和解答。
Packet Sender #  dannagle/PacketSender TCP, UDP, SSL 发包工具 https://packetsender.com/</description>
    </item>
    
    <item>
      <title>2020-07-05</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/07/05/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/07/05/</guid>
      <description>2020 年 7 月 5 日（星期日） #  今日待办 #      编程 #  Markdown #  在表格单元格里换行 #  &amp;lt;br&amp;gt;
图片在右侧 #  &amp;lt;img align=&amp;#34;right&amp;#34; src=&amp;#34;https://demo.png&amp;#34;/&amp;gt; 行首空格 #  需要借助 HTML 转义字符在行首添加空格来实现，
 &amp;amp;ensp; 代表半角空格， &amp;amp;emsp; 代表全角空格。  参考：
 关于 Markdown 的一些奇技淫巧  </description>
    </item>
    
    <item>
      <title>2020-05-04</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/05/04/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/05/04/</guid>
      <description>2020 年 5 月 4 日（星期一） #  备注： 五一假日
今日待办 #      编程 #  亚马逊的 14 条领导力原则 #  中文 1
顾客至上
简而言之，客户永远是第一位的，不管发生什么。这一点超越了所有的职责要求。从客户的角度出发、为客户牺牲自己的利益，实际上是说，你要愿意承担损失以便让客户获利，哪怕是违背你自己的使用条款或政策。如果你知道自己犯了错，要主动考虑退款，也就是说，要在客户要求之前作出补偿。
2
主人翁精神
主人翁精神意味着两件事：
（1）总是优先考虑长期目标，而不是短期目标；
（2）始终代表团队和整个公司行事，一切都是 “你的工作”。
3
创新与简化
成功的关键是保持简单，为此，需要不断创新。
4
正确，很多
这个原则应该被理解为 “领导者要正确决策”。它说的不仅仅是不犯错误，而是要有全局观，在必要时能够并且愿意 180 度转变态度。史蒂夫・乔布斯正是因此而出名：今天他相信 XYZ，第二天他就会意识到自己完全错了，突然间他就完全支持 ABC 了。从这个角度来说，他做出了正确的决策。
5
学习并充满好奇心
这项原则可以说是不言而喻。领导者必须时刻努力吸收更多的知识，进行自我提升。
6
雇佣人才，更要实现人尽其才
这一点也是显而易见，但除了要确保提高雇佣标准外，更重要是，确定雇佣关系后，你要不断地培养员工，使他们发挥出最大潜力。
7
坚持高标准
伟大的领导者总是在提高标准，创造最优质的产品和服务。
8
往大处着眼
这项原则并不是说脱离实际，好高骛远；往大处着眼的同时，也要遵从第一条 “顾客至上” 的原则。
9
积极行动
这项原则常常令人困惑不已。它的原理在于，由于多数错误并非不可挽回，所以冒险犯错也无可厚非。因此，伟大的领导者要积极行动：快速前进，而非被分析捆住了手脚，裹足不前。
10
节俭
这条普遍适用于所有创业公司创始人：不能毫无节制地花钱。基本上，就是用最少的钱干最多的事，在投入最小化的同时做到产出的最大化。
11
赢得信任
这是一条双行道：不仅需要取得他人的信任，也需要使他人感受到被信任的感觉。</description>
    </item>
    
    <item>
      <title>2020-06-04</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/06/04/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/06/04/</guid>
      <description>2020 年 6 月 4 日（星期四） #  今日待办 #      编程 #  判断是物理机还是虚拟机 #  $ systemd-detect-virt On KVM for example it returns:
kvm and on a non-virtualized host:
none 其他方法 #  dmesg | grep -i virtual 基于 hardware，则说明是物理机
结果返回包含 virtual，则是虚拟机
$ dmesg |grep -i virtual [0.000000] Booting paravirtualized kernel on Xen HVM [1.034572] systemd[1]: Detected virtualization xen. [1.065757] systemd[1]: Starting Setup Virtual Console.</description>
    </item>
    
    <item>
      <title>2020-04-03</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/04/03/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/04/03/</guid>
      <description>2020 年 4 月 3 日（星期五） #  今日待办 #      编程 #  Bookinfo Application #  安装 istio #  istioctl manifest apply --set profile=demo kubectl label namespace default istio-injection=enabled 参考：https://istio.io/docs/setup/getting-started/
运行 Bookinfo sample application #  alias k=&amp;#34;kubectl&amp;#34; k apply -f samples/bookinfo/platform/kube/bookinfo.yaml k get services 查看 Bookinfo 应用是否正常
by checking for the page title in the response
kubectl exec -it $(kubectl get pod -l app=ratings -o jsonpath=&amp;#39;{.</description>
    </item>
    
    <item>
      <title>2020-06-03</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/06/03/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/06/03/</guid>
      <description>2020 年 6 月 3 日（星期三） #  今日待办 #      编程 #  kernel-devel #  如果某个程序需要内核提供的一些功能，它就需要内核的 C header 来编译程序，这个时候 linux-devel 里面的东西就用上了。
比如 nvidia 和 ati 的官方显卡驱动，alsa-driver 声卡驱动，他们都需要编译一个放在内核里面运行的模块，编译这个模块就需要内核的 header 文件才能顺利编译。
当然，kernel-devel 不光是 C Header 文件，它还有内核的配置文件，以及其他的开发用的资料
kernel devel vs kernel source #  kernel-devel 包只包含用于内核开发环境所需的内核头文件以及 Makefile， 而 kernel-souce 包含所有内核源代码。
如果仅仅是用于你自己编写的模块开发的话，因为只需引用相应的内核头文件，所以只有 devel 包即可， 如果你要修改现有的内核源代码并重新编译，那必须是 kernel-souce。
kernel-devel 是用做内核一般开发的，比如编写内核模块，原则上，可以不需要内核的原代码。 kernel 则是专指内核本身的开发，因此需要内核的原代码。
 lspci #  显示当前主机的所有 PCI 总线信息，以及所有已连接的 PCI 设备信息。</description>
    </item>
    
    <item>
      <title>2020-04-02</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/04/02/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/04/02/</guid>
      <description>2020 年 4 月 2 日（星期四） #  今日待办 #      编程 #  Istio #  安装 minikube #  minikube start --image-mirror-country=&#39;cn&#39; --registry-mirror=https://registry.docker-cn.com
安装 istio #  istioctl manifest apply --set profile=demo kubectl label namespace default istio-injection=enabled 参考：https://istio.io/docs/setup/getting-started/
运行 Bookinfo sample application #  kubectl apply -f samples/bookinfo/platform/kube/bookinfo.yaml kubectl get services 一切顺利，输出 service list。
过了一会，报错，连不上 server
The connection to the server 192.168.99.100:8443 was refused - did you specify the right host or port?</description>
    </item>
    
    <item>
      <title>2020-06-02</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/06/02/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/06/02/</guid>
      <description>2020 年 6 月 2 日（星期二） #  今日待办 #      编程 #  shell #  keyword vs reserved word vs builtin #  reserved word 保留字
Keyword, reserved word, and builtin are all the &amp;ldquo;first word&amp;rdquo; of a Simple command. Could be placed in two groups: Keyword and Builtin. The two are mutually exclusive.
A word (token) can be either a Keyword or a builtin, but not both.</description>
    </item>
    
    <item>
      <title>2020-07-02</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/07/02/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/07/02/</guid>
      <description>2020 年 7 月 2 日（星期四） #  今日待办 #      编程 #  软件设计原则 #   Don’t Repeat Yourself (DRY) Keep It Simple, Stupid (KISS) Program to an interface, not an implementation Command-Query Separation (CQS) – 命令 - 查询分离原则 You Ain’t Gonna Need It (YAGNI) Law of Demeter – 迪米特法则 面向对象的 S.O.L.I.D 原则 Common Closure Principle（CCP）– 共同封闭原则 Common Reuse Principle (CRP) – 共同重用原则 Hollywood Principle – 好莱坞原则 High Cohesion &amp;amp; Low/Loose coupling &amp;amp; – 高内聚， 低耦合 Convention over Configuration（CoC）– 惯例优于配置原则 Separation of Concerns (SoC) – 关注点分离 Design by Contract (DbC) – 契约式设计  参考：</description>
    </item>
    
    <item>
      <title>EMBA</title>
      <link>https://ikingye.github.io/note/docs/study/degree/masters-degree/mba/emba/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/study/degree/masters-degree/mba/emba/</guid>
      <description>EMBA #  Executive Master of Business Administration
MBA 分类 #  </description>
    </item>
    
    <item>
      <title>购买</title>
      <link>https://ikingye.github.io/note/docs/social/economic/insurance/buy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/social/economic/insurance/buy/</guid>
      <description>购买 #  从哪里购买 #  </description>
    </item>
    
    <item>
      <title>2020-06-01</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/06/01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/06/01/</guid>
      <description>2020 年 6 月 1 日（星期一） #  今日待办 #      编程 #  Jeecg-Boot #  zhangdaiscott/jeecg-boot 前后端分离架构：SpringBoot 2.x，Ant Design&amp;amp;Vue，Mybatis-plus，Shiro，JWT
jhipster #  jhipster/generator-jhipster JHipster is a development platform to quickly generate, develop, &amp;amp; deploy modern web applications &amp;amp; microservice architectures. https://www.jhipster.tech
SELinux #  The SELinux stands for Security-Enhanced Linux where it is a linux kernel security module. It is enabled by default on most of the linux distribution that we use for servers like centOS.</description>
    </item>
    
    <item>
      <title>2020-07-01</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/07/01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/07/01/</guid>
      <description>2020 年 7 月 1 日（星期三） #  今日待办 #      编程 #  SIP #  BYE vs CANCEL #  For short, BYE is used when the callee already pick up the phone and talk for a while, otherwise, CANCEL takes place.
参考：
 Introduction to SIP BYE, CANCEL and hop-by-hop messages [video]understanding difference between sip bye &amp;amp; cancel request   作用域 #   局部变量  在 C 语言中局部变量，只有执行了才会分配存储空间，只要离开作用域就会自动释放，C 语言的局部变量存储在栈区 Go 语言局部变量的生命周期和 C 语言一样   全局变量  在 C 语言中全局变量，只要程序一启动就会分配存储空间，只有程序关闭才会释放存储空间，C 语言的全局变量存储在静态区 (数据区) Go 语言全局变量的生命周期和 C 语言一样     如何学习 Web 安全 #   一切的安全问题都体现在 “输入输出” 上，一切的安全问题都存在于 “数据流” 的整个过程中。</description>
    </item>
    
    <item>
      <title>理赔</title>
      <link>https://ikingye.github.io/note/docs/social/economic/insurance/claims/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/social/economic/insurance/claims/</guid>
      <description>理赔 #  </description>
    </item>
    
    <item>
      <title>需求</title>
      <link>https://ikingye.github.io/note/docs/study/domain/product/requirement/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/study/domain/product/requirement/</guid>
      <description>需求 #  需求又称为 user story，是从用户的角度描述的独立功能点。
在敏捷中对一个需求的描述应当包括 3 个方面：
 As a&amp;hellip; (作为&amp;hellip;角色或岗位) I want&amp;hellip; (我想&amp;hellip;希望做什么) So that&amp;hellip; (以便&amp;hellip;达到什么目的或商业价值)  需求拆分时应该满足 INVEST 原则：
 I：Independent：独立的 N：Negotiable：可协商的 V：Valuable：有价值的 E：Estimate：可评估的 S：Small ：小粒度的 T：Testable：可测试的  评定需求优先级时可参考 MoSCoW 原则：
 Must：必须有 Should：应该有 Could：可有可无 Won&amp;rsquo;t：没有  </description>
    </item>
    
    <item>
      <title>1.5 计算机</title>
      <link>https://ikingye.github.io/note/docs/natural/computer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/natural/computer/</guid>
      <description>计算机 #  见：计算机学习笔记</description>
    </item>
    
  </channel>
</rss>