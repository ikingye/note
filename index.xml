<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>首页 on 叶王笔记</title>
    <link>https://ikingye.github.io/note/</link>
    <description>Recent content in 首页 on 叶王笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    
	<atom:link href="https://ikingye.github.io/note/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>2020-03-31</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/03/31/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/03/31/</guid>
      <description>2020 年 3 月 31 日（星期二） 今日待办  xxx   语言 滥觞 lànshāng 浮起酒杯。喻事情的开始
夫江始出于岷山,其源可以滥觞。——《孔子家语·三恕》
社会 内卷化（网络）  靠极端剥削、压榨自己，从而在社会获得少量的竞争优势 明明可以有更加轻松，效果还更好的选择，却仍旧在旧有的选择中不断投入各类资源，以及由此产生的各种现象 不改变生产方式，不提高技术水平，而是靠极端剥削、压榨本国的劳动力在国际市场获得竞争优势  举一个很简单的例子：
假定某省考生数量，录取名额不变，即录取率不变。
现在有一所学校，甲校要求高中生每天学习 14 个小时，寒暑假和双休日补课。这一操作的效果是在短期内提高了甲校的录取率。
这种录取率提升的甜头让乙、丙、丁校羡慕，于是均决定向甲校学习，推行甲校的教学管理模式。
由于担心甲、乙、丙、丁校录取率的上升导致某省其余中学的录取率相对下降，于是该省其余学校也不得不采取跟进策略，学习和推广甲校的教学管理模式。
最终，某省所有中学都开始强迫学生一天学习 14 个小时，取消寒暑假和双休日。
于是，由于全省均采用甲校的模式，各个学校的考分尽管普遍上涨，在高考录取率不变的前提下，各个学校的录取率与推广甲学校模式之前相差无几（比如，原来一本线是 550 分，由于学生成绩普遍提高，一本线上调至 590 分，导致各个学校录取率与推广甲校之前无异）。
在这一过程中，为提高分数，中学生不得不投入更多的学习时间和资源。由于该省高考录取分数线提高，单个学生的分数看似提高，但从录取结果看，这种投入没有意义。这就是所谓的分数增长，但学生考取好大学的几率没有实质增长，即 “没有发展的增长”—— 内卷化。
内卷化（学术） 从词源来看，“内卷化” 一词的英文为 involution, 它源于拉丁语 involutum, 原意是 “转或卷起来”。
从起源看，“内卷化”（involution）滥觞于顶顶大名的大哲学家康德，他初步区分了内卷化（involution）和 “演化”（evolution），随后学者 Alexander Goldenweiser 借用该概念描述 “一种内部不断精细化的文化现象”。
真正把 “内卷化” 这一概念发扬光大的是人类学家 Clifford Geertz 和经济史学家黄宗智。
1963 年，Clifford Geertz 出版了一部研究印度尼西亚的著作 ——《农业的内卷化 (agricultural involution)：印度尼西亚生态变迁的过程》。他在研究中发现，在殖民地时代和后殖民地时代的爪哇，农业生产长期以来原地不动，未曾发展，只是不断地重复简单再生产。
针对这一现象，Clifford Geertz 借用了 “内卷化” 的概念，即 “一个既有的形态，由于内部细节过分的精细而使得形态本身获得了刚性”, 以刻画印度尼西亚爪哇地区 “由于农业无法向外延扩展，致使劳动力不断填充到有限的水稻生产” 的过程 。</description>
    </item>
    
    <item>
      <title>婚姻故事</title>
      <link>https://ikingye.github.io/note/docs/humanities/movie/others/Merrage-Story/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/humanities/movie/others/Merrage-Story/</guid>
      <description>婚姻故事 —— 不容易 豆瓣</description>
    </item>
    
    <item>
      <title>肖申克的救赎</title>
      <link>https://ikingye.github.io/note/docs/humanities/movie/doubantop250/The-Shawshank-Redemption/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/humanities/movie/doubantop250/The-Shawshank-Redemption/</guid>
      <description>肖申克的救赎 —— 自由 豆瓣</description>
    </item>
    
    <item>
      <title>2020-04-30</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/04/30/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/04/30/</guid>
      <description>2020 年 4 月 30 日（星期四） 今日待办     编程 网络 增加组播路由 使用 route 命令添加
使用 route 命令添加的路由，机器重启或者网卡重启后路由就失效了，方法：
# 添加到主机的路由 route add –host 192.168.168.110 dev eth0 route add –host 192.168.168.119 gw 192.168.168.1 # 添加到网络的路由 route add –net IP netmask MASK eth0 route add –net IP netmask MASK gw IP route add –net IP/24 eth1 # 添加默认网关 route add default gw IP # 删除路由 route del –host 192.168.168.110 dev eth0  OCR 光学字符识别（Optical Character Recognition, OCR）</description>
    </item>
    
    <item>
      <title>hugo-academic</title>
      <link>https://ikingye.github.io/note/docs/study/docs/note/hugo/theme/academic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/study/docs/note/hugo/theme/academic/</guid>
      <description>Academic 配置 写博客 hugo new &amp;ndash;kind post post/my-post</description>
    </item>
    
    <item>
      <title>基础</title>
      <link>https://ikingye.github.io/note/docs/live/parenting/appendix/interview/basic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/parenting/appendix/interview/basic/</guid>
      <description>基础面试题 </description>
    </item>
    
    <item>
      <title>进阶</title>
      <link>https://ikingye.github.io/note/docs/live/parenting/appendix/interview/advanced/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/parenting/appendix/interview/advanced/</guid>
      <description>进阶面试题 </description>
    </item>
    
    <item>
      <title>配置</title>
      <link>https://ikingye.github.io/note/docs/study/docs/note/hugo/config/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/study/docs/note/hugo/config/</guid>
      <description>Hugo 配置 参考：https://themes.gohugo.io/hugo-book</description>
    </item>
    
    <item>
      <title>2020-04-29</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/04/29/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/04/29/</guid>
      <description>2020 年 4 月 29 日（星期三） 今日待办     编程 docker 权限 docker run # 无法使用 gdb 调试 --cap-add SYS_PTRACE # 无法使用 date -s 修改时间 --cap-add=SYS_TIME # –privileged 等效于–cap-add=ALL 参考：
 使用 docker run &amp;ndash;cap-add 参数解决权限问题（无法使用 gdb 调试、无法 date -s 修改时间)  insecure-registry # vi /etc/docker/daemon.json { &amp;#34;insecure-registries&amp;#34; : [ &amp;#34;hostname.cloudapp.net:5000&amp;#34; ] } # 参考：https://stackoverflow.com/questions/42211380/add-insecure-registry-to-docker # 重启 docker systemctl restart docker  面试 字节头条面试要求  算法、数据结构和系统设计 提前温习软件工程的核心概念，  例如：如何从一个需求落实到一个系统设计，如何衡量两个不同设计的好坏，如何在各种限制下（人员、时间、资源等）选择其中更合适的设计，以及提升该设计的可拓展性等。​   在白板上练习算法题目，写出清晰、简洁、bug free 的代码，，并衡量时间和空间复杂度以及可能存在的副作用。​ 尝试用不同的方法，思路或数据结构去解决同一个问题，并且衡量不同解法之间的优劣。​ 练习  《Cracking the Coding Interview》​ https://leetcode.</description>
    </item>
    
    <item>
      <title>hugo-book</title>
      <link>https://ikingye.github.io/note/docs/study/docs/note/hugo/theme/hugo-book/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/study/docs/note/hugo/theme/hugo-book/</guid>
      <description>hugo-book 配置 Site Configuration  点击查看配置详情 ...  # (Optional) Set Google Analytics if you use it to track your website. # Always put it on the top of the configuration file, otherwise it won&amp;#39;t work googleAnalytics = &amp;#34;UA-XXXXXXXXX-X&amp;#34; # (Optional) If you provide a Disqus shortname, comments will be enabled on # all pages. disqusShortname = &amp;#34;my-site&amp;#34; # (Optional) Set this to true if you use capital letters in file names disablePathToLower = true # (Optional) Set this to true to enable &amp;#39;Last Modified by&amp;#39; date and git author # information on &amp;#39;doc&amp;#39; type pages.</description>
    </item>
    
    <item>
      <title>总统</title>
      <link>https://ikingye.github.io/note/docs/social/history/country/south-korea/president/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/social/history/country/south-korea/president/</guid>
      <description>韩国总统 </description>
    </item>
    
    <item>
      <title>高阶</title>
      <link>https://ikingye.github.io/note/docs/live/parenting/appendix/interview/expert/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/parenting/appendix/interview/expert/</guid>
      <description>高阶面试题 </description>
    </item>
    
    <item>
      <title>2020-04-28</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/04/28/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/04/28/</guid>
      <description>2020 年 4 月 28 日（星期二） 今日待办     编程 算法 树的最长路径 #coding=utf-8 class TreeNode(): def __init__(self, val): self.val = val self.left = None self.right = None def longest(root): if root is None: return 0 return max(length(root), length(root.left), length(root.right)) def length(root): if root is None: return 0 return height(root.left) + height(root.right) def height(root): if root is None: return 0 return max(height(root.left), height(root.right)) + 1 n1 = TreeNode(1) n2 = TreeNode(2) n3 = TreeNode(3) n4 = TreeNode(4) n5 = TreeNode(5) n6 = TreeNode(6) n7 = TreeNode(7) n8 = TreeNode(8) n9 = TreeNode(9) n1.</description>
    </item>
    
    <item>
      <title>2020-04-27</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/04/27/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/04/27/</guid>
      <description>2020 年 4 月 27 日（星期一） 今日待办     编程 GB28181 开源实现 标准  GB28181/GB28181.Solution   服务端  ossrs/srs  xiongziliang/ZLMediaKit  livegbs/GB28181-Server   客户端  pjsip/pjproject  ghettovoice/gosip  StefanKopieczek/gossip  kirm/sip.js    SIP 协议 Antisip
 VSCode  kasecato/vscode-intellij-idea-keybindings   运维 disconf  Distributed Configuration Management Platform (分布式配置管理平台) http://disconf.readthedocs.io/
consul + consul-template gcc vs g++  后缀为 .c 的  gcc 把它当做 C 程序 g++ 当做是 C++ 程序     编译可以用 gcc/g++，而链接可以用 g++ 或者 gcc -lstdc++  编译阶段，g++ 会调用 gcc，对于 c++ 代码，两者是等价的 gcc 命令不能自动和 C++ 程序使用的库联接，所以通常用 g++ 来完成链接 可以选择手动链接，gcc -lstdc++    乐观锁 vs 悲观锁 乐观锁（读多写少） 总是假设最好的情况，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据， 可以使用版本号机制和 CAS 算法实现。</description>
    </item>
    
    <item>
      <title>2020-04-26</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/04/26/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/04/26/</guid>
      <description>2020 年 4 月 26 日（星期日） 备注：
 法定上班。  今日待办     编程 duedge 基础架构
http Host header 函数式编程 MostlyAdequate/mostly-adequate-guide  Mostly adequate guide to FP (in javascript)
中文版 llh911001/mostly-adequate-guide-chinese 点击阅读
JavaScript 如何衡量一个人的 JavaScript 水平？
 python 猴子补丁 属性在运行时的动态替换，叫做猴子补丁（Monkey Patch）。
monkey patch 即运行时动态改变方法、类的方法。 不管是定义在类外的普通方法、类里面的方法、甚至是模块这些都可以进行 “动态替换的操作”
class A: def func(self): print(&amp;#34;Hi&amp;#34;) def monkey(self): print(&amp;#34;Hi, monkey&amp;#34;) a = A() A.func=A.monkey #在运行的时候，才改变了func a.func() def outer_monkey(a): # a 这个参数是没有用到的，因为func有一个参数，如果这个函数没有参数的话不能这样直接赋值 print(&amp;#34;Hi,outer monkey&amp;#34;) a = A() A.</description>
    </item>
    
    <item>
      <title>2020-04-25</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/04/25/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/04/25/</guid>
      <description>2020 年 4 月 25 日（星期六） 今日待办     编程 git submodule git submodule add -b 参考：
 How can I specify a branch/tag when adding a Git submodule?  submodule 修改 url  edit the .gitmodules file to update the URL git submodule sync  参考： How to change the remote repository for a git submodule?
delete submodule  Delete the relevant section from the .gitmodules file. Stage the .</description>
    </item>
    
    <item>
      <title>2020-05-25</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/05/25/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/05/25/</guid>
      <description>2020 年 5 月 25 日（星期一） 今日待办     编程 I/O 多路复用 vs 基于事件驱动 高并发是指不活跃的长连接，并不是并发请求
典型的后端服务，在逻辑上可以划分为两层，
 跟业务无关的通信层，负责 socket 连接的创建和管理，负责 bind/listen/accept/send/recv&amp;hellip; 通信层上面是业务逻辑层，负责被动响应请求，或主动推送业务消息  通信层特点：
 都是 IO 行为，几乎不大消耗 CPU 连接数很多，可能同时有 10K 甚至 100K 个 TCP 连接 通信协议就那么几种，decode/encode 简单 外部网络是慢速 IO，收发一点数据可能要 1 秒甚至更久  业务逻辑层特点：
 少量 CPU 消耗，大部分时间在等待数据库或者其它网络服务返回 业务逻辑五花八门，逻辑中往往需要调用别的网络服务，如 db 并发请求数，往往小于连接数，10K 个连接，可能每秒只有 100 个请求 单个业务请求通常很快，毫秒级别，几十毫秒算慢的了  如果完全采用传统的多线程模型，1 个 tcp 连接对应 1 个线程，10K 个连接需要 10K 个线程，典型的内存消耗是 10G。但是业务逻辑层并发请求往往要小 1 到 2 个数量级，每个请求往往只需要 100ms 以内，所以业务逻辑层需要的线程数，比通信层小 2-3 个数量级，不需要 10K 个线程，只要 100 个甚至 10 个就够了。</description>
    </item>
    
    <item>
      <title>2020-04-24</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/04/24/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/04/24/</guid>
      <description>2020 年 4 月 24 日（星期五） 今日待办     编程 github comment Review Comments Commit Comments Issue Comments  OAM (Open Application Model) OAM 是阿里巴巴和微软共同开源的云原生应用规范模型
2019 年 10 月宣布开源，同时开源了基于 OAM 的实现 Rudr。
Rudr  A Kubernetes implementation of the Open Application Model specification https://oam.dev
OpenTelemetry  Specifications for OpenTelemetry https://opentelemetry.io
参考：
 OAM（开放应用模型）—— 定义云原生应用标准的野望   Kubernetes CRI（Container Runtime Interface） 容器运行时接口，提供计算资源
CNI（Container Network Interface） 容器网络接口，提供网络资源
CSI（Container Storage Interface） 容器存储接口，提供存储资源</description>
    </item>
    
    <item>
      <title>2020-04-23</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/04/23/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/04/23/</guid>
      <description>2020 年 4 月 23 日（星期四） 今日待办     编程 边缘计算  物联网关类，用 edgex 容器场景  it 类应用多的，rancher/k3s ct 类应用多的 kubeedge   starlingx 适合继承 openstack 的，又有容器要求的边缘场景  </description>
    </item>
    
    <item>
      <title>2020-05-23</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/05/23/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/05/23/</guid>
      <description>2020 年 5 月 23 日（星期六） 今日待办     编程 VPS 文件下载服务器 Nginx server { listen 80; server_name vultr.kingye.me; set $php_upstream &amp;#39;unix:/run/php/php7.2-fpm.sock&amp;#39;; root /root/download; index index.php; location / { #try_files $uri $uri/ /index.php?$args;  add_header Content-disposition &amp;#34;attachment; filename=$1&amp;#34;; } location ~ \.php$ { fastcgi_pass $php_upstream; fastcgi_index index.php; include fastcgi.conf; } location ~ /\.(ht|svn|git) { deny all; } }  tampermonkey（chrome 插件） AC-baidu: 重定向优化百度搜狗谷歌搜索去广告_favicon双列 Endless_Google 豆瓣和 IMDb 互相显示评分 Mouseover Popup Image Viewer Search By Image 网页限制解除 (改) 一键 VIP 视频解析 Feedly filtering and sorting 视频网页全屏 迅雷、快车、QQ 旋风等专有链解密 新浪微博根据关键词、作者、话题、来源等过滤微博 百度网盘直接下载助手  英语 i.</description>
    </item>
    
    <item>
      <title>2020-04-22</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/04/22/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/04/22/</guid>
      <description>2020 年 4 月 22 日（星期三） 今日待办     编程 DCDN </description>
    </item>
    
    <item>
      <title>教程</title>
      <link>https://ikingye.github.io/note/docs/study/domain/operate/tutorial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/study/domain/operate/tutorial/</guid>
      <description>教程 书籍 有哪些互联网运营方面的书值得推荐？</description>
    </item>
    
    <item>
      <title>2020-04-21</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/04/21/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/04/21/</guid>
      <description>2020 年 4 月 21 日（星期二） 今日待办     编程 EdgeGallery EdgeGallery 是什么？ EdgeGallery 是华为联合运营商，垂直行业伙伴发起的一个 MEC 边缘计算开源项目。目的是打造一个符合电信产业 “联接 + 计算” 特点的边缘计算公共平台，实现网络能力（尤其是 5G 网络）开放的标准化和 MEC 应用开发、测试、迁移和运行等生命周期流程的通用化。
EdgeGallery 可以作为 Akraino 的上游项目，在 Akraino 里面可以立项新的面向 5G MEC 的 BP，把 EdgeGallery 作为 MEC 的 PaaS 层，然后集成其他的组件，比如 OpenStack、K8S、ONAP 等来形成一个完成的解决方案堆栈。
EdgeGallery 要解决什么问题？ EdgeGallery 要解决的是运营商 MEC 边缘计算平台的标准不统一带来的生态碎片化，产业规模做不大的问题。
MEC 是 5G 时代运营商新的蓝海市场，通过 MEC 平台，运营商可以把 “联接 + 计算” 的能力开放给行业应用，获取行业数字化的价值红利。
MEC 本质上是一个面向开发者的 ICT 基础设施市场，竞争力体现在为应用开发者提供的软件基础平台和工具链的丰富程度，市场结果体现在应用生态的丰富程度。
运营商对软件平台的研发传统模式是采用联合 ISV 进行定制开发的模式，如果 MEC 平台也采用传统模式，自然会导致不同运营商的 MEC 平台接口不一致，工具链不兼容。全球运营商很多，每个运营商都是区域化运营，这就自然的形成很多碎片化市场。</description>
    </item>
    
    <item>
      <title>2020-04-20</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/04/20/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/04/20/</guid>
      <description>2020 年 4 月 20 日（星期一） 今日待办     编程 TSN 时间敏感网络 参考：
 实时物联网 RT-IoT 终于有了自己的专属通讯网络 TSN！ 下一代工业通信 —TSN（时间敏感网络），工业物联网的助推器  cloudvr， tsn，物联网
5G 的大带宽，低时延，广连接
Cloud Native 云原生 什么是云原生 2018 年 CNCF 更新了云原生的定义。
这是新定义中描述的代表技术，其中容器和微服务两项在不同时期的不同定义中都有出现，
而服务网格这个在 2017 年才开始被社区接纳的新热点技术被非常醒目的列出来，和微服务并列，而不是我们通常认为的服务网格只是微服务在实施时的一种新的方式。
Cloud Native 翻译为云原生，是 Matt Stine 提出的一个概念，它是一个思想的集合，
包括 DevOps、 持续交付（Continuous Delivery）、微服务（MicroServices）、敏捷基础设施（Agile Infrastructure）、康威定律（Conways Law）等，以及根据商业能力对公司进行重组。
Cloud Native 既包含
 技术（微服务，敏捷基础设施）， 也包含管理（DevOps，持续交付，康威定律，重组等）。  Cloud Native 也可以说是一系列 Cloud 技术、企业管理方法的集合。
参考：
 CNCF Cloud Native Definition v1.0  云原生代表技术 云原生的代表技术包括容器、服务网格、微服务、不可变基础设施和声明式 API。</description>
    </item>
    
    <item>
      <title>2020-05-20</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/05/20/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/05/20/</guid>
      <description>2020 年 5 月 20 日（星期三） 今日待办     编程 </description>
    </item>
    
    <item>
      <title>2020-04-19</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/04/19/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/04/19/</guid>
      <description>2020 年 4 月 19 日（星期日） 今日待办     编程 github 周报 开发 probot https://github.com/probot/probot
weekly-digest https://github.com/probot/weekly-digest
repo-report octokit github rest api 库
参考文档  octokit docs github api docs  github api 限制 老是出现错误
connect ECONNREFUSED 13.250.168.23:443
 javascript print object // print object str = JSON.stringify(obj); console.log(`obj ============== : ${str}`); 星期几配置判断 根据给的周几的字符串（前缀就行），获取第几天
function getNumDayFromLongDay(day) { if (typeof day === &amp;#34;number&amp;#34; &amp;amp;&amp;amp; day &amp;gt;= 0 &amp;amp;&amp;amp; day &amp;lt; 7) { return day; } else { const longDay = [ &amp;#34;sunday&amp;#34;, &amp;#34;monday&amp;#34;, &amp;#34;tuesday&amp;#34;, &amp;#34;wednesday&amp;#34;, &amp;#34;thursday&amp;#34;, &amp;#34;friday&amp;#34;, &amp;#34;saturday&amp;#34;, ]; for (let i = 0; i &amp;lt; 7; i++) { if (longDay[i].</description>
    </item>
    
    <item>
      <title>2020-05-19</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/05/19/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/05/19/</guid>
      <description>2020 年 5 月 19 日（星期二） 今日待办     编程 TLS rfc5246
TLS 握手流程 TLS 是一个信道建立和信道的表达方式，向下依托于 TCP，向上对应用程序服务。
 1994 年，NetScape 公司设计了 SSL 协议（Secure Sockets Layer）的 1.0 版，但是未发布。
  1995 年，NetScape 公司发布 SSL 2.0 版，很快发现有严重漏洞。
  1996 年，SSL 3.0 版问世，得到大规模应用。
  1999 年，互联网标准化组织 ISOC 接替 NetScape 公司，发布了 SSL 的升级版 TLS 1.0 版。
  2006 年和 2008 年，TLS 进行了两次升级，分别为 TLS 1.1 版和 TLS 1.2 版。最新的变动是 2018 年 TLS 1.</description>
    </item>
    
    <item>
      <title>2020-04-17</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/04/17/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/04/17/</guid>
      <description>2020 年 4 月 17 日（星期五） 今日待办     编程 TSF (Tencent Service Framework) 腾讯微服务平台
TSF Serverless Serverless 微服务平台
TSF Mesh Mesh 微服务平台
 互联网巨头常用词汇 腾讯 精品、微创新、正能量、打法、发力、精细化、闭环、布局、商业模式、联动、泛娱乐、场景、痛点、减法、落地、聚焦、我们查下、跟进、不忘初心、方法论、迭代、快速响应、影响力、全栈、价值、细分、大数据、垂直领域、维度、颗粒、定性定量、聚焦、去中心化、关键路径、干货、接地气、梳理、输出、格局、生态、沉淀、结果导向、套路、用户体验、眼界、话术、体系、对齐、同步、认知、分享、面交、去中心化、勾兑、流程、感知度、赞、加速、用户画像、打磨、摸索、提炼、玩法、反哺、阈值。
阿里巴巴 价值观、颠覆、拥抱、改变、相信、基础设施、电子商务生态系统、企业社会责任、造福社会、理想主义、阿里云、技术、第五大经济体、促进进口、阿里人、野心、鲶鱼、DT 战略、全球化、营业额、改变世界、团队精神、知识产权、打假、情怀、挣一块钱、脱贫、平台公益、利益共同体、生态化发展、引爆消费力、农村经济、赋能、把控能力、专业化人才、战略踩空、无人区、练兵场、倒逼、互联网下半场。
百度 人工智能、无人驾驶、交互、刷脸、车、永久免费、更懂你、革新、迎接、技术创新、梦想、生态链、未来已来、智能营销、降维攻击、转变、可能性、搜索场景、AI 思维、洞察、开放能力、深度学习、人脸识别、万物互联、数字化、风口、精准识别、云端仿真、共享、感知、海量数据、赋能、开发者。
今日头条 独立发展、不上市、连接、用户体验、粉丝分发、跨越式机遇、新责任、未来、用户需求、概念推导、内容生态、国际化、体量、创作者、规模效应、平台属性、数字经济、估值、融资、智能社交、超级内容平台、颗粒度、价值创造、视频化、增长点、出海、流量红利、产品渗透率、拥抱 AI、模式重构、信息分发、人工智能实验室、算法、技术、数据挖掘、趋势、变革、内容创业、涨粉、赚钱、自媒体人、用户、创作者、构建、打击低俗信息、覆盖、粘性、精准、内容分发、产品体验、反馈、平台级公司、回馈、版权保护。
网易 猪厂、养猪、一日五餐、考拉上新货了、严选上新货了、代购、我们公司自己做的、我们公司自己养的、我们公司自己卖的、创新、品味、精品、工匠精神、匠心、新消费、泛中产、生活家、正品、世界级品质、用户体验、模式创新、中国智造、美好生活、丁磊同款、非典型、网易特色、走心、有毒营销、IP 营销、戏精、扎心、套路、竞争壁垒、差异化、价值、公益、企业家精神、有态度、各有态度、好的老板、广告公司、段子手、又双叒震荡了、工资回收计划、丁爸爸喊你 XXX。
京东 电商、亏损、商品流通、综合零售、物流网、供应链、智能商业体、技术转型、短链、成本管控、正道成功、世界 500 强、B2C、智慧化、重构、产业链、共生、品牌附加值、白条、无人仓、无界零售、一体化、倒三角战略、一体化、整合、流量端、竞争求异、盟国思维、赋能、O2O、云端服务、一锤子买卖、终端、库房、产业价值、最后一公里。
滴滴出行 小桔人、合理定价、用户价值、我要打车、神器、美好出行、智能派单、服务、足迹、系安全带、车主和司机、线上、打破价格僵局、尊享五星级出行服务、平台、智能交通、全球领先、随叫随到、将你安全带向爱、网约车、竞争壁垒、创新、包容性、出租车产业转型升级、私家车保有量、挑战、共享汽车、大数据。
参考：
 腾讯阿里等互联网巨头常用词汇，泄露了哪些商业机密？   产品经理必知词汇 UCD User Centered Design
是一种设计思维、模式，指以用户为中心的设计。
在设计过程中以用户体验为设计决策的中心，强调用户优先的设计模式。
先不要考虑盈利，先让用户用的爽再说。
AIOT 智联网 (AIOT，是 AI + IOT 物联网的结合) 2018 年开始崛起，核心是能够运用大量传感设备，综合语音、视觉、动作、温度等数据，实现 IOT 设备的全自然化的人机交互。</description>
    </item>
    
    <item>
      <title>2020-04-15</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/04/15/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/04/15/</guid>
      <description>2020 年 4 月 15 日（星期三） 今日待办     编程 Service Mesh 南北流量 vs 东西流量 南北流量（NORTH-SOUTH traffic）
东西流量（EAST-WEST traffic）
在云计算和 SDN 下，我们经常听到流量的东西南北向概念，简单来说从外部 Internet 等到数据中心内部的流量走向被称为南北流量，数据中心内部的 VM 之间的流量被称为东西流量。
南北流量：client - server
东西流量：server 之间
智慧城市  平安城市是一个综合性的安防系统，包含子系统较多； 天网工程和雪亮工程偏向于视频监控系统。  三者都是分级建设，平安城市和天网工程主要利用政府资源，而雪亮工程鼓励警民结合、资源互补。
按工程的建设规模排序，平安城市 ＞ 天网工程 ＞ 雪亮工程。
平安城市 平安城市就是通过三防系统（技防系统、物防系统、人防系统）建设城市的平安和谐。它是一个特大型、综合性非常强的管理系统，不仅需要满足治安管理、城市管理、交通管理、应急指挥等需求，而且还要兼顾灾难事故预警、安全生产监控等方面对图像监控的需求，同时还要考虑各系统之间的联动。
天网工程 天网工程是指为满足城市治安防控和城市管理需要，利用图像采集、传输、控制、显示等设备和控制软件组成，对固定区域进行实时监控和信息记录的视频监控系统。天网工程整体按照部级 - 省厅级 - 市县级平台架构部署实施，具有良好的拓展性与融合性。
雪亮工程 雪亮工程是以县、乡、村三级综治中心为指挥平台、以综治信息化为支撑、以网格化管理为基础、以公共安全视频监控联网应用为重点的 “群众性治安防控工程”。它通过三级综治中心建设把治安防范措施延伸到群众身边，发动社会力量和广大群众共同监看视频监控，共同参与治安防范，从而真正实现治安防控 “全覆盖、无死角”。
从平安城市到智慧城市 平安城市是现代城市信息化建设的第一步，随着物联网技术的发展，平安城市在未来会进一步在物联网的基础上向数字城市、智慧城市发展。
在不久前召开的北京安防技术应用论坛上，就探讨了平安城市建设与物联网技术应用。平安城市将从传统安防到平安城市大安防体系、数字城市、智慧城市方向发展。展望未来，平安城市将与城市应急、水体与气体检测、垃圾处理等，数字城管、智能建筑、工业与自动化控制、城市一卡通等各个方面涵盖，届时，将全面服务居民的生活。
平安城市与数字城市、智慧城市和感知中国随着技术不断发展，不断向前发展的城市管理模式，所涵盖技术各不相同，所使用目的也各不相同，但其重要部分视频监控技术都在发挥重要作用。
从功能上区分，平安城市的主体就是利用现代信息通信技术，构建城市综合预警系统和应急指挥体系，达到指挥统一、反应及时、作战有效的目的。实现对城市的有效管理和打击违法犯罪，加强中国城市安全防范能力，加快城市安全系统建设，建设平安城市和谐社会。
数字城市作为一个城市发展的战略目标，它主要是以计算机技术、多媒体技术和大规模存储技术为基础，利用信息技术手段把城市的过去、现状和未来的全部内容在网络上进行数字化虚拟实现。数字城市的建设涉及城市建设、规划、运行、管理、服务等各个方面，包括政府、交通、医疗、消防等等。
智慧城市是未来城市发展演进的必然趋势，不管是绿色城市，环保城市等等，智慧城市的加强是顺应当前全球技术变革及新一轮产业发展的时代潮流。每一个城市都要充分发挥信息技术带给他的优势，来建设好这个城市。所以，信息资源应该成为建设社会的重要要素，信息世界与物理世界的融合已经成为城市的支撑。
docker 上传到 私有仓库 docker build -t human-attribute:20200415_1585818439123 .</description>
    </item>
    
    <item>
      <title>2020-04-14</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/04/14/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/04/14/</guid>
      <description>2020 年 4 月 14 日（星期二） 今日待办     编程 豆瓣 API 文档 zce/douban-api-docs  英文 basic vs basis basic: 以什么为基础，进行再加工创造
basic: 基础内容
Basis = foundation of something. The basis of multiplication is serial addition, for example.
Basics = the core concepts. Multiplication tables are part of the basics because understanding them allows students to do higher order arithmetic much more efficiently.
So no, they are really not interchangeable.</description>
    </item>
    
    <item>
      <title>2020-05-14</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/05/14/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/05/14/</guid>
      <description>2020 年 5 月 14 日（星期四） 今日待办     编程 Go Go Module goproxy 阿里云 Go Module 代理仓库服务
  使用 go1.11 以上版本并开启 go module 机制
  导出 GOPROXY 环境变量
  export GOPROXY=https://mirrors.aliyun.com/goproxy/ go-yaml/yaml  YAML support for the Go language.
package main import ( &amp;#34;io/ioutil&amp;#34; &amp;#34;gopkg.in/yaml.v2&amp;#34; &amp;#34;fmt&amp;#34; ) func main() { var c conf conf:=c.getConf() fmt.Println(conf.Host) } //profile variables type conf struct { Host string `yaml:&amp;#34;host&amp;#34;` User string `yaml:&amp;#34;user&amp;#34;` Pwd string `yaml:&amp;#34;pwd&amp;#34;` Dbname string `yaml:&amp;#34;dbname&amp;#34;` } func (c *conf) getConf() *conf { yamlFile, err := ioutil.</description>
    </item>
    
    <item>
      <title>2020-04-13</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/04/13/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/04/13/</guid>
      <description>2020 年 4 月 13 日（星期一） 今日待办     编程 Git Git submodule merge vs squash vs rebase merge 不能保持 master 分支干净，但是保持了所有的 commit history，大多数情况下都是不好的，个别情况挺好 squash 也可以保持 master 分支干净，但是 master 中 author 都是 maintainer，而不是原 owner rebase 可以尽可能保持 master 分支干净整洁，并且易于识别 author
squash merge # 切换到目标分支 $ git checkout master # 以 squash 的形式 merge $ git merge --squash devel # it does not produce a commit right away: you need an additional commit $ git commit -m &amp;#34;squash branch&amp;#34;  你会发现，在 master 分支上居然有未提交的修改，然后你就需要在 master 上主动提交了修改， 注意，这里是你 commit 的，也就是改变了 commit 的 author。 git merge has a &amp;ndash;commit option, but it cannot be used with &amp;ndash;squash.</description>
    </item>
    
    <item>
      <title>2020-04-12</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/04/12/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/04/12/</guid>
      <description>2020 年 4 月 12 日（星期日） 今日待办  Istio Handbook 周报  周一发布到钉钉群     编程 GitHub 周报 probot/weekly-digest  配置
# Configuration for weekly-digest - https://github.com/apps/weekly-digest publishDay: sun canPublishIssues: true canPublishPullRequests: true canPublishContributors: true canPublishStargazers: true canPublishCommits: true </description>
    </item>
    
    <item>
      <title>2020-05-12</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/05/12/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/05/12/</guid>
      <description>2020 年 5 月 12 日（星期二） 今日待办     编程 Redis redis-cli -h host -p port -a password 设置密码 打开文件 /etc/redis.conf， 找到其中的 # requirepass foobared，去掉前面的 #， 并把 foobared 改成你的密码。
ps: 如果 redis 没有启用密码，我使用 redis-cli -a xxx 可以访问吗？ 答案是：可以
为什么 Redis 默认端口是 6379 6379 在是手机按键上 MERZ 对应的号码，而 MERZ 取自意大利歌女 Alessia Merz 的名字。 MERZ 长期以来被 antirez 及其朋友当作愚蠢的代名词。
参考：http://oldblog.antirez.com/post/redis-as-LRU-cache.html
5G 开源 5G 核心网 free5gc/free5gc  https://www.free5gc.org/
Docker docker logs --follow
copy vs add add 是 copy 的超集</description>
    </item>
    
    <item>
      <title>教程</title>
      <link>https://ikingye.github.io/note/docs/humanities/language/english/tutorial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/humanities/language/english/tutorial/</guid>
      <description>英语教程 听写 CoachShane - 每日英语听写 Daily English Dictation 1-400  表达 CoachShane - Daily Easy English Expression 1-899 </description>
    </item>
    
    <item>
      <title>谥号</title>
      <link>https://ikingye.github.io/note/docs/social/history/posthumous-name/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/social/history/posthumous-name/</guid>
      <description>谥号 </description>
    </item>
    
    <item>
      <title>2020-04-11</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/04/11/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/04/11/</guid>
      <description>2020 年 4 月 11 日（星期六） 今日待办  Istio Handbook 周报  周一发布到钉钉群     编程 架构设计 HA 高可用 High Availability
LB 负载均衡 Load Balance
产品设计 POC 概念验证 Proof Of Concept
MVP 最小化可行产品 Minimum Viable Product
需求管理 KANO 模型 价值 vs 复杂度矩阵 分布式一致性 Paxos Raft https://raft.github.io
由于 Paxos 难以理解，所以才有了 Raft
Raft 以可理解性和易于实现为目标：
 Leader 选举（Leader election） 日志同步（Log replication） 安全性（Safety） 日志压缩（Log compaction） 成员变更（Membership change）  shell top htop
brew install htop</description>
    </item>
    
    <item>
      <title>2020-05-11</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/05/11/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/05/11/</guid>
      <description>2020 年 5 月 11 日（星期一） 今日待办     编程 Linux curl / wget wget -c http://xxxx curl -Lo filename http://xxxx # Write output to a file named as the remote file curl -LO http://xxxx Docker # stop all containers sudo docker stop $(sudo docker ps -aq) # rm all containers sudo docker rm $(sudo docker ps -aq) docker system prune This docker system prune clean the following stuff:</description>
    </item>
    
    <item>
      <title>2020-04-10</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/04/10/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/04/10/</guid>
      <description>2020 年 4 月 10 日（星期五） 今日待办  Istio Handbook 编委会双周会 21:00-22:00   编程 mosquitto (mqtt) mosquitto_pub mosquitto_pub [-d] [-h hostname] [-i client_id] [-I client id prefix] [-p port number] [-q message QoS] [--quiet] [-r] { -f file | -l | -m message | -n | -s} [-u username [-P password] ] [ --will-topic topic [--will-payload payload] [--will-qos qos] [--will-retain] ] -t message-topic mosquitto_pub -t &amp;lsquo;application/1/device/ffffff100000d143/rx&amp;rsquo; -m &amp;lsquo;{&amp;ldquo;applicationID&amp;rdquo;:&amp;ldquo;1&amp;rdquo;,&amp;ldquo;applicationName&amp;rdquo;:&amp;ldquo;0000000000000001&amp;rdquo;,&amp;ldquo;deviceName&amp;rdquo;:&amp;ldquo;d143-K5-out&amp;rdquo;,&amp;ldquo;devEUI&amp;rdquo;:&amp;ldquo;ffffff100000d143&amp;rdquo;,&amp;ldquo;txInfo&amp;rdquo;:{&amp;ldquo;frequency&amp;rdquo;:481700000,&amp;ldquo;dr&amp;rdquo;:2},&amp;ldquo;adr&amp;rdquo;:false,&amp;ldquo;fCnt&amp;rdquo;:68570,&amp;ldquo;fPort&amp;rdquo;:44,&amp;ldquo;data&amp;rdquo;:&amp;ldquo;BQEA&amp;rdquo;}&amp;rsquo;
mosquitto_sub mosquitto_sub -t &amp;lsquo;application/1/device/ffffff100000d143/rx&amp;rsquo;</description>
    </item>
    
    <item>
      <title>2020-04-09</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/04/09/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/04/09/</guid>
      <description>2020 年 4 月 9 日（星期四） 今日待办  编程  熟悉基本算法  排序算法（时间 / 空间复杂度） 大数据查找 / 排序   CORS     编程 基本算法 排序算法  插入排序类  直接插入排序 希尔排序 二分法插入排序   选择排序类  直接选择排序 堆排序   交换排序类  冒泡排序 快速排序   归并排序 基数排序  时间 / 空间复杂度 排序大的分类可分为内排序和外排序，不需要访问外存就能进行排序的叫做内排序。
   排序方法 时间复杂度（平均） 时间复杂度（最坏) 时间复杂度（最好) 空间复杂度 稳定性 复杂性     希尔排序 O(nlog2n) O(n2) O(n) O(1) 不稳定 较复杂   堆排序 O(nlog2n) O(nlog2n) O(nlog2n) O(1) 不稳定 较复杂   快速排序 O(nlog2n) O(n2) O(nlog2n) O(nlog2n) 不稳定 较复杂   归并排序 O(nlog2n) O(nlog2n) O(nlog2n) O(n) 稳定 较复杂   直接插入排序 O(n2) O(n2) O(n) O(1) 稳定 简单   直接选择排序 O(n2) O(n2) O(n2) O(1) 不稳定 简单   冒泡排序 O(n2) O(n2) O(n) O(1) 稳定 简单   基数排序 O(d(n+r)) O(d(n+r)) O(d(n+r)) O(n+r) 稳定 较复杂    稳定排序与不稳定排序 稳定排序：假设在待排序的文件中，存在两个或两个以上的记录具有相同的关键字，在用某种排序法排序后，若这些相同关键字的元素的相对次序仍然不变，则这种排序方法是稳定的。</description>
    </item>
    
    <item>
      <title>2020-05-09</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/05/09/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/05/09/</guid>
      <description>2020 年 5 月 9 日（星期六） 备注： 法定加班（五一调休）
今日待办     编程 中文排版 sparanoid/chinese-copywriting-guidelines  Chinese copywriting guidelines for better written communication／中文文案排版指北
mzlogin/chinese-copywriting-guidelines  Chinese Copywriting Guidelines：中文文案排版指北（简体中文版）
https://mazhuang.org/wiki/chinese-copywriting-guidelines/
参考：
 中英文混排时中文与英文之间是否要有空格？ 写给大家看的中文排版指南   Docker Dockerfile 目标:
 更快的构建速度 更小的 Docker 镜像大小 更少的 Docker 镜像层 充分利用镜像缓存 增加 Dockerfile 可读性 让 Docker 容器使用起来更简单  做法：
  编写.dockerignore 文件
  容器只运行单个应用
  将多个 RUN 指令合并为一个
  基础镜像的标签不要用 latest</description>
    </item>
    
    <item>
      <title>2020-03-08</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/03/08/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/03/08/</guid>
      <description>2020 年 3 月 8 日（星期日） 今日待办  陪闵子玩 Istio 1.5 发布了，学习一个   编程 算法教程 今天看到一个算法教程还不错，推荐一下，labuladong 的算法小抄。
 Istio 1.5 Istio 1.5 于 2020-03-05 发布了。
引入 Istiod 将控制平面整合为一个新的二进制文件 Istiod，简化了安装、运行和升级。所有 API 和运行时特性均与以前的组件一致。
参考：官网 1.5 change note
可扩展性的新模型 Istio 一直是最可扩展的服务网格，其 Mixer 插件允许自定义策略和遥测支持，而 Envoy 扩展则允许数据平面自定义。Istio 1.5 带来了了一个新模型，该模型使用 WebAssembly（Wasm）将 Istio 的可扩展性模型与 Envoy 的统一。Wasm 使开发人员能够安全地在 Envoy 代理中分发和执行代码，以便与遥测系统和策略系统集成，并控制路由，甚至转换消息正文。它将更加灵活和高效，从而无需单独运行 Mixer 组件（这也简化了部署）。
更容易使用 现在，使用 istioctl 的 Istio 命令行安装已进入 beta 阶段。istioctl 也有十几项改进，包括分析新项目、更好的验证规则，以及更好的与 CI 系统集成的能力等。它已经成为了解 Istio 的系统运行状态并确保配置更改安全的必要工具。
Istio 的安全性也得到了许多增强，更易于使用。Beta 版自动 mTLS 的启动，简化了 mTLS 的配置并使其自动化。</description>
    </item>
    
    <item>
      <title>2020-04-08</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/04/08/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/04/08/</guid>
      <description>2020 年 4 月 8 日（星期三） 今日待办     编程 依赖注入 可以通过多种方式为实例提供必要的依赖关系：
 构造函数注入 属性注入 方法注入  构造函数注入 构造函数注入是许多依赖注入框架的首选方法，常受依赖注入框架的青睐。
它清楚地告诉我们创建特定组件所需的所有依赖关系，并且这些依赖不是可选的，这些依赖关系在整个组件中应该都是必需的。
public class DataProcessor { private final DbManager manager; private final Calculator calculator; public DataProcessor(DbManager manager, Calculator calculator) { this.manager = manager; this.calculator = calculator; } // ... }  优点：  不变性：依赖关系始终如初。   缺点  必须在初始化时提供所有依赖项。  有时，我们无法自己初始化一个组件，或者在某个时刻我们无法提供组件的所有依赖关系。或者我们需要使用另外一个构造函数。一旦设置了依赖项，我们就无法再改变它们了。      属性注入 属性注入更适合可选参数，例如监听或委托。又或是我们无法在初始化时提供依赖关系。
其它编程语言，例如 Swift，大量使用了带属性的 委托模式。因此，使用属性注入将使其它语言的开发人员更熟悉我们的代码。</description>
    </item>
    
    <item>
      <title>2020-05-08</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/05/08/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/05/08/</guid>
      <description>2020 年 5 月 8 日（星期五） 今日待办  servicemesher/istio-handbook 发周报   编程 Kubernetes node  Name Labels Taints Conditions  MemoryPressure DiskPressure PIDPressure Ready    Name: njjs-sys-jomo14d34c80103718120200110164857.njjs.baidu.com Roles: &amp;lt;none&amp;gt; Labels: aiedge-web=1 beta.kubernetes.io/arch=amd64 beta.kubernetes.io/os=linux gpuenable=1 kubernetes.io/hostname=njjs-sys-jomo14d34c80103718120200110164857.njjs.baidu.com Annotations: node.alpha.kubernetes.io/ttl: 0 volumes.kubernetes.io/controller-managed-attach-detach: true CreationTimestamp: Wed, 04 Mar 2020 14:44:57 +0800 Taints: &amp;lt;none&amp;gt; Unschedulable: false Conditions: Type Status LastHeartbeatTime LastTransitionTime Reason Message ---- ------ ----------------- ------------------ ------ ------- MemoryPressure False Fri, 08 May 2020 20:32:14 +0800 Tue, 14 Apr 2020 19:18:50 +0800 KubeletHasSufficientMemory kubelet has sufficient memory available DiskPressure False Fri, 08 May 2020 20:32:14 +0800 Tue, 14 Apr 2020 19:18:50 +0800 KubeletHasNoDiskPressure kubelet has no disk pressure PIDPressure False Fri, 08 May 2020 20:32:14 +0800 Tue, 14 Apr 2020 19:18:50 +0800 KubeletHasSufficientPID kubelet has sufficient PID available Ready True Fri, 08 May 2020 20:32:14 +0800 Wed, 29 Apr 2020 15:34:10 +0800 KubeletReady kubelet is posting ready status Addresses: InternalIP: 10.</description>
    </item>
    
    <item>
      <title>2020-04-07</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/04/07/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/04/07/</guid>
      <description>2020 年 4 月 7 日（星期二） 今日待办  201 PoSD 翻译  修改负责的 5 个 Principles 并提交到 icode 前 20 个 Principles 合并到 word，并提交给出版社进行初审     编程 编程哲学 中文房间 中文房间（英语：Chinese room），是由约翰・希尔勒提出的一个思想实验，借以反驳强人工智能的观点。根据强人工智能的观点，只要计算机拥有了适当的程序，理论上就可以说计算机拥有它的认知状态并且可以像人一样地进行理解活动。
该实验出自约翰・罗杰斯・希尔勒的论文《心灵、大脑和程序》（ Minds, Brains, and Programs）中，发表于 1980 年的《 行为与脑科学（英语：Behavioral and Brain Sciences）》。
中文房间思想实验是什么？它是否成功地否决了图灵测试的有效性？
中文房间是否可以否定人类会思考？
因果论与自由意志 k8s canonical/multipass  Multipass orchestrates virtual Ubuntu instances https://multipass.run
# 创建一个 VM, 1GB 内存和 5GB 磁盘 multipass launch --name k3s --mem 1G --disk 5G # 为 VM 启动一个 shell multipass shell k3s # 在其上安装 k3s curl -sfL https://get.</description>
    </item>
    
    <item>
      <title>2020-05-07</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/05/07/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/05/07/</guid>
      <description>2020 年 5 月 7 日（星期四） 今日待办     编程 brookhong/Surfingkeys  Surfingkeys 和现有的一些插件一样，让你尽可能的通过键盘来使用 Chrome/Firefox 浏览器，比如跳转网页，上下左右滚屏。但不只是给 vim 用户使用，Surfingkeys 的基本特性是让你自己写一段 Javascript 脚本，然后通过 mapkey 映射到某些按键。之后当你按了那几个键以后，对应的 Javascript 脚本就会被执行。
快捷键  ?: 显示帮助   t: 搜索收藏夹和访问历史  参考：
 Surfingkeys &amp;ndash; 用 javascript 和键盘扩展你的 chrome  SaltStack Saltstack 是基于 python 开发的一套 C/S 自动化运维工具。
漏洞风险 参考：
 SaltStack 远程命令执行漏洞风险通告（CVE-2020-11651/CVE-2020-11652）   公司 今日头条  EE 效率工程部：做飞书，包括存储/文档 Data 广告数据部：包括数据分析，AI-Lab，广告系统，接入分发，内容平台 IES 抖音多媒体部：抖音引擎，服务端中台，faceu 产品研发部：小说，小游戏，今日头条主端 app，新业务孵化以及基础架构  大的分类就这四个部门，还有 EA 企业信息化，风控跟安全一级部门等等</description>
    </item>
    
    <item>
      <title>2020-04-06</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/04/06/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/04/06/</guid>
      <description>2020 年 4 月 6 日（星期一） 备注：
 清明节放假  今日待办  201 PoSD 翻译  前 20 个 Principles 翻译审校（评论） 编委会讨论前 20 个 Principles 翻译修改版 修改负责的 5 个 Principles 并提交到 icode    </description>
    </item>
    
    <item>
      <title>2020-05-06</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/05/06/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/05/06/</guid>
      <description>2020 年 5 月 6 日（星期三） 备注： 五一假后第一天
今日待办     编程 算法复杂度 圈复杂度 圈复杂度（Cyclomatic complexity，简写 CC）也称为条件复杂度，是一种代码复杂度的衡量标准。由托马斯・J・麦凯布（Thomas J. McCabe, Sr.）于 1976 年提出，用来表示程序的复杂度，其符号为 VG 或是 M。它可以用来衡量一个模块判定结构的复杂程度，数量上表现为独立现行路径条数，也可理解为覆盖所有的可能情况最少使用的测试用例数。圈复杂度大说明程序代码的判断逻辑复杂，可能质量低且难于测试和 维护。程序的可能错误和高的圈复杂度有着很大关系。
圈复杂度的计算方法很简单，计算公式为：
V(G) = E - N + 2
其中，e 表示控制流图中边的数量，n 表示控制流图中节点的数量。
几个节点通过边连接。
其实，圈复杂度的计算还有更直观的方法，因为圈复杂度所反映的是 “判定条件” 的数量，所以圈复杂度实际上就是等于判定节点的数量再加上 1，也即控制流图的区域数，对应的计算公式为：
V (G) = P + 1
其中 P 为判定节点数，判定节点举例：
if 语句 while 语句 for 语句 case 语句 catch 语句 and 和 or 布尔操作 ?: 三元运算符
参考：</description>
    </item>
    
    <item>
      <title>2020-05-04</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/05/04/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/05/04/</guid>
      <description>2020 年 5 月 4 日（星期一） 备注： 五一假日
今日待办     编程 亚马逊的 14 条领导力原则 中文 1
顾客至上
简而言之，客户永远是第一位的，不管发生什么。这一点超越了所有的职责要求。从客户的角度出发、为客户牺牲自己的利益，实际上是说，你要愿意承担损失以便让客户获利，哪怕是违背你自己的使用条款或政策。如果你知道自己犯了错，要主动考虑退款，也就是说，要在客户要求之前作出补偿。
2
主人翁精神
主人翁精神意味着两件事：
（1）总是优先考虑长期目标，而不是短期目标；
（2）始终代表团队和整个公司行事，一切都是 “你的工作”。
3
创新与简化
成功的关键是保持简单，为此，需要不断创新。
4
正确，很多
这个原则应该被理解为 “领导者要正确决策”。它说的不仅仅是不犯错误，而是要有全局观，在必要时能够并且愿意 180 度转变态度。史蒂夫・乔布斯正是因此而出名：今天他相信 XYZ，第二天他就会意识到自己完全错了，突然间他就完全支持 ABC 了。从这个角度来说，他做出了正确的决策。
5
学习并充满好奇心
这项原则可以说是不言而喻。领导者必须时刻努力吸收更多的知识，进行自我提升。
6
雇佣人才，更要实现人尽其才
这一点也是显而易见，但除了要确保提高雇佣标准外，更重要是，确定雇佣关系后，你要不断地培养员工，使他们发挥出最大潜力。
7
坚持高标准
伟大的领导者总是在提高标准，创造最优质的产品和服务。
8
往大处着眼
这项原则并不是说脱离实际，好高骛远；往大处着眼的同时，也要遵从第一条 “顾客至上” 的原则。
9
积极行动
这项原则常常令人困惑不已。它的原理在于，由于多数错误并非不可挽回，所以冒险犯错也无可厚非。因此，伟大的领导者要积极行动：快速前进，而非被分析捆住了手脚，裹足不前。
10
节俭
这条普遍适用于所有创业公司创始人：不能毫无节制地花钱。基本上，就是用最少的钱干最多的事，在投入最小化的同时做到产出的最大化。
11
赢得信任
这是一条双行道：不仅需要取得他人的信任，也需要使他人感受到被信任的感觉。
12
深入研究
数据才是最重要的。当数据和感觉不一致时，可以质疑，但要相信数据。
13
永远坚守核心，处理好争议与承诺
虽然排到第十三位，但这条原则至关重要。它是说：当两方存在争议时，这很平常，有人最后坚决反对，十分坚定地说 “不”，也说清楚了个中缘由，在这样的情况下，你依然能同意去尝试不同的选择，并且给予全力支持。也就是说，即使你不同意，你也会给出自己的承诺去尝试。
14</description>
    </item>
    
    <item>
      <title>2020-04-03</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/04/03/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/04/03/</guid>
      <description>2020 年 4 月 3 日（星期五） 今日待办     编程 Bookinfo Application 安装 istio istioctl manifest apply --set profile=demo kubectl label namespace default istio-injection=enabled 参考：https://istio.io/docs/setup/getting-started/
运行 Bookinfo sample application alias k=&amp;#34;kubectl&amp;#34; k apply -f samples/bookinfo/platform/kube/bookinfo.yaml k get services 查看 Bookinfo 应用是否正常
by checking for the page title in the response
kubectl exec -it $(kubectl get pod -l app=ratings -o jsonpath=&amp;#39;{.items[0].metadata.name}&amp;#39;) -c ratings -- curl productpage:9080/productpage | grep -o &amp;#34;&amp;lt;title&amp;gt;.</description>
    </item>
    
    <item>
      <title>2020-04-02</title>
      <link>https://ikingye.github.io/note/docs/live/diary/2020/04/02/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/live/diary/2020/04/02/</guid>
      <description>2020 年 4 月 2 日（星期四） 今日待办     编程 Istio 安装 minikube minikube start --image-mirror-country=&#39;cn&#39; --registry-mirror=https://registry.docker-cn.com
安装 istio istioctl manifest apply --set profile=demo kubectl label namespace default istio-injection=enabled 参考：https://istio.io/docs/setup/getting-started/
运行 Bookinfo sample application kubectl apply -f samples/bookinfo/platform/kube/bookinfo.yaml kubectl get services 一切顺利，输出 service list。
过了一会，报错，连不上 server
The connection to the server 192.168.99.100:8443 was refused - did you specify the right host or port? minikube status minikube start --image-mirror-country=&amp;#39;cn&amp;#39; --registry-mirror=https://registry.</description>
    </item>
    
    <item>
      <title>EMBA</title>
      <link>https://ikingye.github.io/note/docs/study/degree/masters-degree/mba/emba/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/study/degree/masters-degree/mba/emba/</guid>
      <description>EMBA Executive Master of Business Administration
MBA 分类 </description>
    </item>
    
    <item>
      <title>需求</title>
      <link>https://ikingye.github.io/note/docs/study/domain/product/requirement/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ikingye.github.io/note/docs/study/domain/product/requirement/</guid>
      <description>需求 需求又称为 user story，是从用户的角度描述的独立功能点。
在敏捷中对一个需求的描述应当包括 3 个方面：
 As a&amp;hellip; (作为&amp;hellip;角色或岗位) I want&amp;hellip; (我想&amp;hellip;希望做什么) So that&amp;hellip; (以便&amp;hellip;达到什么目的或商业价值)  需求拆分时应该满足 INVEST 原则：
 I：Independent：独立的 N：Negotiable：可协商的 V：Valuable：有价值的 E：Estimate：可评估的 S：Small ：小粒度的 T：Testable：可测试的  评定需求优先级时可参考 MoSCoW 原则：
 Must：必须有 Should：应该有 Could：可有可无 Won&amp;rsquo;t：没有  </description>
    </item>
    
  </channel>
</rss>