'use strict';(function(){const indexCfg={cache:true};indexCfg.doc={id:'id',field:['title','content'],store:['title','href'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':0,'href':'/note/docs/live/diary/2020/03/31/','title':"2020-03-31",'content':"2020 年 3 月 31 日（星期二） 今日待办  xxx   语言文化 滥觞 lànshāng 浮起酒杯。喻事情的开始\n夫江始出于岷山,其源可以滥觞。——《孔子家语·三恕》\n政经法史地 内卷化（网络）  靠极端剥削、压榨自己，从而在社会获得少量的竞争优势 明明可以有更加轻松，效果还更好的选择，却仍旧在旧有的选择中不断投入各类资源，以及由此产生的各种现象 不改变生产方式，不提高技术水平，而是靠极端剥削、压榨本国的劳动力在国际市场获得竞争优势  举一个很简单的例子：\n假定某省考生数量，录取名额不变，即录取率不变。\n现在有一所学校，甲校要求高中生每天学习 14 个小时，寒暑假和双休日补课。这一操作的效果是在短期内提高了甲校的录取率。\n这种录取率提升的甜头让乙、丙、丁校羡慕，于是均决定向甲校学习，推行甲校的教学管理模式。\n由于担心甲、乙、丙、丁校录取率的上升导致某省其余中学的录取率相对下降，于是该省其余学校也不得不采取跟进策略，学习和推广甲校的教学管理模式。\n最终，某省所有中学都开始强迫学生一天学习 14 个小时，取消寒暑假和双休日。\n于是，由于全省均采用甲校的模式，各个学校的考分尽管普遍上涨，在高考录取率不变的前提下，各个学校的录取率与推广甲学校模式之前相差无几（比如，原来一本线是 550 分，由于学生成绩普遍提高，一本线上调至 590 分，导致各个学校录取率与推广甲校之前无异）。\n在这一过程中，为提高分数，中学生不得不投入更多的学习时间和资源。由于该省高考录取分数线提高，单个学生的分数看似提高，但从录取结果看，这种投入没有意义。这就是所谓的分数增长，但学生考取好大学的几率没有实质增长，即 “没有发展的增长”—— 内卷化。\n内卷化（学术） 从词源来看，“内卷化” 一词的英文为 involution, 它源于拉丁语 involutum, 原意是 “转或卷起来”。\n从起源看，“内卷化”（involution）滥觞于顶顶大名的大哲学家康德，他初步区分了内卷化（involution）和 “演化”（evolution），随后学者 Alexander Goldenweiser 借用该概念描述 “一种内部不断精细化的文化现象”。\n真正把 “内卷化” 这一概念发扬光大的是人类学家 Clifford Geertz 和经济史学家黄宗智。\n1963 年，Clifford Geertz 出版了一部研究印度尼西亚的著作 ——《农业的内卷化 (agricultural involution)：印度尼西亚生态变迁的过程》。他在研究中发现，在殖民地时代和后殖民地时代的爪哇，农业生产长期以来原地不动，未曾发展，只是不断地重复简单再生产。\n针对这一现象，Clifford Geertz 借用了 “内卷化” 的概念，即 “一个既有的形态，由于内部细节过分的精细而使得形态本身获得了刚性”, 以刻画印度尼西亚爪哇地区 “由于农业无法向外延扩展，致使劳动力不断填充到有限的水稻生产” 的过程 。\n著名的经济史学家黄宗智教授在其著作《华北的小农经济与社会变迁》和《长江三角洲小农家庭与乡村发展》中借用了 Clifford Geertz 的概念。\n他在考察明清以降，中国经济发展与社会变迁时指出，当时普遍存在的现象是农民通过在有限的土地上投入大量的劳动力来获得总产量增长的方式，但是这种方式却是边际效益递减的，是一种没有发展的增长，即 “内卷化”。\n按照黄教授的说法，“内卷的要旨在于单位土地上劳动投入的高度密集和单位劳动的边际报酬减少”。\n在《华北的小农经济与社会变迁》一书中，黄教授认为 “内卷化” 有两层含义：\n一是家庭农场因为耕地面积过于狭小，为了维持生活而不得不在劳动力边际回报已经降到极低的情况下继续投入劳力，以期增加小农农场总的产出；\n二是发展不足的经营式农场和小农经济结合在一起，形成的一种特别顽固、难以发生质变的小农经济体系。\n在《长江三角洲小农家庭与乡村发展》中，黄教授指出，即使在长三角当时这样商品经济其实很发达的的地区，商品经济反而促进了 \u0026quot; 小农经济” 的内卷化发展，而非像英国那样 “向资本主义过渡”。\n实际上，黄教授使用这一概念，描绘的是小农经济的顽固性，要回答的问题是：为什么中国小农经济始终没有过渡到资本主义经济，即使有，也始终是 “资本主义萌芽”？\n进而，这一概念要回答的是：\n为什么中国与西方在近代走上了不同的路，即中国继续在传统的小农经济中固守，而欧洲则通过工业革命提高了单位劳动生产率，最终走上了以机器大生产为核心的现代化道路？\n如今，这一概念进一步拓展，延伸到了政治学等领域。例如，学者杜赞奇在其著作《文化、权力与国家 ——1900-1942 年的华北》中提出了 “国家政权内卷化” 概念。\n该书以微观视角对清末新政到日本控制华北这一时间段的华北农村社会进行分析。他阐述了国家政权现代化与乡村社会文化网络互动的议题。\n具言之，清末新政后，在国家内卷化的冲击下，国家政权通过融入乡村文化网络与乡村社会良性互动的控制模式遭到破坏，这种依赖传统文化网络的良性互动遭到破坏后，对乡村造成巨大冲击，国家政权再也无法像 20 世纪之前一样对乡村进行有效控制。\n他实际证明了 20 世纪前期的中国国家政权，如果离开或破坏文化网络以控制乡村社会的企图是注定要失败的。\n因此，杜赞奇利用这一概念实际上是表达：国家机构不是靠提高旧有或新增（此处指人际或其他行政资源）机构的效益，而是靠复制或扩大旧有的国家与社会的关系 —— 如中国旧有的赢利型经纪体制 —— 来扩大其行政职能。\n总体来说，“内卷化” 是一个描述性概念，并非成熟的理论，“内卷化” 出现的原因并未得到进一步解答。\n 参考：\n 何为「内卷化」？有什么通俗易懂的内卷化的例子？   今日总结 "});index.add({'id':1,'href':'/note/docs/study/docs/office/excel/','title':"Excel",'content':"Excel "});index.add({'id':2,'href':'/note/docs/study/docs/office/ppt/','title':"PPT",'content':"PPT "});index.add({'id':3,'href':'/note/docs/study/docs/office/word/','title':"Word",'content':"Word "});index.add({'id':4,'href':'/note/docs/study/docs/storage/imagehost/','title':"图床",'content':"图床 图床选择 GitHub + jsdelivr 上传图床软件 PicGo 参考官网：https://github.com/Molunerfinn/PicGo\nvs-picgo https://github.com/PicGo/vs-picgo\n"});index.add({'id':5,'href':'/note/docs/humanities/movie/others/Merrage-Story/','title':"婚姻故事",'content':"婚姻故事 —— 不容易 豆瓣\n"});index.add({'id':6,'href':'/note/docs/humanities/movie/favorite/','title':"我的最爱",'content':"a\n"});index.add({'id':7,'href':'/note/docs/live/parenting/appendix/tutorial/','title':"教程",'content':"教程 基础 进阶 高阶 "});index.add({'id':8,'href':'/note/docs/study/docs/note/','title':"笔记",'content':"笔记 "});index.add({'id':9,'href':'/note/docs/live/parenting/basic/','title':"第一部分 基础入门",'content':""});index.add({'id':10,'href':'/note/docs/live/parenting/basic/practice/spec/','title':"编程规范",'content':"编程规范 "});index.add({'id':11,'href':'/note/docs/humanities/movie/doubantop250/The-Shawshank-Redemption/','title':"肖申克的救赎",'content':"肖申克的救赎 —— 自由 豆瓣\n"});index.add({'id':12,'href':'/note/docs/study/docs/note/hugo/theme/academic/','title':"hugo-academic",'content':"Academic 配置 写博客 hugo new \u0026ndash;kind post post/my-post\n"});index.add({'id':13,'href':'/note/docs/study/docs/type/markdown/','title':"markdown",'content':"markdown 图片大小设置 \u0026lt;img src=\u0026quot;xxx\u0026quot; width=\u0026quot;30%\u0026quot; height=\u0026quot;30%\u0026quot;\u0026gt;\n"});index.add({'id':14,'href':'/note/docs/live/parenting/appendix/interview/basic/','title':"基础",'content':"基础面试题 "});index.add({'id':15,'href':'/note/docs/live/parenting/design/','title':"第二部分 设计",'content':""});index.add({'id':16,'href':'/note/docs/humanities/movie/doubantop250/','title':"豆瓣电影 Top 250",'content':"a\n"});index.add({'id':17,'href':'/note/docs/live/parenting/appendix/interview/advanced/','title':"进阶",'content':"进阶面试题 "});index.add({'id':18,'href':'/note/docs/study/docs/note/hugo/config/','title':"配置",'content':"Hugo 配置 参考：https://themes.gohugo.io/hugo-book\n"});index.add({'id':19,'href':'/note/docs/live/parenting/appendix/interview/','title':"面试题",'content':"面试题 基础题 进阶题 高阶题 "});index.add({'id':20,'href':'/note/docs/study/docs/note/hugo/theme/hugo-book/','title':"hugo-book",'content':"hugo-book 配置 Site Configuration  点击查看配置详情 ...  # (Optional) Set Google Analytics if you use it to track your website. # Always put it on the top of the configuration file, otherwise it won\u0026#39;t work googleAnalytics = \u0026#34;UA-XXXXXXXXX-X\u0026#34; # (Optional) If you provide a Disqus shortname, comments will be enabled on # all pages. disqusShortname = \u0026#34;my-site\u0026#34; # (Optional) Set this to true if you use capital letters in file names disablePathToLower = true # (Optional) Set this to true to enable \u0026#39;Last Modified by\u0026#39; date and git author # information on \u0026#39;doc\u0026#39; type pages. enableGitInfo = true # (Optional) Theme is intended for documentation use, therefore it doesn\u0026#39;t render taxonomy. # You can remove related files with config below disableKinds = [\u0026#39;taxonomy\u0026#39;, \u0026#39;taxonomyTerm\u0026#39;] [params] # (Optional, default true) Controls table of contents visibility on right side of pages. # Start and end levels can be controlled with markup.tableOfContents setting. # You can also specify this parameter per page in front matter. BookToC = true # (Optional, default none) Set the path to a logo for the book. If the logo is # /static/logo.png then the path would be \u0026#39;logo.png\u0026#39; BookLogo = \u0026#39;logo.png\u0026#39; # (Optional, default none) Set leaf bundle to render as side menu # When not specified file structure and weights will be used BookMenuBundle = \u0026#39;/menu\u0026#39; # (Optional, default docs) Specify section of content to render as menu # You can also set value to \u0026#34;*\u0026#34; to render all sections to menu BookSection = \u0026#39;docs\u0026#39; # Set source repository location. # Used for \u0026#39;Last Modified\u0026#39; and \u0026#39;Edit this page\u0026#39; links. BookRepo = \u0026#39;https://github.com/alex-shpak/hugo-book\u0026#39; # Enable \u0026#39;Edit this page\u0026#39; links for \u0026#39;doc\u0026#39; page type. # Disabled by default. Uncomment to enable. Requires \u0026#39;BookRepo\u0026#39; param. # Path must point to \u0026#39;content\u0026#39; directory of repo. BookEditPath = \u0026#39;edit/master/exampleSite/content\u0026#39; # (Optional, default January 2, 2006) Configure the date format used on the pages # - In git information # - In blog posts BookDateFormat = \u0026#39;Jan 2, 2006\u0026#39; # (Optional, default true) Enables search function with flexsearch, # Index is built on fly, therefore it might slowdown your website. # Configuration for indexing can be adjusted in i18n folder per language. BookSearch = true # (Optional, default true) Enables comments template on pages # By default partals/docs/comments.html includes Disqus template # See https://gohugo.io/content-management/comments/#configure-disqus # Can be overwritten by same param in page frontmatter BookComments = true     Page Configuration  点击查看配置详情 ...  # Set type to \u0026#39;docs\u0026#39; if you want to render page outside of configured section or if you render section other than \u0026#39;docs\u0026#39; type = \u0026#39;docs\u0026#39; # Set page weight to re-arrange items in file-tree menu (if BookMenuBundle not set) weight = 10 # (Optional) Set to mark page as flat section in file-tree menu (if BookMenuBundle not set) bookFlatSection = true # (Optional, Experimental) Set to hide nested sections or pages at that level. Works only with file-tree menu mode bookCollapseSection = true # (Optional) Set true to hide page or section from side menu (if BookMenuBundle not set) bookHidden = true # (Optional) Set \u0026#39;false\u0026#39; to hide ToC from page bookToC = true # (Optional) If you have enabled BookComments for the site, you can disable it for specific pages. bookComments = true      使用 Shortcodes Buttons  Get Home  Contribute   点击查看配置 ...  {{\u0026lt; button relref=\u0026#34;/\u0026#34; \u0026gt;}}Get Home{{\u0026lt; /button \u0026gt;}} {{\u0026lt; button href=\u0026#34;https://github.com/alex-shpak/hugo-book\u0026#34; \u0026gt;}}Contribute{{\u0026lt; /button \u0026gt;}}     Columns Left Content hello hugo book shortcodes  Mid Content hello hugo book  Right Content hello hugo book shortcodes    点击查看配置 ...  {{\u0026lt; columns \u0026gt;}} \u0026lt;!-- begin columns block --\u0026gt; # Left Content Lorem markdownum insigne... \u0026lt;---\u0026gt; \u0026lt;!-- magic sparator, between columns --\u0026gt; # Mid Content Lorem markdownum insigne... \u0026lt;---\u0026gt; \u0026lt;!-- magic sparator, between columns --\u0026gt; # Right Content Lorem markdownum insigne... {{\u0026lt; /columns \u0026gt;}}     Expand  Custom Label ...  Markdown content hello hugo book shortcodes     点击查看配置 ...  {{\u0026lt; expand \u0026#34;Custom Label\u0026#34; \u0026#34;...\u0026#34; \u0026gt;}} ## Markdown content Lorem markdownum insigne... {{\u0026lt; /expand \u0026gt;}}     Hints Markdown content hello hugo book  Markdown content hello hugo book  Markdown content hello hugo book   点击查看配置 ...  {{\u0026lt; hint [info|warning|danger] \u0026gt;}} **Markdown content** hello hugo book {{\u0026lt; /hint \u0026gt;}}     Katex    \\( x = \\begin{cases} a \u0026\\text{if } b \\\\ c \u0026\\text{if } d \\end{cases} \\)   点击查看配置 ...  {{\u0026lt; katex [display] \u0026gt;}} x = \\begin{cases} a \u0026amp;\\text{if } b \\\\ c \u0026amp;\\text{if } d \\end{cases} {{\u0026lt; /katex \u0026gt;}}     Mermaid   sequenceDiagram Alice-Bob: Hello Bob, how are you? alt is sick Bob-Alice: Not so good :( else is well Bob-Alice: Feeling fresh like a daisy end opt Extra response Bob-Alice: Thanks for asking end  点击查看配置 ...  {{\u0026lt; mermaid \u0026gt;}} sequenceDiagram Alice-\u0026gt;\u0026gt;Bob: Hello Bob, how are you? alt is sick Bob-\u0026gt;\u0026gt;Alice: Not so good :( else is well Bob-\u0026gt;\u0026gt;Alice: Feeling fresh like a daisy end opt Extra response Bob-\u0026gt;\u0026gt;Alice: Thanks for asking end {{\u0026lt; /mermaid \u0026gt;}}     Tabs  MacOS MacOS This is tab MacOS content.Linux Linux This is tab Linux content.Windows Windows This is tab Windows content.  点击查看配置 ...  {{\u0026lt; tabs \u0026#34;uniqueid\u0026#34; \u0026gt;}} {{\u0026lt; tab \u0026#34;MacOS\u0026#34; \u0026gt;}} # MacOS Content {{\u0026lt; /tab \u0026gt;}} {{\u0026lt; tab \u0026#34;Linux\u0026#34; \u0026gt;}} # Linux Content {{\u0026lt; /tab \u0026gt;}} {{\u0026lt; tab \u0026#34;Windows\u0026#34; \u0026gt;}} # Windows Content {{\u0026lt; /tab \u0026gt;}} {{\u0026lt; /tabs \u0026gt;}}      参考  https://github.com/alex-shpak/hugo-book  https://themes.gohugo.io/hugo-book   KaTeX/KaTeX  TeX wiki  "});index.add({'id':21,'href':'/note/docs/humanities/movie/imdbtop250/','title':"IMDB 电影 Top 250",'content':"a\n"});index.add({'id':22,'href':'/note/docs/study/docs/note/hugo/theme/','title':"主题",'content':"Hugo 主题 hugo-academic 适合作为个人主页，内容比较丰富，尤其适合作为技术或科研人员的博客。\nhugo-book  适合记笔记，或者写书。我很喜欢他右侧的页面目录，类似语雀。 其实语雀编辑体验很好，尤其是最近改版后允许用户直接在左侧目录操作新增页面。 不使用语雀，而使用 github pages，最关键也可以说唯一的原因就是对其他平台不放心，内容还是自己保管比较好。 不然万一哪天平台下线，只是一个道歉页面，而作为免费用户，只能自己想办法导出笔记，想想还是算了。  参考：https://themes.gohugo.io\n"});index.add({'id':23,'href':'/note/docs/social/history/country/south-korea/president/','title':"总统",'content':"韩国总统 "});index.add({'id':24,'href':'/note/docs/live/parenting/source/','title':"第三部分 源码实现",'content':""});index.add({'id':25,'href':'/note/docs/live/parenting/appendix/interview/expert/','title':"高阶",'content':"高阶面试题 "});index.add({'id':26,'href':'/note/docs/humanities/movie/others/','title':"其他电影",'content':"a\n"});index.add({'id':27,'href':'/note/docs/live/parenting/appendix/','title':"第四部分 附录",'content':""});index.add({'id':28,'href':'/note/docs/study/docs/office/','title':"办公",'content':"办公 "});index.add({'id':29,'href':'/note/docs/live/diary/2020/04/26/','title':"2020-04-26",'content':"2020 年 4 月 26 日（星期日） 备注：\n 法定上班。  今日待办     编程 duedge 基础架构\nhttp Host header 函数式编程 MostlyAdequate/mostly-adequate-guide Mostly adequate guide to FP (in javascript)\n中文版 llh911001/mostly-adequate-guide-chinese 点击阅读\nJavaScript 如何衡量一个人的 JavaScript 水平？\n python 猴子补丁 属性在运行时的动态替换，叫做猴子补丁（Monkey Patch）。\nmonkey patch 即运行时动态改变方法、类的方法。 不管是定义在类外的普通方法、类里面的方法、甚至是模块这些都可以进行 “动态替换的操作”\nclass A: def func(self): print(\u0026#34;Hi\u0026#34;) def monkey(self): print(\u0026#34;Hi, monkey\u0026#34;) a = A() A.func=A.monkey #在运行的时候，才改变了func a.func() def outer_monkey(a): # a 这个参数是没有用到的，因为func有一个参数，如果这个函数没有参数的话不能这样直接赋值 print(\u0026#34;Hi,outer monkey\u0026#34;) a = A() A.func=outer_monkey a.func() 为什么叫猴子补丁 属性的运行时替换和猴子也没什么关系，关于猴子补丁的由来网上查到两种说法：\n  这个词原来为 Guerrilla Patch，杂牌军、游击队，说明这部分不是原装的，在英文里 guerilla 发音和 gorllia (猩猩) 相似，再后来就写了 monkey (猴子)。\n  还有一种解释是说由于这种方式将原来的代码弄乱了 (messing with it)，在英文里叫 monkeying about (顽皮的)，所以叫做 Monkey Patch。\n  猴子补丁的叫法有些莫名其妙，只要和 “模块运行时替换的功能” 对应就行了。\nujson import json import ujson def monkey_patch_json(): json.__name__ = \u0026#39;ujson\u0026#39; json.dumps = ujson.dumps json.loads = ujson.loads monkey_patch_json() 协程 gevent Python 通过 yield 提供了对协程的基本支持，但是不完全。而第三方的 gevent 为 Python 提供了比较完善的协程支持。\ngevent 是第三方库，通过 greenlet 实现协程，其基本思想是：\n当一个 greenlet 遇到 IO 操作时，比如访问网络，就自动切换到其他的 greenlet，等到 IO 操作完成，再在适当的时候切换回来继续执行。由于 IO 操作非常耗时，经常使程序处于等待状态，有了 gevent 为我们自动切换协程，就保证总有 greenlet 在运行，而不是等待 IO。\n由于切换是在 IO 操作时自动完成，所以 gevent 需要修改 Python 自带的一些标准库，这一过程在启动时通过 monkey patch 完成：\nfrom gevent import monkey; monkey.patch_socket() import gevent def f(n): for i in range(n): print gevent.getcurrent(), i g1 = gevent.spawn(f, 5) g2 = gevent.spawn(f, 5) g3 = gevent.spawn(f, 5) g1.join() g2.join() g3.join() 参考：\n Python 猴子补丁 python 面试题精讲 ——monkey patch（猴子补丁）  Java JDK AdoptOpenJDK 清华大学 AdoptOpenJDK\n参考：\n JDK 用哪个版本比较好？  版本 在 2018.9 之前，Oracle JDK 是大家普遍运用于线上的 JDK，OpenJDK 的特性并不完全，并且 Oracle JDK 号称做了很多优化。\n在 2018.9 之后，Oracle JDK 正式商用（开发不收费，但是运行线上业务收费）。 但是与此同时，Oracle 宣布，OpenJDK 与 Oracle JDK 在功能上不会有区别。 并且，OpenJDK 11 RTS 将会由红帽社区进行维护。这样，更加增加了可靠性与保证问题的及时解决。\n我们可以在线上使用 OpenJDK，开发时，使用任意的 JDK。\n对于商业版的 JDK，不同的厂商都将长期维护版本定在 JDK 11/17/23/\u0026hellip;\n对于 OpenJDK，社区说，对于这些版本，至少会提供四年的维护更新时间。 每个长期维护版本都会有一个固定的管理者，对于 OpenJDK11，应该就是红帽社区。\n现在源代码搞定了，但是，我们应该从哪里获取编译好的 OpenJDK 呢？ 这个可以交给 AdoptOpenJDK，它会一直收集不同版本的 OpenJDK 以及全平台的 build 好的 OpenJDK\n\n各版本重大更新内容 从 Java 第一个版本发布到现在，已经有 24 年了，24 年中共发布了 14 个版本，那么，。让我们细数一下各个版本中增加的主要特性有哪些。\nJDK 1.0 第一个版本于 1996 年 1 月 23 日发布，叫做为 Oak。而真正第一个稳定的版本 JDK 1.0.2，被称作 Java 1。\nJDK 1.1  内部类 JDBC JavaBeans  J2SE 1.2  Java 集合框架 Swing 图像化 API JIT 编译器  J2SE 1.3  HotSpot JVM JNDI JPDA 用于实现动态代理的类  J2SE 1.4  assert 关键字 异常链 NIO  J2SE 5.0  泛型 元数据 自动封箱、自动拆箱 枚举 可变参数函数 强化 for each 循环 Swing java.util.concurrent 包  Java SE 6  支持 JDBC 4.0  Java SE 7  在 switch 中使用字符串类型 try-with-resources 新的 invokedynamic 字节码指令 允许在数值字面值中加入下划线  Java SE 8  Lambda 表达式 Nashorn 移除了虚拟机内存管理中的永久代 新的日期和时间 API  Java SE 9  Jigsaw 项目中将 JDK 模块化 jshell jlink  Java SE 10  局部变量类型推断 适用于 G1 的多线程完全垃圾回收  Java SE 11  ZGC Epsilon  Java SE 12  Shenandoah Switch 表达式（预览）  Java SE 13  Text Blocks（预览阶段） 动态 CDS 归档  Java SE 14  Records Switch 表达式 友好的空指针异常 打包工具   Java 工具 各种常用工具，建议升级到如下版本以后：\n IntelliJ IDEA: 2018.2 Eclipse: Photon 4.9RC2 with Java 11 plugin Maven: 3.5.0 Maven compiler plugin: 3.8.0 surefire and failsafe: 2.22.0 Gradle: 5.0  对于如下工具，由于已经不再维护，需要替换成其他工具：\n FindBugs（静态代码 bug 发现）： 用 SpotBugs 替换。 Cobertura（代码测试覆盖率）：用 Jacoco 替换  参考：\n 从 JDK8 升级到 JDK11，看这篇就足够了   语言 tutorial vs guide A tutorial is a step-by-step walk-through for someone with no experience. A guide gives basic information, not detailed instruction. Think \u0026ldquo;pointers\u0026rdquo;. Particularly for computers, a how-to is more of a list of detailed steps for particular operations.\n参考：\n Differences between “tutorial”, “guide” and “how-to”  "});index.add({'id':30,'href':'/note/docs/live/diary/2020/04/25/','title':"2020-04-25",'content':"2020 年 4 月 25 日（星期六） 今日待办     编程 git submodule git submodule add -b 参考：\n How can I specify a branch/tag when adding a Git submodule?  submodule 修改 url  edit the .gitmodules file to update the URL git submodule sync  参考： How to change the remote repository for a git submodule?\ndelete submodule  Delete the relevant section from the .gitmodules file. Stage the .gitmodules changes git add .gitmodules Delete the relevant section from .git/config. Run git rm \u0026ndash;cached path_to_submodule (no trailing slash). Run rm -rf .git/modules/path_to_submodule (no trailing slash). Commit git commit -m \u0026ldquo;Removed submodule \u0026quot; Delete the now untracked submodule files rm -rf path_to_submodule  "});index.add({'id':31,'href':'/note/docs/live/diary/2020/04/24/','title':"2020-04-24",'content':"2020 年 4 月 24 日（星期五） 今日待办     编程 github comment Review Comments Commit Comments Issue Comments  OAM (Open Application Model) OAM 是阿里巴巴和微软共同开源的云原生应用规范模型\n2019 年 10 月宣布开源，同时开源了基于 OAM 的实现 Rudr。\nRudr A Kubernetes implementation of the Open Application Model specification https://oam.dev\nOpenTelemetry Specifications for OpenTelemetry https://opentelemetry.io\n参考：\n OAM（开放应用模型）—— 定义云原生应用标准的野望   Kubernetes CRI（Container Runtime Interface） 容器运行时接口，提供计算资源\nCNI（Container Network Interface） 容器网络接口，提供网络资源\nCSI（Container Storage Interface） 容器存储接口，提供存储资源\n Dapr Dapr is a portable, serverless, event-driven runtime that makes it easy for developers to build resilient, stateless and stateful microservices that run on the cloud and edge and embraces the diversity of languages and developer frameworks.\nDapr vs Istio  Dapr is a distributed application runtime. Unlike a service mesh which is focused on networking concerns, Dapr is focused on providing building blocks that make it easier for developers to build microservices. Dapr is developer-centric versus service meshes being infrastructure-centric. Istio is not a programming model and does not focus on application level features such as state management, pub-sub, bindings etc. That is where Dapr comes in.  SMI (Service Mesh Interface) SMI is an abstraction layer that provides a common API surface across different service mesh technology.\nDapr can leverage any service mesh technology including SMI.\n参考： What’s the difference between Dapr and Istio?\n Actor 模型 Virtual Actors 当你在上层编程的时候，你可以永远假设和你通讯的 Actor 是活着的，这对于大大简化应用层的逻辑，不言而喻。\nakka/akka Build highly concurrent, distributed, and resilient message-driven applications on the JVM https://akka.io\nAsynkronIT/protoactor-go Proto Actor - Ultra fast distributed actors for Go, C# and Java/Kotlin http://proto.actor\ndotnet/orleans Orleans is a cross-platform framework for building distributed applications with .NET\nhttp://dotnet.github.io/orleans\n参考：\n 如何评价微软的 orleans 框架？ 什么是 Actor? 为什么我觉得 Actor 很难用？   Baetyl  算法 KMP 参考：\n 如何更好地理解和掌握 KMP 算法？ KMP 算法详解 Knuth-Morris-Pratt algorithm  KMP：花 48 小时看懂了 KMP，想让你在 48 分钟内看懂    会议  经济 ROI abbr. 投资回收率（return on investment）；利润率（Rate of Interest）\n"});index.add({'id':32,'href':'/note/docs/live/diary/2020/05/','title':"5 月",'content':"2020 年 5 月 本月计划  百度月读帮  《人人都是产品经理 2.0》 2020.5.1 - 6.14 《卓有成效的管理者》 2020.6.15 - 7.26 《201 principles of software development》 2020.7.27 - 9.6    "});index.add({'id':33,'href':'/note/docs/social/history/country/','title':"国家",'content':"国家 "});index.add({'id':34,'href':'/note/docs/social/history/country/south-korea/','title':"韩国",'content':"韩国 "});index.add({'id':35,'href':'/note/docs/live/diary/2020/04/23/','title':"2020-04-23",'content':"2020 年 4 月 23 日（星期四） 今日待办     编程 边缘计算  物联网关类，用 edgex 容器场景  it 类应用多的，rancher/k3s ct 类应用多的 kubeedge   starlingx 适合继承 openstack 的，又有容器要求的边缘场景  "});index.add({'id':36,'href':'/note/docs/live/diary/2020/04/','title':"4 月",'content':"2020 年 4 月 本月计划     本月总结 "});index.add({'id':37,'href':'/note/docs/study/docs/type/pdf/','title':"pdf",'content':"pdf "});index.add({'id':38,'href':'/note/docs/live/diary/2020/04/22/','title':"2020-04-22",'content':"2020 年 4 月 22 日（星期三） 今日待办     编程 DCDN "});index.add({'id':39,'href':'/note/docs/live/diary/2020/03/','title':"3 月",'content':"2020 年 3 月 本月计划  Istio Handbook 开源电子书  Istio Handbook 编委会  会议（周五 2020-03-13 20:00-21:00）  Kickoff 文档 合作编辑 Handbook 目录       AI2B 研发   本月总结 "});index.add({'id':40,'href':'/note/docs/study/book/','title':"4.1 读书",'content':"读书 "});index.add({'id':41,'href':'/note/docs/live/diary/','title':"5.1 日记",'content':"叶王日记 "});index.add({'id':42,'href':'/note/docs/study/docs/note/codelabs/','title':"Codelabs",'content':"Codelabs 简介 Google Developers Codelabs 中国内地访问 clmirror.storage.googleapis.com\n Hello Istio Codelab(with Google Kubernetes Engine)  googlecodelabs/tools Codelabs management \u0026amp; hosting tools\n"});index.add({'id':43,'href':'/note/docs/study/docs/type/epub/','title':"epub",'content':"epub "});index.add({'id':44,'href':'/note/docs/study/docs/note/hugo/','title':"Hugo",'content':"Hugo 快速上手 简介 参考官网：https://gohugo.io\n"});index.add({'id':45,'href':'/note/docs/humanities/language/chinese/','title':"中文",'content':"中文 "});index.add({'id':46,'href':'/note/docs/study/docs/draw/','title':"作图",'content':"作图 "});index.add({'id':47,'href':'/note/docs/study/degree/masters-degree/on-job-postgraduate/','title':"在职硕士",'content':"在职硕士 非全日制硕士 流程  参加 12 月统考 完成学业、修满学分 论文答辩，拿到硕士学历证书与硕士学位证书   同等学力申硕 流程  直接入学 参加课程研修班，通过考试，拿到结业证书 参加五月同等学力申硕 论文答辩，拿到硕士学位证书  课程研修班 根据国务院学位委员会、教育部（2013）36 号文件，自 2014 年起，原 \u0026ldquo;在职研究生班\u0026rdquo; 更名为 \u0026ldquo;课程研修班\u0026rdquo;，在职人员申请硕士学位流程及要求不变\n"});index.add({'id':48,'href':'/note/docs/live/parenting/basic/practice/','title':"实践",'content':"实践 "});index.add({'id':49,'href':'/note/docs/study/domain/operate/tutorial/','title':"教程",'content':"教程 书籍 有哪些互联网运营方面的书值得推荐？\n"});index.add({'id':50,'href':'/note/docs/study/book/natural/math/','title':"数学",'content':"数学 见 计算机读书笔记\n"});index.add({'id':51,'href':'/note/docs/study/docs/type/','title':"文档类型",'content':"文档类型 "});index.add({'id':52,'href':'/note/docs/natural/','title':"第一部分 自然科学",'content':"自然科学 "});index.add({'id':53,'href':'/note/docs/study/book/natural/','title':"自然科学",'content':"自然科学 "});index.add({'id':54,'href':'/note/docs/study/course/natural/','title':"自然科学",'content':"自然科学 "});index.add({'id':55,'href':'/note/docs/study/book/natural/cs/','title':"计算机科学",'content':"计算机科学 见 计算机读书笔记\n"});index.add({'id':56,'href':'/note/docs/study/course/natural/cs/','title':"计算机科学",'content':"计算机科学 见 计算机读书笔记\n"});index.add({'id':57,'href':'/note/docs/live/diary/2020/04/21/','title':"2020-04-21",'content':"2020 年 4 月 21 日（星期二） 今日待办     编程 EdgeGallery EdgeGallery 是什么？ EdgeGallery 是华为联合运营商，垂直行业伙伴发起的一个 MEC 边缘计算开源项目。目的是打造一个符合电信产业 “联接 + 计算” 特点的边缘计算公共平台，实现网络能力（尤其是 5G 网络）开放的标准化和 MEC 应用开发、测试、迁移和运行等生命周期流程的通用化。\nEdgeGallery 可以作为 Akraino 的上游项目，在 Akraino 里面可以立项新的面向 5G MEC 的 BP，把 EdgeGallery 作为 MEC 的 PaaS 层，然后集成其他的组件，比如 OpenStack、K8S、ONAP 等来形成一个完成的解决方案堆栈。\nEdgeGallery 要解决什么问题？ EdgeGallery 要解决的是运营商 MEC 边缘计算平台的标准不统一带来的生态碎片化，产业规模做不大的问题。\nMEC 是 5G 时代运营商新的蓝海市场，通过 MEC 平台，运营商可以把 “联接 + 计算” 的能力开放给行业应用，获取行业数字化的价值红利。\nMEC 本质上是一个面向开发者的 ICT 基础设施市场，竞争力体现在为应用开发者提供的软件基础平台和工具链的丰富程度，市场结果体现在应用生态的丰富程度。\n运营商对软件平台的研发传统模式是采用联合 ISV 进行定制开发的模式，如果 MEC 平台也采用传统模式，自然会导致不同运营商的 MEC 平台接口不一致，工具链不兼容。全球运营商很多，每个运营商都是区域化运营，这就自然的形成很多碎片化市场。\n应用和解决方案往往需要针对不同平台进行应用的定制开发，这导致巨大的学习成本和开发成本，结果就是大部分开发者无法承受这样的成本而放弃，或者转到公有云的平台上。\n华为联合运营商一起，通过开源来打造一个公共的 MEC 平台和相关工具链，就是为了让整个电信产业形成统一的 MEC 标准，一起做大 MEC 的市场空间。\nEdgeGallery 的使命愿景是什么？ EdgeGallery 社区聚焦在运营商网络边缘 MEC 平台框架，通过开源协作构建起 MEC 边缘的资源、应用、安全、管理的基础框架和网络开放服务的事实标准，并实现同公有云的互联互通。在兼容边缘基础设施异构差异化的基础上，构建起统一的 MEC 应用生态系统。\nETSI MEC ISG ETSI MEC ISG 定义了 MEC 的概念、术语、参考架构和一些基本服务的 API，但是 ETSI 的相关标准是文档，不是具体的实现，也不会规定具体的软件架构和模块实现。另外 ETSI 的标准也是处于不断更新的过程中。\nEdgeGallery 是 ETSI MEC 的参考实现，EdgeGallery 在实现相关功能和 API 的过程中，会充分参考和借鉴 ETSI 的相关定义和标准。同时 EdgeGallery 也会根据实践过程中的场景需求，灵活调整和优化相关标准，并通过实践来验证这些修改。相关的修改会反过来提交到 ETSI 标准组织，促进 ETSI 标准的优化和成熟。\n参考：\n EdgeGallery 社区   LF Edge LF Edge 的 5 个项目包括\n Akraino Edge Stack EdgeX Foundry Open Glossary of Edge Computing Home Edge EVE  其中 Akraino Edge Stack，EdgeX Foundry 和 Open Glossary of Edge Computing 以前都是 Linux 基金会的独立项目。\nHome Edge 项目是由三星电子提供的一个新项目，该项目将为了收集智能家居设备的实时数据而创建的平台。ZEDEDA 提供了 EVE，一种新的硬件无关的边缘应用框架。\nAkraino Edge Stack Akraino Edge Stack 是一个 Linux 基金会项目，支持针对边缘计算系统和应用程序优化的高可用性云服务。\nEdgeX Foundry EdgeX Foundry 用一句话来介绍，就是 Linux 基金会下的硬件和操作系统无关的开源中立的边缘计算微服务框架，用于统一工业物联网边缘计算解决方案的生态系统。\n 深圳 5G 实验网 CAICT 中国信通院\n实验网\n 独立的承载网与核心网 共享基站  骨干实验网 端到端 100G\n覆盖 8 个城市\n"});index.add({'id':58,'href':'/note/docs/study/docs/type/mobi/','title':"mobi",'content':"mobi mobi vs azw3 "});index.add({'id':59,'href':'/note/docs/live/diary/2020/04/20/','title':"2020-04-20",'content':"2020 年 4 月 20 日（星期一） 今日待办     编程 TSN 时间敏感网络 参考：\n 实时物联网 RT-IoT 终于有了自己的专属通讯网络 TSN！ 下一代工业通信 —TSN（时间敏感网络），工业物联网的助推器  cloudvr， tsn，物联网\n5G 的大带宽，低时延，广连接\nCloud Native 云原生 什么是云原生 2018 年 CNCF 更新了云原生的定义。\n这是新定义中描述的代表技术，其中容器和微服务两项在不同时期的不同定义中都有出现，\n而服务网格这个在 2017 年才开始被社区接纳的新热点技术被非常醒目的列出来，和微服务并列，而不是我们通常认为的服务网格只是微服务在实施时的一种新的方式。\nCloud Native 翻译为云原生，是 Matt Stine 提出的一个概念，它是一个思想的集合，\n包括 DevOps、 持续交付（Continuous Delivery）、微服务（MicroServices）、敏捷基础设施（Agile Infrastructure）、康威定律（Conways Law）等，以及根据商业能力对公司进行重组。\nCloud Native 既包含\n 技术（微服务，敏捷基础设施）， 也包含管理（DevOps，持续交付，康威定律，重组等）。  Cloud Native 也可以说是一系列 Cloud 技术、企业管理方法的集合。\n参考：\n CNCF Cloud Native Definition v1.0  云原生代表技术 云原生的代表技术包括容器、服务网格、微服务、不可变基础设施和声明式 API。\n不可变基础设施 在传统的可变服务器基础架构中，服务器会不断更新和修改。\n使用此类基础架构的工程师和管理员可以通过 SSH 连接到他们的服务器，手动升级或降级软件包，逐个服务器地调整配置文件，以及将新代码直接部署到现有服务器上。\n换句话说，这些服务器是可变的；它们可以在创建后进行更改。\n不可变基础架构的好处包括基础架构中更高的一致性和可靠性，以及更简单，更可预测的部署过程。\n它可以缓解或完全防止可变基础架构中常见的问题，例如配置漂移和雪花服务器。\n宠物与牛群 pets 是独一无二，无法模仿，失去一个可能是毁灭性的。\n牛群中的众多群体中没有一个人是独一无二或不可或缺的。\n雪花服务器与凤凰服务器 snowflakes 服务器类似于宠物。它们是手工管理的服务器，经常更新和调整到位，从而形成独特的环境。\nPhoenix 服务器与牛类似。它们是始终从头开始构建的服务器，并且易于通过自动化过程重新创建（或 “从灰烬中升起”）。\n参考：\n 什么是不可变的基础设施？  Tutum tutum (now Docker)\n参考：\n 如何更好地使用容器技术实现不可变基础设施   云原生应用 理想的云原生应用应该是这个样子：业务需求的实现占主体，只有少量的非业务需求相关的功能。\n参考：\n 未来已来：云原生 Cloud Native  梳理后端架构演化史，回顾后端架构发展历程； 回顾云服务发展历程，探讨云原生概念； 梳理云原生实现方案 Service Mesh 的发展历程； 介绍 Service Mesh 的代表 Istio 的亮眼功能；   畅谈云原生（上）：云原生应用应该是什么样子？ 云原生与无服务器架构是云计算的未来吗？—— 云计算的演进   Service Mesh vs Serverless Service Mesh 技术和 Serverless 技术是工作在不同纬度的两个技术：\n Service Mesh 技术的关注点在于服务间通讯，其目标是剥离客户端 SDK，为应用减负，提供的能力主要包括安全性、路由、策略执行、流量管理等。 Serverless 技术的关注点在于服务运维，目标是客户无需关注服务运维，提供服务实例的自动伸缩，以及按照实际使用付费。  理论上 Service Mesh 技术和 Serverless 技术并没有冲突的地方，可以结合使用。事实上目前业界也开始出现这个趋势，而融合的方式有两种：\n在 Serverless 中引入 Service Mesh 典型如 Knative 项目和 Knative 的 Google Cloud 托管版本 Google Cloud Run，通过引入对容器的支持和使用 Istio，Knative 将 Serverless 的支持扩展到 Function 之外，在极大的扩展 Serverless 适用范围的前提下，也将服务间通讯的能力引入到 Serverless。\n在 Service Mesh 中引入 Serverless 典型如 Google Traffic Director 产品，在提供 Service Mesh 各种能力的同时，支持按照流量自动伸缩服务的实例数量，从而融入了部分 Serverless 的特性。\n对于 Serverless 和 Service Mesh 的结合，我们展望未来形态：\n未来应该会出现一种新型服务模式，Serverless 和 Service Mesh 合二为一。只要将服务部署上来，就自动可以得到 Service Mesh 的服务间通讯能力和 Serverless 的无服务器运维。\nService Mesh 发展趋势：云原生中流砥柱（下）\n Netflix OSS Netflix OSS 是一组框架和库，Netflix 为大规模解决一些有趣的分布式系统问题而编写的。\n今天，对于 Java 开发人员来说，它非常适合云环境中开发微服务。\n服务发现、负载平衡、容错等模式对于可扩展的分布式系统来说是非常重要的概念，Netflix 为此提供了很好的解决方案。\n参考：\n Spring Cloud、K8S、Netflix OSS 三者啥关系？   康威定律 康威定律 (康威法则，Conway\u0026rsquo;s Law) 是马尔文・康威 1967 年提出的： \u0026ldquo;设计系统的架构受制于产生这些设计的组织的沟通结构。\u0026rdquo;\n即系统设计本质上反映了企业的组织机构。\n系统各个模块间的接口也反映了企业各个部门之间的信息流动和合作方式。\n康威的原文中提出的各定律：\n 第一定律 组织沟通方式会通过系统设计表达出来 第二定律 时间再多一件事情也不可能做的完美，但总有时间做完一件事情 第三定律 线型系统和线型组织架构间有潜在的异质同态特性 第四定律 大的系统组织总是比小系统更倾向于分解  参考：\n 每个架构师都应该研究下康威定律  "});index.add({'id':60,'href':'/note/docs/study/docs/type/azw3/','title':"azw3",'content':"azw3 azw3 vs azw "});index.add({'id':61,'href':'/note/docs/live/diary/2020/04/19/','title':"2020-04-19",'content':"2020 年 4 月 19 日（星期日） 今日待办     编程 github 周报 开发 probot https://github.com/probot/probot\nweekly-digest https://github.com/probot/weekly-digest\nrepo-report octokit github rest api 库\n参考文档  octokit docs github api docs  github api 限制 老是出现错误\nconnect ECONNREFUSED 13.250.168.23:443\n javascript // print object str = JSON.stringify(obj) console.log(`obj ============== : ${str}`) 根据给的周几的字符串（前缀就行），获取第几天\nfunction getNumDayFromLongDay(day) { if (typeof day === \u0026#34;number\u0026#34; \u0026amp;\u0026amp; day \u0026gt;= 0 \u0026amp;\u0026amp; day \u0026lt; 7) { return day; } else { const longDay = [ \u0026#34;sunday\u0026#34;, \u0026#34;monday\u0026#34;, \u0026#34;tuesday\u0026#34;, \u0026#34;wednesday\u0026#34;, \u0026#34;thursday\u0026#34;, \u0026#34;friday\u0026#34;, \u0026#34;saturday\u0026#34;, ]; for (let i = 0; i \u0026lt; 7; i++) { if (longDay[i].includes(String(day).toLowerCase())) { return i; } } } return undefined; } "});index.add({'id':62,'href':'/note/docs/live/diary/2020/04/17/','title':"2020-04-17",'content':"2020 年 4 月 17 日（星期五） 今日待办     编程 TSF (Tencent Service Framework) 腾讯微服务平台\nTSF Serverless Serverless 微服务平台\nTSF Mesh Mesh 微服务平台\n 互联网巨头常用词汇 腾讯 精品、微创新、正能量、打法、发力、精细化、闭环、布局、商业模式、联动、泛娱乐、场景、痛点、减法、落地、聚焦、我们查下、跟进、不忘初心、方法论、迭代、快速响应、影响力、全栈、价值、细分、大数据、垂直领域、维度、颗粒、定性定量、聚焦、去中心化、关键路径、干货、接地气、梳理、输出、格局、生态、沉淀、结果导向、套路、用户体验、眼界、话术、体系、对齐、同步、认知、分享、面交、去中心化、勾兑、流程、感知度、赞、加速、用户画像、打磨、摸索、提炼、玩法、反哺、阈值。\n阿里巴巴 价值观、颠覆、拥抱、改变、相信、基础设施、电子商务生态系统、企业社会责任、造福社会、理想主义、阿里云、技术、第五大经济体、促进进口、阿里人、野心、鲶鱼、DT 战略、全球化、营业额、改变世界、团队精神、知识产权、打假、情怀、挣一块钱、脱贫、平台公益、利益共同体、生态化发展、引爆消费力、农村经济、赋能、把控能力、专业化人才、战略踩空、无人区、练兵场、倒逼、互联网下半场。\n百度 人工智能、无人驾驶、交互、刷脸、车、永久免费、更懂你、革新、迎接、技术创新、梦想、生态链、未来已来、智能营销、降维攻击、转变、可能性、搜索场景、AI 思维、洞察、开放能力、深度学习、人脸识别、万物互联、数字化、风口、精准识别、云端仿真、共享、感知、海量数据、赋能、开发者。\n今日头条 独立发展、不上市、连接、用户体验、粉丝分发、跨越式机遇、新责任、未来、用户需求、概念推导、内容生态、国际化、体量、创作者、规模效应、平台属性、数字经济、估值、融资、智能社交、超级内容平台、颗粒度、价值创造、视频化、增长点、出海、流量红利、产品渗透率、拥抱 AI、模式重构、信息分发、人工智能实验室、算法、技术、数据挖掘、趋势、变革、内容创业、涨粉、赚钱、自媒体人、用户、创作者、构建、打击低俗信息、覆盖、粘性、精准、内容分发、产品体验、反馈、平台级公司、回馈、版权保护。\n网易 猪厂、养猪、一日五餐、考拉上新货了、严选上新货了、代购、我们公司自己做的、我们公司自己养的、我们公司自己卖的、创新、品味、精品、工匠精神、匠心、新消费、泛中产、生活家、正品、世界级品质、用户体验、模式创新、中国智造、美好生活、丁磊同款、非典型、网易特色、走心、有毒营销、IP 营销、戏精、扎心、套路、竞争壁垒、差异化、价值、公益、企业家精神、有态度、各有态度、好的老板、广告公司、段子手、又双叒震荡了、工资回收计划、丁爸爸喊你 XXX。\n京东 电商、亏损、商品流通、综合零售、物流网、供应链、智能商业体、技术转型、短链、成本管控、正道成功、世界 500 强、B2C、智慧化、重构、产业链、共生、品牌附加值、白条、无人仓、无界零售、一体化、倒三角战略、一体化、整合、流量端、竞争求异、盟国思维、赋能、O2O、云端服务、一锤子买卖、终端、库房、产业价值、最后一公里。\n滴滴出行 小桔人、合理定价、用户价值、我要打车、神器、美好出行、智能派单、服务、足迹、系安全带、车主和司机、线上、打破价格僵局、尊享五星级出行服务、平台、智能交通、全球领先、随叫随到、将你安全带向爱、网约车、竞争壁垒、创新、包容性、出租车产业转型升级、私家车保有量、挑战、共享汽车、大数据。\n参考：\n 腾讯阿里等互联网巨头常用词汇，泄露了哪些商业机密？   产品经理必知词汇 UCD User Centered Design\n是一种设计思维、模式，指以用户为中心的设计。\n在设计过程中以用户体验为设计决策的中心，强调用户优先的设计模式。\n先不要考虑盈利，先让用户用的爽再说。\nAIOT 智联网 (AIOT，是 AI + IOT 物联网的结合) 2018 年开始崛起，核心是能够运用大量传感设备，综合语音、视觉、动作、温度等数据，实现 IOT 设备的全自然化的人机交互。\n物联网喊了好多年；体验提升太有限；如今终于有突破；人机交互成关键。\nAM 敏捷开发 agile management\n以用户的需求进化为核心，采用迭代、循序渐进的方法进行软件开发。在敏捷开发中，软件项目在构建初期被切分成多个子项目，各个子项目的成果都经过测试，具备可视、可集成和可运行使用的特征。换言之，就是把一个大项目分为多个相互联系，但也可独立运行的小项目，并分别完成，在此过程中软件一直处于可使用状态。\nPLC Product Life Cycle\n产品生命周期，即一种新产品从开始进入市场到被市场淘汰的整个过程。\n这个过程其实就是经历了一个从 “启动、成长、成熟一直到衰退” 的阶段。\n一个产品四阶段；阶段策略各不同；快速验证和开发；尽力延长成熟期。\n可用性测试 让一群具有代表性的用户对产品进行典型操作，同时观察员和开发人员在一旁观察，聆听，做记录。\n观察用户使用产品。\n商业闭环 商业闭环是围绕着顾客一系列关联性消费需求，逐一提供相应的产品予以满足的商业模式。\n主要在商业体系中营造循环圈，各个环节都可以相互依靠，既可以作为个体支撑点也可以协同合作。\n互联网上半场 / 下半场 互联网上半场即消费互联网时代，注重的是入口和流量，线上打造；\n而下半场即产业互联网时代，注重的是服务和价值，线上线下充分融合。\n用户任务的闭环 指的是一系列帮助用户完成任务的环节，这些环节可以应对任务可能出现的各种情况。\n就是用户做一件事情要能做完。\n参考：\n 产品经理必知词汇   "});index.add({'id':63,'href':'/note/docs/live/diary/2020/04/15/','title':"2020-04-15",'content':"2020 年 4 月 15 日（星期三） 今日待办     编程 Service Mesh 南北流量 vs 东西流量 南北流量（NORTH-SOUTH traffic）\n东西流量（EAST-WEST traffic）\n在云计算和 SDN 下，我们经常听到流量的东西南北向概念，简单来说从外部 Internet 等到数据中心内部的流量走向被称为南北流量，数据中心内部的 VM 之间的流量被称为东西流量。\n南北流量：client - server\n东西流量：server 之间\n智慧城市  平安城市是一个综合性的安防系统，包含子系统较多； 天网工程和雪亮工程偏向于视频监控系统。  三者都是分级建设，平安城市和天网工程主要利用政府资源，而雪亮工程鼓励警民结合、资源互补。\n按工程的建设规模排序，平安城市 ＞ 天网工程 ＞ 雪亮工程。\n平安城市 平安城市就是通过三防系统（技防系统、物防系统、人防系统）建设城市的平安和谐。它是一个特大型、综合性非常强的管理系统，不仅需要满足治安管理、城市管理、交通管理、应急指挥等需求，而且还要兼顾灾难事故预警、安全生产监控等方面对图像监控的需求，同时还要考虑各系统之间的联动。\n天网工程 天网工程是指为满足城市治安防控和城市管理需要，利用图像采集、传输、控制、显示等设备和控制软件组成，对固定区域进行实时监控和信息记录的视频监控系统。天网工程整体按照部级 - 省厅级 - 市县级平台架构部署实施，具有良好的拓展性与融合性。\n雪亮工程 雪亮工程是以县、乡、村三级综治中心为指挥平台、以综治信息化为支撑、以网格化管理为基础、以公共安全视频监控联网应用为重点的 “群众性治安防控工程”。它通过三级综治中心建设把治安防范措施延伸到群众身边，发动社会力量和广大群众共同监看视频监控，共同参与治安防范，从而真正实现治安防控 “全覆盖、无死角”。\n从平安城市到智慧城市 平安城市是现代城市信息化建设的第一步，随着物联网技术的发展，平安城市在未来会进一步在物联网的基础上向数字城市、智慧城市发展。\n在不久前召开的北京安防技术应用论坛上，就探讨了平安城市建设与物联网技术应用。平安城市将从传统安防到平安城市大安防体系、数字城市、智慧城市方向发展。展望未来，平安城市将与城市应急、水体与气体检测、垃圾处理等，数字城管、智能建筑、工业与自动化控制、城市一卡通等各个方面涵盖，届时，将全面服务居民的生活。\n平安城市与数字城市、智慧城市和感知中国随着技术不断发展，不断向前发展的城市管理模式，所涵盖技术各不相同，所使用目的也各不相同，但其重要部分视频监控技术都在发挥重要作用。\n从功能上区分，平安城市的主体就是利用现代信息通信技术，构建城市综合预警系统和应急指挥体系，达到指挥统一、反应及时、作战有效的目的。实现对城市的有效管理和打击违法犯罪，加强中国城市安全防范能力，加快城市安全系统建设，建设平安城市和谐社会。\n数字城市作为一个城市发展的战略目标，它主要是以计算机技术、多媒体技术和大规模存储技术为基础，利用信息技术手段把城市的过去、现状和未来的全部内容在网络上进行数字化虚拟实现。数字城市的建设涉及城市建设、规划、运行、管理、服务等各个方面，包括政府、交通、医疗、消防等等。\n智慧城市是未来城市发展演进的必然趋势，不管是绿色城市，环保城市等等，智慧城市的加强是顺应当前全球技术变革及新一轮产业发展的时代潮流。每一个城市都要充分发挥信息技术带给他的优势，来建设好这个城市。所以，信息资源应该成为建设社会的重要要素，信息世界与物理世界的融合已经成为城市的支撑。\ndocker 上传到 私有仓库 docker build -t human-attribute:20200415_1585818439123 . docker tag human-attribute:20200415_1585818439123 ote-harbor.baidu.com/aiedge/human-attribute:20200415_1585818439123 docker push ote-harbor.baidu.com/aiedge/human-attribute:20200415_1585818439123  书影音 电影  语言文化  数学  政经法史地  物化生  娱乐 游戏  生活  今日总结 "});index.add({'id':64,'href':'/note/docs/live/diary/2020/04/14/','title':"2020-04-14",'content':"2020 年 4 月 14 日（星期二） 今日待办     编程 豆瓣 API 文档 zce/douban-api-docs  书影音 电影  语言文化 英文 basic vs basis basic: 以什么为基础，进行再加工创造\nbasic: 基础内容\nBasis = foundation of something. The basis of multiplication is serial addition, for example.\nBasics = the core concepts. Multiplication tables are part of the basics because understanding them allows students to do higher order arithmetic much more efficiently.\nSo no, they are really not interchangeable. You might use a paragraph from a book as the basis for your thesis because your thesis builds upon that paragraph. Whereas you might say, \u0026ldquo;The English alphabet and punctuation are the basics you should learn in your first language lesson.\u0026rdquo;\n参考：\n What is the difference between basicand basis?   数学  政经法史地  物化生  娱乐 游戏  生活  今日总结 "});index.add({'id':65,'href':'/note/docs/live/diary/2020/04/13/','title':"2020-04-13",'content':"2020 年 4 月 13 日（星期一） 今日待办     编程 Git Git submodule merge vs squash vs rebase merge 不能保持 master 分支干净，但是保持了所有的 commit history，大多数情况下都是不好的，个别情况挺好 squash 也可以保持 master 分支干净，但是 master 中 author 都是 maintainer，而不是原 owner rebase 可以尽可能保持 master 分支干净整洁，并且易于识别 author\nsquash merge # 切换到目标分支 $ git checkout master # 以 squash 的形式 merge $ git merge --squash devel # it does not produce a commit right away: you need an additional commit $ git commit -m \u0026#34;squash branch\u0026#34;  你会发现，在 master 分支上居然有未提交的修改，然后你就需要在 master 上主动提交了修改， 注意，这里是你 commit 的，也就是改变了 commit 的 author。 git merge has a \u0026ndash;commit option, but it cannot be used with \u0026ndash;squash. It was never possible to use \u0026ndash;commit and \u0026ndash;squash together.  参考：\n In git, what is the difference between merge \u0026ndash;squash and rebase?  rebase merge # 先切换到 devel 分支（不一样咯） $ git checkout devel # 变基 $ git rebase -i master # 切换回目标分支 $ git checkout master # 合并 $ git merge  我们在 devel 里面对照 master 进行了变基  所谓的变基其实就是找到两个分支共同的祖先   然后在当前分支上合并从共同祖先到现在的所有 commit  会选择怎么处理这些 commit   然后我们就得到了一个从公共 commit 到现在的单个 commit 这个时候别人将我们这个 commit 合并到 master 也只会在 master 上留下一个 commit 记录  合并 git commit 参考：\n Trimming Git Commits/Squashing Git History   CDN CDN：Content Delivery Network 内容分发网络\nCDN 的基本思路  尽可能避开互联网上有可能影响数据传输速度和稳定性的瓶颈和环节， 使内容传输的更快、更稳定。 它是通过网络各处放置节点服务器所构成的现有互联网基础之上的一层智能虚拟网 CDN 实时根据网络流量以及各节点的连接、负载状况以及到用户的距离和响应时间等综合信息 重新导向用户的请求到最近的服务节点上  CDN 解决的问题  解决高流量、大并发 解决南北互联问题 访问加速（CDN 有缓存技术） 降低运营成本（源站放在 BGP 机房，缓存服务器放在费用较低的地方） 提高网站的可用性 防 DDoS（因为攻击被分配到了不同的物理服务器  CDN 的组成部分  源站 缓存服务器（核心缓存服务器 + 边缘缓存服务器） 智能 DNS（核心）：根据用户的来源，重新导向到较近 / 合适的缓存服务器 客户端  APM Application Performance Management\nNew Relic\nUptime is everything\nObservability is critical for today’s business infrastructure\nGMV GMV：Gross Merchandise Volume，是成交总额（一定时间段内）的意思。多用于电商行业，一般包含拍下未支付订单金额。\n 算法 乘积最大的数组平分方式 一个长度为 N 的数组（N 一定为偶数个），将其平均分成两部分，找出能够使这两部分的和的乘积最大的数组平分方式\n分析 题解  设计长 URL 转短 URL 的服务  书影音 电影  语言文化  数学  政经法史地  物化生  娱乐 游戏  生活  今日总结 "});index.add({'id':66,'href':'/note/docs/natural/math/','title':"1.2 数学",'content':"数学 见 计算机读书笔记\n"});index.add({'id':67,'href':'/note/docs/humanities/language/','title':"2.2 语言",'content':"语言 语言\n语言学 Linguistics\n"});index.add({'id':68,'href':'/note/docs/live/diary/2020/04/12/','title':"2020-04-12",'content':"2020 年 4 月 12 日（星期日） 今日待办  Istio Handbook 周报  周一发布到钉钉群     编程 GitHub 周报 probot/weekly-digest 配置\n# Configuration for weekly-digest - https://github.com/apps/weekly-digest publishDay: sun canPublishIssues: true canPublishPullRequests: true canPublishContributors: true canPublishStargazers: true canPublishCommits: true  生活  今日总结 "});index.add({'id':69,'href':'/note/docs/social/history/','title':"3.2 历史",'content':"历史 "});index.add({'id':70,'href':'/note/docs/study/course/','title':"4.2 课程",'content':"课程 "});index.add({'id':71,'href':'/note/docs/live/parenting/','title':"5.2 养育",'content':"养育 "});index.add({'id':72,'href':'/note/docs/study/docs/draw/draw.io/','title':"Draw.io",'content':"Draw.io "});index.add({'id':73,'href':'/note/docs/humanities/language/english/','title':"English",'content':"English "});index.add({'id':74,'href':'/note/docs/study/docs/draw/latex/','title':"LaTeX",'content':"LaTeX Mathpix Mathpix 允许你截取复杂数学方程式的截图，并立即将其转换为 LaTeX 可编辑文本。\n参考  自学 LaTeX 可以读什么书入门？ 如何在 1 小时内快速入手 LaTeX？ 有哪些好的 LaTeX 编辑器？ 用这个漂亮的工具将方程式截图迅速转换为 LaTeX KaTeX/KaTeX  TeX wiki  "});index.add({'id':75,'href':'/note/docs/study/docs/draw/mermaid/','title':"Mermaid",'content':"Mermaid "});index.add({'id':76,'href':'/note/docs/study/docs/note/onenote/','title':"OneNote",'content':"OneNote "});index.add({'id':77,'href':'/note/docs/study/docs/draw/processon/','title':"ProcessOn",'content':"ProcessOn "});index.add({'id':78,'href':'/note/docs/study/docs/draw/visio/','title':"Visio",'content':"Visio "});index.add({'id':79,'href':'/note/docs/study/book/humanities/','title':"人文科学",'content':"人文科学 "});index.add({'id':80,'href':'/note/docs/study/course/humanities/','title':"人文科学",'content':"人文科学 "});index.add({'id':81,'href':'/note/docs/study/degree/doctorate/on-job-doctor/','title':"在职博士",'content':"博士分类 "});index.add({'id':82,'href':'/note/docs/study/docs/storage/','title':"存储",'content':"存储 "});index.add({'id':83,'href':'/note/docs/humanities/language/english/tutorial/','title':"教程",'content':"英语教程 听写 CoachShane - 每日英语听写 Daily English Dictation 1-400  表达 CoachShane - Daily Easy English Expression 1-899 "});index.add({'id':84,'href':'/note/docs/humanities/','title':"第二部分 人文科学",'content':"人文科学 "});index.add({'id':85,'href':'/note/docs/live/diary/2020/04/11/','title':"2020-04-11",'content':"2020 年 4 月 11 日（星期六） 今日待办  Istio Handbook 周报  周一发布到钉钉群     编程 架构设计 HA 高可用 High Availability\nLB 负载均衡 Load Balance\n产品设计 POC 概念验证 Proof Of Concept\nMVP 最小化可行产品 Minimum Viable Product\n需求管理 KANO 模型 价值 vs 复杂度矩阵 分布式一致性 Paxos Paxos https://raft.github.io\n由于 Paxos 难以理解，所以才有了 Raft\nRaft 以可理解性和易于实现为目标：\n Leader 选举（Leader election） 日志同步（Log replication） 安全性（Safety） 日志压缩（Log compaction） 成员变更（Membership change）  shell top htop\nbrew install htop\n排序：\n Linux:  CPU：大写字母 P 内存：大写字母 M   Mac:  cpu: o cpu 内存：o vsize    显示数据是所有 cpu 的平均值，如果想看每一个 cpu 的处理情况，按 1 即可；\n参考：\n Linux 命令工具 top 详解  Kubernetes 使用 CRD (CustomResourceDefinitions) 扩展 Kubernetes API\nk8s 自定义 controller 三部曲之一：创建 CRD（Custom Resource Definition）\nk8s 自定义 controller 三部曲之二：自动生成代码\nk8s 自定义 controller 三部曲之三：编写 controller 代码\nkafka 序列化 StringSerializer 序列化，写入时使用 dest.kafka.1\u0026amp;key.serializer=org.apache.kafka.common.serialization.StringSerializer dest.kafka.1\u0026amp;value.serializer=org.apache.kafka.common.serialization.StringSerializer\nStringDeserializer 反序列化，读出时使用 source.kafka.2\u0026amp;key.deserializer=org.apache.kafka.common.serialization.StringDeserializer source.kafka.2\u0026amp;value.deserializer=org.apache.kafka.common.serialization.StringDeserializer\nDocker docker for mac 下载： https://download.docker.com/mac/stable/Docker.dmg\n镜像加速 阿里云 加速地址： https://pjuig8sx.mirror.aliyuncs.com\nhttps://cr.console.aliyun.com/cn-hangzhou/instances/mirrors 针对安装了 Docker for Mac 的用户，您可以参考以下配置步骤： 右键点击桌面顶栏的 docker 图标，选择 Preferences ，在 Daemon 标签（Docker 17.03 之前版本为 Advanced 标签）下的 Registry mirrors 列表中将 https://pjuig8sx.mirror.aliyuncs.com 加到 \u0026ldquo;registry-mirrors\u0026rdquo; 的数组里，点击 Apply \u0026amp; Restart 按钮，等待 Docker 重启并应用配置的镜像加速器。\ntomcat 入口文件\nIn any web application, there will be a web.xml in the WEB-INF/ folder. If you dont have one in your web app, as it seems to be the case in your folder structure, the default Tomcat web.xml is under TOMCAT_HOME/conf/web.xml Either way, the relevant lines of the web.xml are\n\u0026lt;welcome-file-list\u0026gt; \u0026lt;welcome-file\u0026gt;index.html\u0026lt;/welcome-file\u0026gt; \u0026lt;welcome-file\u0026gt;index.htm\u0026lt;/welcome-file\u0026gt; \u0026lt;welcome-file\u0026gt;index.jsp\u0026lt;/welcome-file\u0026gt; \u0026lt;/welcome-file-list\u0026gt; so any file matching this pattern when found will be shown as the home page. In Tomcat, a web.xml setting within your web app will override the default, if present.\nFurther Reading How do I override the default home page loaded by Tomcat?\n 书影音 读书 书评 Goodreads\nLibraryThing\nShelfari\n电影 音乐 碧昂丝 Beyonce Beyonce Giselle Knowles\n碧昂丝·吉赛尔·诺斯\n1981 年 9 月 4 日生于美国德克萨斯州休斯顿。\n1993 年与拉塔薇亚·罗伯森、凯莉·罗兰成立组合“天命真女”。 2003 年，推出了首张个人专辑《Dangerously in Love》。 2006 年 9 月 4 日，推出专辑《B\u0026rsquo;Day》登上公告牌二百强专辑榜的榜首。 2008 年 4 月 4 日与 Jay-Z 两人完婚。 2008 年 11 月 18 日，发售第三张个人专辑《双面碧昂丝》获最佳当代 R\u0026amp;B 专辑。 2012 年 1 月 7 日生下女儿 Blue Ivy Carter。\nfeat feat 是 Featuring 简写，\n指的是后面这个歌手（或者组合）他在这首单曲里面或者这张专辑里面并不是主角，前面那个人才是这首歌的灵魂或者主人。\nKaty Perry 水果姐 凯蒂·佩里 水果姐 1984 年 10 月 25 日出生于美国加利福尼亚州圣巴巴拉，美国流行女歌手、演员兼词曲创作者。\n2007 年凭借歌曲《Ur So Gay》成名。 2008 发行首张专辑《One of the Boys》。 2010 年发行第二张专辑《Teenage Dream》，专辑包括《California Gurls》、《Firework》、《E.T》等歌曲，成为首位在美国公告牌热门单曲榜中有 5 首冠军单曲来自同一专辑的女歌手。 2012 年发行专辑《Teenage Dream》的改版专辑《Teenage Dream：TCC》，获得美国公告牌该年年度女性和全美音乐奖最受欢迎流行女歌手奖，专辑单曲《Part Of Me》空降公告牌冠军，成为美国公告牌上第十九支空降冠军单曲。 2013 年 10 月 22 日发行第三张录音室专辑《PRISM》。\n凯蒂·佩里为什么叫“水果姐” 尽管听起来有些奇怪，但你一定知道人们谈论的是哪位明星。中国人说的“水果姐”就是凯蒂·佩里。原因是凯蒂非常喜欢水果元素的服装，有时登台表演也要带上巨型水果道具。她还透露自己亲自种水果然后把它们吃掉。这样看来，“水果姐”倒是个非常贴切的昵称。\n空降冠军 第一次上榜就是冠军！\n歌手绰号 “臀王”珍妮弗·洛佩兹。洛佩兹在中国很多地区被称为“洛霸”，对应的英文“Lord of Butt”翻译过来就是“臀王”。这个昵称一语双关。“洛霸”与汉语直译的“洛佩兹”中的“洛”发音一致。对这位在自己歌曲的 MV 中大秀电臀的超级明星来说，“洛霸”再合适不过。 “大表姐”詹妮弗·劳伦斯。2011 年奥斯卡颁奖礼前夕，数百名中国网友开玩笑地提前“揭晓”获奖名单，且都宣称自己从“美国电影艺术与科学学院的表姐”那里知道的结果。一名网友更夸张，称自己的表姐就是劳伦斯，并透露她将“封后”。虽然劳伦斯最终未能拿到最佳女主角大奖，但“大表姐”这个昵称就此流传开。 “皮卡丘”莱昂纳多·迪卡普里奥。中国台湾的民众把迪卡普里奥叫做“皮卡丘”。这个昵称来自 2011 年的一个笑话，当时一名台湾主播把“莱昂纳多·迪卡普里奥”口误读成“李奥纳多·皮卡丘”。直到现在，充满娱乐精神的台湾媒体以及香港同行依然用《口袋妖怪》里的这个名字称呼迪卡普里奥。\n 语言文化 最古老的姓氏 中国最古老的姓氏起源是怎样的？\n僭 [jiàn] 僭越，指超越本份，古时指地位低下的冒用在上的名义或器物等等， 尤指用皇家专用的。\n诺贝尔文学奖  数学  政经法史地 经济 中石油和中石化的区别   中石油\n 中石油的原油是国内开采的， 中石油重点业务是上游板块，也就是勘探与生产。    中石化\n 中石化的原油是国外进口的。 中石化重点业务是下游板块，也就是炼化与销售。    基金定投 基金定投是定期定额投资基金的简称，是指在固定的时间（如每月 8 日）以固定的金额（如 500 元）投资到指定的开放式基金中，类似于银行的零存整取方式。人们平常所说的基金主要是指证券投资基金。证券投资的分析方法主要有如下三种：基本分析、技术分析、演化分析，其中基本分析主要应用于投资标的物的选择上，技术分析和演化分析则主要应用于具体投资操作的时间和空间判断上，作为提高投资分析有效性和可靠性的重要补充。\n等额配比基金 一种捐赠形式。2006 年 9 月，段永平将 3000 万美元捐给浙江大学。其中有一项 1000 万美元的等额配比基金，即凡有人在浙江大学投入一笔钱，不管用于哪一方面，等额捐赠基金中就会抽出相同数量的钱，同时投入浙大。不管对方捐多少，基金单笔支出不超过 100 万美元，时间跨度为 10 年。\n企业融资和投资银行 法律 美国宪法修正案 宪法修正案是美国宪法规定的唯一正式改变宪法的形式，是美国宪法的重要组成部分，代表了美国宪法制度的基本发展方向。其中具有重大影响的是关于公民权利的宪法前 10 条修正案（即“权利法案”）。 自宪法签署完成后，已有二十七项修正案经批准，其中前十项统称权利法案。对美国宪法的修正程序受美国宪法第五条所规定。另有其他许多已向国会提议，但是未向各州提交的美国宪法修正提议。\n 历史 朱元璋的祖辈 朱仲八\n朱百六\n朱四九\n朱初一\n朱世珍，朱五四\n朱元璋，朱重八\n中国历史 如何理清  如何理清春秋战国的历史？ 如何理清五胡十六国的脉络关系？ 怎样理清魏晋南北朝那段的历史？ 如何理清五代十国的历史？ 如何理清民国时军阀混战的历史？ 怎么有效的区分和理顺历史上中国北方的各游牧民族？  欧洲史  欧洲中世纪史的脉络或结构图是怎么样的？ 如何清晰梳理古希腊、罗马史？   物化生 生命科学的四大基础学科 细胞生物学 细胞生物学(cell biology)是在显微、亚显微和分子水平三个层次上，研究细胞的结构、功能和各种生命规律的一门科学。细胞生物学由 Cytology 发展而来，Cytology 是关于细胞结构与功能(特别是染色体)的研究。现代细胞生物学从显微水平、超微水平和分子水平等不同层次研究细胞的结构、功能及生命活动。在我国基础学科发展规划中，细胞生物学与分子生物学、神经生物学和生态学并列为生命科学的四大基础学科。\n生命科学的学习方法：一、认识细胞生物学课程的重要性，正如原子是物理性质的最小单位，分子是化学性质的最小单位，细胞是生命的基本单位。50 年代以来诺贝尔生理与医学奖大都授予了从事细胞生物学研究的科学家，可见细胞生物学的重要性。如果你将来打算从事生物学相关的工作，学好细胞生物学能加深你对生命的理解。二、明确细胞生物学的研究内容，即：结构、功能、生活史。生物的结构与功能是相适应的，每一种结构都有特定的功能，每一种功能的实现都需要特定的物质基础。如肌肉可以收缩、那么动力是谁提供的、能量从何而来的？三、从显微、超微和分子三个层次来认识细胞的结构与功能。一方面每一个层次的结构都有特定的功能，另一方面各层次之间是有机地联系在一起的。四、将所学过的知识关联起来，多问自己几个为什么。细胞生物学涉及分子生物学、生物化学、遗传学、生理学等几乎所有生物系学过的课程，将学过的知识与细胞生物学课程中讲到的内容关联起来，比较一下有什么不同，有什么相同，为什么？尽可能形成对细胞和生命的完整印象，不要只见树木不见森林。另一方面细胞生物学各章节之间的内容是相互关联的，如我们在学习线粒体与叶绿体的时候，要联想起细胞物质运输章节中学过的 DNP、FCCP 等质子载体对线粒体会有什么影响，学习微管结构时要问问为什么 β 微管蛋白是一种 G 蛋白，而 α 微管蛋白不是，学习细胞分裂时要想想细胞骨架在细胞分裂中起什么作用，诸如此类的例子很多。五、紧跟学科前沿，当前的热点主要有“信号转导”、“细胞周期调控”、“细胞凋亡”等。细胞生物学是当今发展最快的学科之一，知识的半衰期很短（可能不足 5 年），国内教科书由于编撰周期较长，一般滞后于学科实际水平 5-10 年左右，课本中的很多知识都已是陈旧知识。有很多办法可以使你紧跟学科前沿：一是选择国外的最新教材，中国图书进出口公司读者服务部那里可以买到很多价廉物美的正宗原版教材（一般 200-400 元，只相当于国外价格的 1/5）；二是经常读一些最新的期刊资料，如果条件所限查不到国外资料，可以到中国期刊网、万方数据等数据库中查一些综述文章，这些文章很多是国家自然科学基金支助的，如在中国期刊网的检索栏输入关键词“细胞凋亡”，二次检索输入关键词“进展”，你会发现一大堆这样的文章，都是汉字写的比读英文省事。六、学一点科技史，尤其是生物学史，看看科学家如何开展创造发明，学习他们惊人的毅力、锐敏的眼光和独特的思维。牛顿说过：“我之所以比别人看得更远，是因为站在巨人的肩膀上。”\n遗传学 遗传学研究生物起源、进化与发育的基因和基因组结构、功能与演变及其规律，经历了孟德尔经典遗传学、分子遗传学而进入了系统遗传学研究时期。\n发育生物学 发育生物学（developmentalbiology）是生物科学重要的基础分支学科之一，研究内容是和许多其他学科内容相互渗透、错综联系，特别是和遗传学、细胞生物学、分子生物学的关系最为紧密。其应用现代科学技术和方法，从分子水平、亚显微水平和细胞水平来研究分析生物体从精子和卵的发生、受精、发育、生长直至衰老死亡的过程及其机理。\n生物化学 生物化学: 运用化学的理论和方法研究生命物质的边缘学科。其任务主要是了解生物的化学组成、结构及生命过程中各种化学变化。从早期对生物总体组成的研究，进展到对各种组织和细胞成分的精确分析。目前正在运用诸如光谱分析、同位素标记、X 射线衍射、电子显微镜以及其他物理学、化学技术，对重要的生物大分子（如蛋白质、核酸等）进行分析，以期说明这些生物大分子的多种多样的功能与它们特定的结构关系。\n 娱乐 游戏 魔兽系列  生活  今日总结 "});index.add({'id':86,'href':'/note/docs/live/diary/2020/04/10/','title':"2020-04-10",'content':"2020 年 4 月 10 日（星期五） 今日待办  Istio Handbook 编委会双周会 21:00-22:00   编程 mosquitto (mqtt) mosquitto_pub mosquitto_pub [-d] [-h hostname] [-i client_id] [-I client id prefix] [-p port number] [-q message QoS] [--quiet] [-r] { -f file | -l | -m message | -n | -s} [-u username [-P password] ] [ --will-topic topic [--will-payload payload] [--will-qos qos] [--will-retain] ] -t message-topic mosquitto_pub -t \u0026lsquo;application/1/device/ffffff100000d143/rx\u0026rsquo; -m \u0026lsquo;{\u0026ldquo;applicationID\u0026rdquo;:\u0026ldquo;1\u0026rdquo;,\u0026ldquo;applicationName\u0026rdquo;:\u0026ldquo;0000000000000001\u0026rdquo;,\u0026ldquo;deviceName\u0026rdquo;:\u0026ldquo;d143-K5-out\u0026rdquo;,\u0026ldquo;devEUI\u0026rdquo;:\u0026ldquo;ffffff100000d143\u0026rdquo;,\u0026ldquo;txInfo\u0026rdquo;:{\u0026ldquo;frequency\u0026rdquo;:481700000,\u0026ldquo;dr\u0026rdquo;:2},\u0026ldquo;adr\u0026rdquo;:false,\u0026ldquo;fCnt\u0026rdquo;:68570,\u0026ldquo;fPort\u0026rdquo;:44,\u0026ldquo;data\u0026rdquo;:\u0026ldquo;BQEA\u0026rdquo;}\u0026rsquo;\nmosquitto_sub mosquitto_sub -t \u0026lsquo;application/1/device/ffffff100000d143/rx\u0026rsquo;\n Github Github star 历史 timqian/star-history https://star-history.t9t.io/\nvesoft-inc/github-statistics A react static app for displaying github repo statistiscs like Star History, Fork History and more.\nhttps://vesoft-inc.github.io/github-statistics/\nantonmedv/spark \nseladb/startrack-js GitHub star history and stats - based on JavaScript only!\nhttps://seladb.github.io/StarTrack-js/\nelliotreborn/github-stars 技术栈的 star 趋势数据\n Github PR 统计 开源相关工作岗位 t9tio/open-source-jobs\nA list of Open Source projects offering jobs. https://oo.t9t.io/organizations\n 今日总结 "});index.add({'id':87,'href':'/note/docs/live/diary/2020/04/09/','title':"2020-04-09",'content':"2020 年 4 月 9 日（星期四） 今日待办  编程  熟悉基本算法  排序算法（时间 / 空间复杂度） 大数据查找 / 排序   CORS     编程 基本算法 排序算法  插入排序类  直接插入排序 希尔排序 二分法插入排序   选择排序类  直接选择排序 堆排序   交换排序类  冒泡排序 快速排序   归并排序 基数排序  时间 / 空间复杂度 排序大的分类可分为内排序和外排序，不需要访问外存就能进行排序的叫做内排序。\n   排序方法 时间复杂度（平均） 时间复杂度（最坏) 时间复杂度（最好) 空间复杂度 稳定性 复杂性     希尔排序 O(nlog2n) O(n2) O(n) O(1) 不稳定 较复杂   堆排序 O(nlog2n) O(nlog2n) O(nlog2n) O(1) 不稳定 较复杂   快速排序 O(nlog2n) O(n2) O(nlog2n) O(nlog2n) 不稳定 较复杂   归并排序 O(nlog2n) O(nlog2n) O(nlog2n) O(n) 稳定 较复杂   直接插入排序 O(n2) O(n2) O(n) O(1) 稳定 简单   直接选择排序 O(n2) O(n2) O(n2) O(1) 不稳定 简单   冒泡排序 O(n2) O(n2) O(n) O(1) 稳定 简单   基数排序 O(d(n+r)) O(d(n+r)) O(d(n+r)) O(n+r) 稳定 较复杂    稳定排序与不稳定排序 稳定排序：假设在待排序的文件中，存在两个或两个以上的记录具有相同的关键字，在用某种排序法排序后，若这些相同关键字的元素的相对次序仍然不变，则这种排序方法是稳定的。\n若 a[i] = a[j], a[i] 在 a[j] 之前，经过排序后 a[i] 依然在 a[j] 之前。\n 稳定排序  冒泡排序 直接插入排序 二分插入排序 归并排序 基数排序   不稳定排序  直接选择排序 堆排序 快速排序 希尔排序 猴子排序    参考：\n 常见排序算法以及对应的时间复杂度和空间复杂度  快速排序  字符串倒转 大数据查找 / 排序 多大的内存能够表示 10 亿的数 一个 int 型占 4 字节，10 亿就是 40 亿字节，也就是 4GB\n位图法（Bitmap） 位图法：用一个 bit 位来标识一个 int 整数。\n一般来说 Bit-Map 可作为数据的查找、去重、排序等操作。\n 在 3 亿个整数中找出重复的整数个数，限制内存不足以容纳 3 亿个整数 对没有重复元素的整数进行排序  对于非重复的整数排序 BitMap 有着天然的优势，它只需要将给出的无重复整数扫描完毕，组装成为 BitMap 之后，那么直接遍历一遍 Bit 区域就可以达到排序效果了。   已知某个文件内包含一些电话号码，每个号码为 8 位数字，统计不同号码的个数 2.5 亿个整数中找出不重复的整数的个数，内存空间不足以容纳这 2.5 亿个整数  将 bit-map 扩展一下，用 2bit 表示一个数即可：0 表示未出现；1 表示出现一次；2 表示出现 2 次及以上，即重复    分治法 分治法：分批处理这 10 亿的数。\n哈希分桶（Hash Buckets） 哈希分桶的思想是先遍历一遍，按照 hash 分 N 桶（比如 1000 桶），映射到不同的文件中。这样平均每个文件就 10MB，然后分别处理这 1000 个文件，找出没有重复的即可。一个相同的数字，绝对不会夸文件，有 hash 做保证。\n归并排序 找出 1 亿个整数中最大的 1000 个 有 1 亿个整数，找出最大的 1000 个，要求时间越短越好，空间占用越少越好\n思路：\n 读入前 1000 个整数，建立最小堆。O (1) 然后接着读入剩下的整数，将每个读入的整数与该最小堆中的最小值进行比较（与堆顶进行比较），如果比最小值还要小，则继续读入剩下的数据。O (N) 如果读入的数据比最小值大，则删除最小值，并将该数据插入到最小堆的合适位置。O (log1000) 重复步骤 2，直到将剩下的数据全部读完。 按中序遍历输出该最小堆中的数据，也就是按从小到大输出最大的 1000 个数据。 该算法的时间复杂度为 O (N)，空间复杂度为 1000，其实是常数。  最小堆  1TB 的数据排序 如果有 1TB 的数据需要排序，但只有 32GB 的内存如何排序处理？\n 把磁盘上的 1TB 数据分割为 40 块（chunks），每份 25GB。（注意，要留一些系统空间！） 顺序将每份 25GB 数据读入内存，使用 quick sort 算法排序。 把排序好的数据（也是 25GB）存放回磁盘。 循环 40 次，现在，所有的 40 个块都已经各自排序了。（剩下的工作就是如何把它们合并排序！） 从 40 个块中分别读取 25G/40=0.625G 入内存（40 input buffers）。 执行 40 路合并，并将合并结果临时存储于 2GB 基于内存的输出缓冲区中。当缓冲区写满 2GB 时，写入硬盘上最终文件，并清空输出缓冲区；当 40 个输入缓冲区中任何一个处理完毕时，写入该缓冲区所对应的块中的下一个 0.625GB，直到全部处理完成。  外排序 传统的排序算法一般指内排序算法，针对的是数据可以一次全部载入内存中的情况。但是面对海量数据，即数据不可能一次全部载入内存，需要用到外排序的方法。\n外排序采用分块的方法（分而治之），首先将数据分块，对块内数据按选择一种高效的内排序策略进行排序。然后采用归并排序的思想对于所有的块进行排序，得到所有数据的一个有序序列。\n 参考：\n 10 亿 int 型数，统计只出现一次的数 面试题之 10 亿正整数问题续–关于多通道排序的问题 利用位映射原理对大数据排重   PHP PHP 是单进程单线程的  Mysql 长连接 与 短连接 too many connections  高并发 分布式系统 伸缩性 扩展性 火焰图  Web Content-Type 用于定义用户的浏览器或相关设备如何显示将要加载的数据，或者如何处理将要加载的数据\n application/x-www-form-urlencoded  浏览器的原生 form 表单 提交的数据按照 key1=val1\u0026amp;key2=val2 的方式进行编码，key 和 val 都进行了 URL 转码   multipart/form-data  常见的 POST 数据提交的方式 我们使用表单上传文件时，必须让 form 的 enctype 等于这个值。   text/plain  将文件设置为纯文本的形式，浏览器在获取到这种文件时并不会对其进行处理。   application/json  消息主体是序列化后的 JSON 字符串   text/xml  使用 HTTP 作为传输协议，XML 作为编码方式的远程调用规范   text/html  意思是将文件的 content-type 设置为 text/html 的形式， 浏览器在获取到这种文件时会自动调用 html 的解析器对文件进行相应的处理。    MIME MIME 类型就是设定某种扩展名的文件用一种应用程序来打开的方式类型，当该扩展名文件被访问的时候，浏览器会自动使用指定应用程序来打开。多用于指定一些客户端自定义的文件名，以及一些媒体文件打开方式。\nCORS  CORS 是一个 W3C 标准，全称是 \u0026ldquo;跨域资源共享\u0026rdquo;（Cross-origin resource sharing）。  它允许浏览器向跨源服务器，发出 XMLHttpRequest 请求，从而克服了 AJAX 只能同源使用的限制。 整个 CORS 通信过程，都是浏览器自动完成，不需要用户参与。   CORS 需要浏览器和服务器同时支持。  目前，所有浏览器都支持该功能，IE 浏览器不能低于 IE10。 对于前端开发者来说，CORS 通信与同源的 AJAX 通信没有差别，代码完全一样。浏览器一旦发现 AJAX 请求跨源，就会自动添加一些附加的头信息，有时还会多出一次附加的请求，但用户不会有感觉。 实现 CORS 通信的关键是服务器。只要服务器实现了 CORS 接口，就可以跨源通信。    简单请求与非简单请求 简单请求（simple request） 非简单请求（not-so-simple request）\n只要同时满足以下两大条件，就属于简单请求。\n1. 请求方法是以下三种方法之一： HEAD GET POST 2. HTTP 的头信息不超出以下几种字段： Accept Accept-Language Content-Language Last-Event-ID Content-Type：只限于三个值 application/x-www-form-urlencoded、multipart/form-data、text/plain 凡是不同时满足上面两个条件，就属于非简单请求。\n简单请求   对于简单请求，浏览器直接发出 CORS 请求。具体来说，就是在头信息之中，增加一个 Origin 字段。\n Origin 字段用来说明，本次请求来自哪个源（协议 + 域名 + 端口）。服务器根据这个值，决定是否同意这次请求。    如果 Origin 指定的源，不在许可范围内，服务器会返回一个正常的 HTTP 回应。\n 浏览器发现，这个回应的头信息没有包含 Access-Control-Allow-Origin 字段，就知道出错了，从而抛出一个错误，被 XMLHttpRequest 的 onerror 回调函数捕获。 注意，这种错误无法通过状态码识别，因为 HTTP 回应的状态码有可能是 200。    如果 Origin 指定的域名在许可范围内，服务器返回的响应，会多出几个头信息字段。\n# 有三个与 CORS 请求相关的字段，都以 Access-Control- 开头 # 该字段是必须的。它的值要么是请求时 Origin 字段的值，要么是一个 *，表示接受任意域名的请求。 Access-Control-Allow-Origin: http://api.bob.com Access-Control-Allow-Credentials: true Access-Control-Expose-Headers: FooBar Content-Type: text/html; charset=utf-8    CORS 请求默认不发送 Cookie 和 HTTP 认证信息。 如果要把 Cookie 发到服务器：  服务器同意，指定 Access-Control-Allow-Credentials 字段 # Access-Control-Allow-Credentials 只能是 true，或者不存在 Access-Control-Allow-Credentials: true  在 AJAX 请求中打开 withCredentials 属性 var xhr = new XMLHttpRequest(); xhr.withCredentials = true;     非简单请求   非简单请求是那种对服务器有特殊要求的请求，\n 比如请求方法是 PUT 或 DELETE， 或者 Content-Type 字段的类型是 application/json    非简单请求的 CORS 请求，会在正式通信之前，增加一次 HTTP 查询请求，称为 \u0026ldquo;预检\u0026rdquo; 请求（preflight）。\n  \u0026ldquo;预检\u0026rdquo; 请求用的请求方法是 OPTIONS，表示这个请求是用来询问的。\n  头信息里面，关键字段是 Origin，表示请求来自哪个源。\n  \u0026ldquo;预检\u0026rdquo; 请求的头信息包括两个特殊字段：\n1. Access-Control-Request-Method 该字段是必须的，用来列出浏览器的 CORS 请求会用到哪些 HTTP 方法，比如 PUT。 2. Access-Control-Request-Headers 该字段是一个逗号分隔的字符串，指定浏览器 CORS 请求会额外发送的头信息字段，比如 X-Custom-Header。     服务器收到 \u0026ldquo;预检\u0026rdquo; 请求以后，检查了 Origin、Access-Control-Request-Method 和 Access-Control-Request-Headers 字段以后\n 允许跨源请求，就可以做出回应： Access-Control-Allow-Origin: http://api.example.com # 星号 表示同意任意跨源请求 # Access-Control-Allow-Origin: *  如果浏览器否定了 \u0026ldquo;预检\u0026rdquo; 请求，会返回一个正常的 HTTP 回应，但是没有任何 CORS 相关的头信息字段。  浏览器就会认定，服务器不同意预检请求，因此触发一个错误，被 XMLHttpRequest 对象的 onerror 回调函数捕获。      JSONP CORS 与 JSONP 的使用目的相同，但是比 JSONP 更强大。\nJSONP 只支持 GET 请求，CORS 支持所有类型的 HTTP 请求。JSONP 的优势在于支持老式浏览器，以及可以向不支持 CORS 的网站请求数据。\n参考：\n 跨域资源共享 CORS 详解   Github 徽章 比如 https://github.com/ikingye/ote-stack\n版本：  panjf2000/gnet gnet 是一个基于事件驱动的高性能和轻量级网络框架。它直接使用 epoll 和 kqueue 系统调用而非标准 Go 网络包：net 来构建网络应用，它的工作原理类似两个开源的网络库：netty/netty 和 libuv/libuv 。\ngnet 设计开发的初衷不是为了取代 Go 的标准网络库：net，而是为了创造出一个类似于 antirez/redis 、haproxy/haproxy 能高效处理网络包的 Go 语言网络服务器框架。\ngnet 的卖点在于它是一个高性能、轻量级、非阻塞的纯 Go 实现的传输层（TCP/UDP/Unix Domain Socket）网络框架，开发者可以使用 gnet 来实现自己的应用层网络协议 (HTTP、RPC、Redis、WebSocket 等等)，从而构建出自己的应用层网络应用：比如在 gnet 上实现 HTTP 协议就可以创建出一个 HTTP 服务器 或者 Web 开发框架，实现 Redis 协议就可以创建出自己的 Redis 服务器等等。\ngnet 衍生自另一个项目：tidwall/evio ，但拥有更丰富的功能特性，且性能远胜之。\n参考：\n 最快的 Go 网络框架 gnet 来啦！   今日总结 "});index.add({'id':88,'href':'/note/docs/live/diary/2020/03/08/','title':"2020-03-08",'content':"2020 年 3 月 8 日（星期日） 今日待办  陪闵子玩 Istio 1.5 发布了，学习一个   编程 算法教程 今天看到一个算法教程还不错，推荐一下，labuladong 的算法小抄。\n Istio 1.5 Istio 1.5 于 2020-03-05 发布了。\n引入 Istiod 将控制平面整合为一个新的二进制文件 Istiod，简化了安装、运行和升级。所有 API 和运行时特性均与以前的组件一致。\n参考：官网 1.5 change note\n可扩展性的新模型 Istio 一直是最可扩展的服务网格，其 Mixer 插件允许自定义策略和遥测支持，而 Envoy 扩展则允许数据平面自定义。Istio 1.5 带来了了一个新模型，该模型使用 WebAssembly（Wasm）将 Istio 的可扩展性模型与 Envoy 的统一。Wasm 使开发人员能够安全地在 Envoy 代理中分发和执行代码，以便与遥测系统和策略系统集成，并控制路由，甚至转换消息正文。它将更加灵活和高效，从而无需单独运行 Mixer 组件（这也简化了部署）。\n更容易使用 现在，使用 istioctl 的 Istio 命令行安装已进入 beta 阶段。istioctl 也有十几项改进，包括分析新项目、更好的验证规则，以及更好的与 CI 系统集成的能力等。它已经成为了解 Istio 的系统运行状态并确保配置更改安全的必要工具。\nIstio 的安全性也得到了许多增强，更易于使用。Beta 版自动 mTLS 的启动，简化了 mTLS 的配置并使其自动化。\n更安全 在 1.5 版中，所有安全策略，包括自动 mTLS、AuthenticationPolicy（对等身份验证和 RequestAuthentication）和授权现在都处于 Beta 版。SDS 已经处于稳定版。授权（Authorization）现在支持 \u0026ldquo;拒绝\u0026rdquo; 语义，以强制执行不可覆盖的强制性控件。此外，Node 代理和 Istio 代理已组合到一个二进制文件中，这意味着不再需要配置 PodSecurityPolicy。\n改进不止于此。现在不再需要在每个 Pod 上安装证书，也不必在证书更改时重新启动 Envoy。证书直接从 Istiod 交付到每个 pod。而且，每个 pod 都有唯一的证书。\n更好的可观察性 Telemetry v2 现在报告了原始 TCP 连接（除了 HTTP）的度量标准，并且还通过在遥测和日志中添加响应状态代码来增强了对 gRPC 工作负载的支持。现在默认使用 Telemetry v2。新的遥测系统将等待时间缩短了一半，90％ 的等待时间从 7 毫秒减少到 3.3 毫秒。不仅如此，消除 Mixer 还使总 CPU 消耗减少了 50％，降至每秒每 1,000 个请求 0.55 个 vCPU。\n 生活 陪闵子玩  大部分时间，她还是像以往一样，对着小度播的儿歌，左右摇摆  闵子现在挺会跳了 下午陪闵子画画（乱画）  闵子很喜欢笑，笑起来很可爱，像她妈妈    今日总结  Istio 1.5 架构变化较大  "});index.add({'id':89,'href':'/note/docs/live/diary/2020/04/08/','title':"2020-04-08",'content':"2020 年 4 月 8 日（星期三） 今日待办     编程 依赖注入 可以通过多种方式为实例提供必要的依赖关系：\n 构造函数注入 属性注入 方法注入  构造函数注入 构造函数注入是许多依赖注入框架的首选方法，常受依赖注入框架的青睐。\n它清楚地告诉我们创建特定组件所需的所有依赖关系，并且这些依赖不是可选的，这些依赖关系在整个组件中应该都是必需的。\npublic class DataProcessor { private final DbManager manager; private final Calculator calculator; public DataProcessor(DbManager manager, Calculator calculator) { this.manager = manager; this.calculator = calculator; } // ... }  优点：  不变性：依赖关系始终如初。   缺点  必须在初始化时提供所有依赖项。  有时，我们无法自己初始化一个组件，或者在某个时刻我们无法提供组件的所有依赖关系。或者我们需要使用另外一个构造函数。一旦设置了依赖项，我们就无法再改变它们了。      属性注入 属性注入更适合可选参数，例如监听或委托。又或是我们无法在初始化时提供依赖关系。\n其它编程语言，例如 Swift，大量使用了带属性的 委托模式。因此，使用属性注入将使其它语言的开发人员更熟悉我们的代码。\npublic class DataProcessor { // 外部要提前进行 属性注入，否则调用会出现 NullPointerException  public DbManager manager = null; public Calculator calculator = null; // ...  public void processData() { // WARNING: Possible NPE  this.manager.processData(); } public BigDecimal calc(BigDecimal input) { // WARNING: Possible NPE  return this.calculator.expensiveCalculation(input); } } 有时，我们无法访问类型实际的初始化方法，只能访问一个已经初始化的实例。或者在初始化时，所需要的依赖关系并不像之后那样明确。\n在这些情况下，我们可以使用属性注入而不是依赖于构造函数。\n 优点  可以通过构造方法注入，也可以通过实例注入 随时注入   缺点  易变性，调用前要注入，否则会出现 NullPointerException    方法注入 如果在每次调用时依赖项可能不同，那么使用方法注入最好不过了。方法注入进一步解耦组件，它使方法本身持有依赖项，而非整个组件。\npublic class DataProcessor { // ...  public BigDecimal calc(Calculator calculator, BigDecimal input) { return calculator.expensiveCalculation(input); } }  优点  进一步解耦组件，它使方法本身持有依赖项，而非整个组件 每次调用时依赖项可以不同   缺点  每次调用都需要传依赖的实例    参考：\n [译] 用依赖注入解耦你的代码   RTSP Real Time Streaming Protocol\n发布策略 蓝绿部署 (Blue-green Deployments) 蓝绿部署的目的是减少发布时的中断时间、能够快速撤回发布。\n蓝绿部署中，一共有两套系统：\n 一套是正在提供服务系统，标记为 “绿色”； 另一套是准备发布的系统，标记为 “蓝色”。  两套系统都是功能完善的，并且正在运行的系统，只是系统版本和对外服务情况不同。\n金丝雀发布 (Canary Releases) 金丝雀发布和国内常说的灰度发布是同一类策略。\n蓝绿部署是准备两套系统，在两套系统之间进行切换，金丝雀策略是只有一套系统，逐渐替换这套系统。\n譬如说，\n 目标系统是一组无状态的 Web 服务器，但是数量非常多，假设有一万台 这时候，蓝绿部署就不能用了，因为你不可能申请一万台服务器专门用来部署蓝色系统  在蓝绿部署的定义中，蓝色的系统要能够承接所有访问   可以想到的一个方法是：  只准备几台服务器，在上面部署新版本的系统并测试验证。测试通过之后，担心出现意外，还不敢立即更新所有的服务器。 先将线上的一万台服务器中的 10 台更新为最新的系统，然后观察验证 确认没有异常之后，再将剩余的所有服务器更新     什么时候可以用蓝绿，不能用金丝雀呢？  整个系统只有一台服务器的时候。    A/B 测试 (A/B Testing) 蓝绿部署和金丝雀是发布策略，目标是确保新上线的系统稳定，关注的是新系统的 BUG、隐患。 A/B 测试关注的是不同版本的服务的实际效果，譬如说转化率、订单情况等。\nA/B 测试是效果测试，同一时间有多个版本的服务对外服务，这些服务都是经过足够测试，达到了上线标准的服务，有差异但是没有新旧之分（它们上线时可能采用了蓝绿部署的方式）。\n在 A/B 测试中，需要能够控制流量的分配，譬如说，为 A 版本分配 10% 的流量，为 B 版本分配 10% 的流量，为 C 版本分配 80% 的流量。\n流量切分  譬如说，给最初更新的 10 台服务器设置较低的权重、控制发送给这 10 台服务器的请求数，然后逐渐提高权重、增加请求数。 既可以用于金丝雀发布，也可以用于 A/B 测试。   大量 time_wait 状态 TIME_WAIT 是怎么产生的？ 连接关闭的过程  主动关闭连接的一方，调用 close ()；协议层发送 FIN 包 被动关闭的一方收到 FIN 包后，协议层回复 ACK；然后被动关闭的一方，进入 CLOSE_WAIT 状态；主动关闭的一方等待对方关闭，则进入 FIN_WAIT_2 状态 被动关闭的一方在完成所有数据发送后，调用 close () 操作，协议层发送 FIN 包给主动关闭的一方，等待对方的 ACK，被动关闭的一方进入 LAST_ACK 状态 主动关闭的一方收到 FIN 包，协议层回复 ACK，主动关闭连接的一方进入 TIME_WAIT 状态；而被动关闭的一方，进入 CLOSED 状态 等待 2MSL 时间，主动关闭的一方，结束 TIME_WAIT，进入 CLOSED 状态  TIME_WAIT 只会出现在主动断开连接的一方 大量 TIME_WAIT 造成的影响  在高并发短连接的 TCP 服务器上，当服务器处理完请求后立刻主动正常关闭连接。  短连接表示 “业务处理 + 传输数据的时间 远远小于 TIMEWAIT 超时的时间” 的连接 高并发可以让服务器在短时间范围内同时占用大量端口，  而端口有个 0~65535 的范围，并不是很多，刨除系统和其他服务要用的，剩下的就更少了。     在实际业务场景中，一般长连接对应的业务的并发量并不会很高 这些端口都是服务器临时分配，无法用 SO_REUSEADDR 选项解决这个问题   内存  内核里有一个保存所有连接的 hash table 不同的内核对这个 hash table 的大小设置不同，你可以通过 dmesg 命令去找到你的内核设置的大小 还有一个 hash table 用来保存所有的 bound ports，主要用于可以快速的找到一个可用的端口或者随机端口 不过占用内存很少很少。 一个 tcp socket 占用不到 4k。1 万条 TIME_WAIT 的连接，也就多消耗 1M 左右的内存   CPU  每次找到一个随机端口，还是需要遍历一遍 bound ports 的吧，这必然需要一些 CPU 时间。   源端口数量 (net.ipv4.ip_local_port_range) TIME_WAIT bucket 数量 (net.ipv4.tcp_max_tw_buckets) 文件描述符数量 (max open file)  一个 socket 占用一个文件描述符    排查 查看 TCP 各个状态的数量 netstat -ant | awk \u0026#39;/^tcp/ {++S[$NF]} END {for(a in S) print (a,S[a])}\u0026#39; | sort -rn -k2 TCP 状态含义    TCP 状态 含义     LISTEN 服务器在等待进入呼叫   SYN_RECV 一个连接请求已经到达，等待确认   SYN_SENT 应用已经开始，打开一个连接   ESTABLISHED 正常数据传输状态   FIN_WAIT1 应用说它已经完成   FIN_WAIT2 另一边已同意释放   ITMED_WAIT 等待所有分组死掉   LAST_ACK 等待所有分组死掉   TIME_WAIT 另一边已初始化一个释放   CLOSING 两边同时尝试关闭   CLOSED 无连接是活动的或正在进行    统计 TIME_WAIT 连接的本地地址 netstat -an | grep TIME_WAIT | awk \u0026#39;{print $4}\u0026#39; | sort | uniq -c | sort -rn -k1 | head 如何尽量处理 TIMEWAIT 过多的问题？ 修改内核文件 /etc/sysctl.conf net.ipv4.tcp_syncookies = 1 表示开启 SYN Cookies。当出现 SYN 等待队列溢出时，启用 cookies 来处理，可防范少量 SYN 攻击，默认为 0，表示关闭； net.ipv4.tcp_tw_reuse = 1 表示开启重用。允许将 TIME-WAIT sockets 重新用于新的 TCP 连接，默认为 0，表示关闭； net.ipv4.tcp_tw_recycle = 1 表示开启 TCP 连接中 TIME-WAIT sockets 的快速回收，默认为 0，表示关闭。 net.ipv4.tcp_fin_timeout 修改系默认的 TIMEOUT 时间 然后执行 /sbin/sysctl -p 让参数生效。\n/etc/sysctl.conf 是一个允许改变正在运行中的 Linux 系统的接口，它包含一些 TCP/IP 堆栈和虚拟内存系统的高级选项，修改内核参数永久生效。\n简单来说，就是打开系统的 TIMEWAIT 重用和快速回收。\n如果以上配置调优后性能还不理想，可继续修改一下配置：\nnet.ipv4.tcp_keepalive_time = 1200 #表示当keepalive起用的时候，TCP发送keepalive消息的频度。缺省是2小时，改为20分钟。 net.ipv4.ip_local_port_range = 1024 65000 #表示用于向外连接的端口范围。缺省情况下很小：32768到61000，改为1024到65000。 net.ipv4.tcp_max_syn_backlog = 8192 #表示SYN队列的长度，默认为1024，加大队列长度为8192，可以容纳更多等待连接的网络连接数。 net.ipv4.tcp_max_tw_buckets = 5000 #表示系统同时保持 TIME_WAIT 套接字的最大数量，如果超过这个数字， TIME_WAIT 套接字将立刻被清除并打印警告信息。 默认为180000，改为5000。对于Apache、Nginx等服务器，上几行的参数可以很好地减少 TIME_WAIT 套接字数量，但是对于 Squid，效果却不大。此项参数可以控制 TIME_WAIT 套接字的最大数量，避免Squid服务器被大量的 TIME_WAIT 套接字拖死。 参考：\n 解决 TIME_WAIT 过多造成的问题   nginx 配置问题  nginx 在配置 \u0026ldquo;不启用 keep-alive\u0026rdquo; 时，会在 http 请求结束时主动断开连接  尝试开启 http 的 keep-alive  keepalive_timeout 65;  nginx 与 fast-cgi 的默认连接是短连接  修改 nginx 配置使其与 fastcgi 的连接使用长连接  upstream phpserver{ server 127.0.0.1:9000 weight=1; # upstream 中的 keepalive 指定 nginx 每个 worker 与 fastcgi 的最大长连接数 keepalive 100 }  若 nginx 与 fast-cgi 在同一台服务器上，则使用 unix 域 会更为高效，同时避免了 TIME_WAIT 的问题  proxy_pass 与 fastcgi_pass 的区别 客户端 --http--\u0026gt; 前端负载均衡 Nginx --proxy_pass--\u0026gt; 业务服务器 Nginx --fastcgi_pass--\u0026gt; 业务服务器 php-fpm 为什么要有 TIME_WAIT 状态？  可靠地实现 TCP 全双工连接的终止  在进行关闭连接四次挥手协议时，最后的 ACK 是由主动关闭端发出的，如果这个最终的 ACK 丢失，服务器将重发最终的 FIN 因此客户端必须维护状态信息允许它重发最终的 ACK。如果不维持这个状态信息，那么客户端将响应 RST 分节，服务器将此分节解释成一个错误（在 java 中会抛出 connection reset 的 SocketException)。 因而，要实现 TCP 全双工连接的正常终止，必须处理终止序列四个分节中任何一个分节的丢失情况，主动关闭的客户端必须维持状态信息进入 TIME_WAIT 状态。   让老的重复分节在网络中消逝  在关闭一个 TCP 连接后，马上又重新建立起一个相同的 IP 地址和端口之间的 TCP 连接，后一个连接被称为前一个连接的化身（incarnation)，那么有可能出现这种情况，前一个连接的迷途重复分组在前一个连接终止后出现，从而被误解成从属于新的化身。 为了避免这个情况， TCP 不允许处于 TIME_WAIT 状态的连接启动一个新的化身，因为 TIME_WAIT 状态持续 2MSL，就可以保证当成功建立一个 TCP 连接的时候，来自连接先前化身的重复分组已经在网络中消逝。     我的 MacOS Apps 通用    软件 类型 评分 说明     iTerm 终端 ★★★★★    zoom.us IM - 视频 ★★★★    draw.io 作图 ★★★★    PicGo 图床 ★★★★    Dropbox 备份 - 同步 ★★★★    Keyboard Maestro 快捷键 ★★★★    Alfred 4 搜索 ★★★★    Google Chrome 浏览器 ★★★★    OmniDiskSweeper 系统 - 磁盘管理 ★★★★    ShiftIt 系统 - 窗口移动 ★★★★    Telegram IM ★★★    QQ IM ★★★    Skype for Business IM ★★★    Slack IM ★★★    DingDing IM ★★★    WeChat IM ★★★    WeChat Work IM ★★★    Keynote Office ★★★    Microsoft Excel Office ★★★    Microsoft OneNote Office ★★★    Microsoft Outlook Office ★★★    Microsoft PowerPoint Office ★★★    Microsoft Word Office ★★★    Numbers Office ★★★    Pages Office ★★★    SwitchHosts! host 管理 ★★★    Axure RP 8 产品 ★★★    Sketch 产品 - UI ★★★    V2RayX 代理 ★★★    OmniGraffle 作图 ★★★    Typora 写作 - Markdown ★★★    OneDrive 备份 ★★★    百度网盘 备份 ★★★    Anki 学习 ★★★    LICEcap 录屏 - GIF ★★★    CheatSheet 快捷键显示 ★★★    XMind 思维导图 ★★★    截图 截图 ★★★    OBS 直播 ★★★    Kindle 看书 ★★★    Tencent Lemon 系统 - 磁盘清理 ★★★    InsomniaX 系统 - 禁用休眠 ★★★ 禁用 MacBook 上的合盖休眠   Scroll Reverser 系统 - 鼠标反转 ★★★    IINA 视频 ★★★    The Unarchiver 解压缩 ★★★    NeteaseMusic 音乐 ★★★     编程    软件 类型 评分 说明     Visual Studio Code 编辑器 ★★★★★    Docker  ★★★★    GoLand IDE - Go ★★★★    IntelliJ IDEA IDE - Java ★★★★    PhpStorm IDE - PHP / 前端 ★★★★    Multipass 虚拟机管理 ★★★★    Sublime Text 编辑器 ★★★★    nteract  ★★★    Postman HTTP ★★★    CLion IDE - C++ ★★★    Robo 3T IDE - MongoDB ★★★ 轻量级 Studio 3T   Studio 3T IDE - MongoDB ★★★    Racket v7.2 IDE - Racket ★★★    MIT/GNU Scheme IDE - Scheme ★★★    Xcode IDE - iOS ★★★    微信开发者工具 IDE - 微信 ★★★    Anaconda-Navigator Python ★★★    Beyond Compare diff ★★★    Sourcetree git 管理 ★★★    Dash 定义文档 ★★★    GitHub Desktop 开源 ★★★    Progress Telerik Fiddler 抓包 ★★★    Wireshark 抓包 ★★★    DataGrip 数据库 ★★★    Sourcetrail 源码阅读 ★★★    TeX 编辑器 - LaTeX ★★★    VirtualBox 虚拟机 ★★★     参考：\n nteract/nteract    物化生 红外光栅传感器 光栅 由大量等宽等间距的平行狭缝构成的光学器件称为光栅（grating）。\n一般常用的光栅是在玻璃片上刻出大量平行刻痕制成，刻痕为不透光部分，两刻痕之间的光滑部分可以透光，相当于一狭缝。\n精制的光栅，在 1cm 宽度内刻有几千条乃至上万条刻痕。\n 利用透射光衍射的光栅称为透射光栅 利用两刻痕间的反射光衍射的光栅，称为反射光栅  如在镀有金属层的表面上刻出许多平行刻痕，两刻痕间的光滑金属面可以反射光    红外光栅 遮挡检测 红外光栅，（又叫电子光栅或红外栅栏）（也叫 “红外栏杆”）是主动红外对射的一种，\n采用多束红外光对射，发射器向接收器以 “低频发射、时分检测” 方式发出红外光，一旦有人员或物体挡住了发射器发出的任何相邻两束以上光线超过 30ms 时，接收器立即输出报警信号，当有小动物或小物体挡住其中一束光线时，报警器不会输出报警信号。\n 今日总结 "});index.add({'id':90,'href':'/note/docs/live/diary/2020/04/07/','title':"2020-04-07",'content':"2020 年 4 月 7 日（星期二） 今日待办  201 PoSD 翻译  修改负责的 5 个 Principles 并提交到 icode 前 20 个 Principles 合并到 word，并提交给出版社进行初审     编程 编程哲学 中文房间 中文房间（英语：Chinese room），是由约翰・希尔勒提出的一个思想实验，借以反驳强人工智能的观点。根据强人工智能的观点，只要计算机拥有了适当的程序，理论上就可以说计算机拥有它的认知状态并且可以像人一样地进行理解活动。\n该实验出自约翰・罗杰斯・希尔勒的论文《心灵、大脑和程序》（ Minds, Brains, and Programs）中，发表于 1980 年的《 行为与脑科学（英语：Behavioral and Brain Sciences）》。\n中文房间思想实验是什么？它是否成功地否决了图灵测试的有效性？\n中文房间是否可以否定人类会思考？\n因果论与自由意志 k8s 相关 canonical/multipass  Multipass orchestrates virtual Ubuntu instances https://multipass.run\n# 创建一个 VM, 1GB 内存和 5GB 磁盘 multipass launch --name k3s --mem 1G --disk 5G # 为 VM 启动一个 shell multipass shell k3s # 在其上安装 k3s curl -sfL https://get.k3s.io | sh – rancher/fleet  Rancher 开源 Fleet：业界首个海量 K8S 集群管理项目\n2019 年，Rancher 推出了一系列轻量级 Kubernetes 开源项目，包括轻量级的 Kubernetes 发行版 K3s 、基于 Kubernetes 的应用程序部署引擎 Rio 、业界首个 Kubernetes 操作系统 K3OS 。\n Rio 是 Rancher 新出的一款轻量级 service mesh 产品，基于 linkerd2，相当轻。但麻雀虽小，五脏俱全，基本上 istio 有的功能，它都有。\nrancher/rio  参考：Rancher 极简 service mesh 产品 Rio 安装试玩（基于 k3s）\ncncf/udpa  Universal Data Plane API Working Group (UDPA-WG)\nGoal: The objective of the Universal Data Plane API Working Group (UDPA-WG) is to bring together parties across the industry interested in a common control and configuration API for data plane proxies and load balancers.\nnote 使用 netlify 部署 gitbook 参考：A Step-by-Step Guide: GitBook on Netlify\n最后一步使用\nnpm install -g gitbook-cli \u0026amp;\u0026amp; gitbook install \u0026amp;\u0026amp; gitbook build 使用 netlify 持续部署 PR 参考：Github 集成 Netlify：快速预览 PR\nvps Ubuntu 开源镜像  清华开源镜像 阿里巴巴开源镜像  Ubuntu    oh-my-zsh https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh\nzsh prompt export PROMPT=\u0026#39;%{$fg[magenta]%}%(?..%?%1v)%n@%{$fg[green]%}%M:%{$fg[cyan]%}%c%{$reset_color%} $(git_prompt_info)\u0026#39; 设置默认为 zsh sudo chsh -s /usr/bin/zsh ubuntu  书影音 电影 乔乔的异想世界 Jojo Rabbit (2019) 导演: 塔伊加・维迪提\n编剧: 塔伊加・维迪提 / 克里斯汀・勒南斯\n主演: 罗曼・格里芬・戴维斯 / 托马辛・麦肯齐 / 斯嘉丽・约翰逊 / 塔伊加・维迪提 / 山姆・洛克威尔\n 语言文化 左图右史 左图右史，汉语成语，拼音是 zuǒ tú yòu shǐ，意思是形容室内图书多。出自《新唐书·杨绾传》。\n参考：\n 左图右史，如何直观形象的去学习历史   今日总结 "});index.add({'id':91,'href':'/note/docs/live/diary/2020/04/06/','title':"2020-04-06",'content':"2020 年 4 月 6 日（星期一） 备注：\n 清明节放假  今日待办  201 PoSD 翻译  前 20 个 Principles 翻译审校（评论） 编委会讨论前 20 个 Principles 翻译修改版 修改负责的 5 个 Principles 并提交到 icode     今日总结 "});index.add({'id':92,'href':'/note/docs/live/diary/2020/04/03/','title':"2020-04-03",'content':"2020 年 4 月 3 日（星期五） 今日待办     编程 Bookinfo Application 安装 istio istioctl manifest apply --set profile=demo kubectl label namespace default istio-injection=enabled 参考：https://istio.io/docs/setup/getting-started/\n运行 Bookinfo sample application alias k=\u0026#34;kubectl\u0026#34; k apply -f samples/bookinfo/platform/kube/bookinfo.yaml k get services 查看 Bookinfo 应用是否正常\nby checking for the page title in the response\nkubectl exec -it $(kubectl get pod -l app=ratings -o jsonpath=\u0026#39;{.items[0].metadata.name}\u0026#39;) -c ratings -- curl productpage:9080/productpage | grep -o \u0026#34;\u0026lt;title\u0026gt;.*\u0026lt;/title\u0026gt;\u0026#34; Set the ingress IP and ports:\nexport INGRESS_HOST=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath=\u0026#39;{.status.loadBalancer.ingress[0].ip}\u0026#39;) export INGRESS_PORT=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath=\u0026#39;{.spec.ports[?(@.name==\u0026#34;http2\u0026#34;)].port}\u0026#39;) export SECURE_INGRESS_PORT=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath=\u0026#39;{.spec.ports[?(@.name==\u0026#34;https\u0026#34;)].port}\u0026#39;) Docker Desktop 的 Kubernetes 版本需要使用 hostname 而不是 ip\nexport INGRESS_HOST=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')   To confirm that the Bookinfo application is accessible from outside the cluster:\ncurl -s http://${GATEWAY_URL}/productpage | grep -o \u0026quot;\u0026lt;title\u0026gt;.\\*\u0026lt;/title\u0026gt;\u0026quot;  stedolan/jq  Command-line JSON processor http://stedolan.github.io/jq/\n 今日总结 "});index.add({'id':93,'href':'/note/docs/live/diary/2020/04/02/','title':"2020-04-02",'content':"2020 年 4 月 2 日（星期四） 今日待办     编程 Istio 安装 minikube minikube start --image-mirror-country='cn' --registry-mirror=https://registry.docker-cn.com\n安装 istio istioctl manifest apply --set profile=demo kubectl label namespace default istio-injection=enabled 参考：https://istio.io/docs/setup/getting-started/\n运行 Bookinfo sample application kubectl apply -f samples/bookinfo/platform/kube/bookinfo.yaml kubectl get services 一切顺利，输出 service list。\n过了一会，报错，连不上 server\nThe connection to the server 192.168.99.100:8443 was refused - did you specify the right host or port? minikube status minikube start --image-mirror-country=\u0026#39;cn\u0026#39; --registry-mirror=https://registry.docker-cn.com 解决 连不上 server 删除： minikube delete\n重新 start\n 过一会又出现错误\nThe connection to the server 192.168.99.101:8443 was refused - did you specify the right host or port? 还是切换会 Docker Desktop 版本的 Kubernetes 吧。。。\n使用 gotok8s/k8s-docker-desktop-for-mac 原理：\n利用 GitHub Actions 实现 k8s.gcr.io 上 kubernetes 依赖镜像自动同步到 Docker Hub 上指定的仓库中。 通过 load_images.sh 将所需镜像从 Docker Hub 的同步仓库中取回，并重新打上原始的 tag。\n 今日总结  MacOS 还是使用 Docker Desktop 的 K8s，Minikube 不好用  "});index.add({'id':94,'href':'/note/docs/study/degree/','title':"4.3 学位",'content':"学位 学历与学位 我国目前标准的高等教育学历只分为专科、本科、硕士和博士四个层次，学位分为学士、硕士、博士三个层次。\n取得学士学位证书的，必须首先获得大学本科毕业证书， 而取得硕士学位或博士学位证书的，却不一定能够获得硕士研究生或博士研究生毕业证书。\n 学历  专科 本科 硕士 博士   学位  学士（必须先有本科学历） 硕士（同等学力申硕只有硕士学位，没有硕士学历） 博士    "});index.add({'id':95,'href':'/note/docs/study/degree/masters-degree/mba/emba/','title':"EMBA",'content':"EMBA Executive Master of Business Administration\nMBA 分类 "});index.add({'id':96,'href':'/note/docs/study/docs/note/gitbook/','title':"Gitbook",'content':"Gitbook gitbook serve serve 多个笔记本 \u0026ndash;port Port for server to listen on (Default is 4000)\n\u0026ndash;lrport Port for livereload server to listen on (Default is 35729)\nSo you can change both two ports and serve as many books as you want.\neg:\none:\ngitbook --lrport 35730 --port 4001 serve another:\ngitbook --lrport 35731 --port 4002 serve "});index.add({'id':97,'href':'/note/docs/study/degree/masters-degree/mba/','title':"MBA",'content':"MBA Master of Business Administration\nMBA 分类 问答  深圳有哪些 MBA？   第一梯队\n北大光华、北大汇丰、中山大学（岭南＆管院）、上交安泰、浙大\n第二梯队\n厦大、西交大、华中科大、武大、同济\n第三梯队\n北理、西北工业、中南、大连理工、山东大学、哈工大、兰州大学、华南理工、暨大\n第四梯队\n广东财经、汕头大学、华南师范、广州大学、广东工业、广东外语外贸、深圳大学\n "});index.add({'id':98,'href':'/note/docs/study/docs/tool/','title':"工具",'content':"工具 格式转换 富文本 -\u0026gt; markdown  euangoddard/clipboard2markdown  http://euangoddard.github.io/clipboard2markdown/    pandoc https://pandoc.org/\n"});index.add({'id':99,'href':'/note/docs/study/degree/masters-degree/','title':"硕士",'content':"硕士 硕士分类 学术硕士与专业硕士 学术硕士可以调剂到专业硕士，但专业硕士不能调剂到学术硕士\n 学术硕士  涵盖所有的专业方向 学制一般为 3 年 单导师制 可以通过自己的导师直接读博，不用参加全国统考   专业硕士  共计 40 个专业 学制一般为 2-3 年 双导师制 不能硕博连读或直博，需要参加全国统考    全日制与非全日制   全日制\n  非全日制（在职研究生）\n 同等学力申硕  直接入学   非全日制研究生  参加 1 月份全国统考       "});index.add({'id':100,'href':'/note/docs/study/book/social/','title':"社会科学",'content':"社会科学 "});index.add({'id':101,'href':'/note/docs/study/course/social/','title':"社会科学",'content':"社会科学 "});index.add({'id':102,'href':'/note/docs/social/','title':"第三部分 社会科学",'content':"社会科学 "});index.add({'id':103,'href':'/note/docs/study/docs/','title':"4.4 文档",'content':"文档 "});index.add({'id':104,'href':'/note/docs/study/domain/product/','title':"产品",'content':"产品 "});index.add({'id':105,'href':'/note/docs/study/domain/company/','title':"公司",'content':"公司 "});index.add({'id':106,'href':'/note/docs/study/domain/company/company-history/','title':"公司历史",'content':"公司历史 "});index.add({'id':107,'href':'/note/docs/study/domain/company/company-history/baidu/','title':"百度",'content':"百度  投资页面链接  例如：An industrial-grade RPC framework used throughout Baidu    组织架构 百度组建 “前向收费业务群组”，成立 “搜索业务群组”，分别由百度副总裁王湛和副总裁向海龙负责。\n2015-02-03  移动服务事业群（百度副总裁李明远、副总裁刘骏） 搜索业务群组（高级副总裁向海龙、副总裁王海峰） 新兴业务群组（总裁张亚勤、副总裁王湛） 互联网金融事业群（朱光）  2015 年初，百度进行了一次大调整：即 N 合三，基本按照业务的不同属性将多个事业群组、收购而来的公司、新兴业务划分到三大事业群：LBS 和移动云为主的移动服务事业群；移动搜索、大搜索、移动网盟业务为主的搜索业务群组；还有就是新兴业务群组。通过 “合” 百度 架构更加精简，不同事业群可更有效地整合其内部资源，决策权更多。同时，2015 年底，百度又 “裂变” 出一个新事业群即互联网金融事业群，形成四大事业群的基础架构。\n2018-12-18 百度云的首次调整始于 2018 年 12 月 18 日，彼时，百度智能云事业部（ACU）升级为智能云事业群组（ACG），将 AI To B 的业务与传统的云业务实现合并，这也被看做是百度 “云 + AI” 战略的最初形态，为百度智能云的快速成长在内部架构上划定了轨道，铺平了道路。五个月后，百度云迎来了第二次调整，即在 2019 年 4 月 11 日，百度云更名为百度智能云，在品牌层面进行升级，并开启了下一个三年发展规划，进一步确立了规模化做大 AI 智能产业的发展思路。对于百度智能云的品牌升级，尹世明表示，智能是百度云的 DNA，百度云品牌全面升级为百度智能云，将不限于 “+ 智能”，不止于 “智能 +”，通过打造更领先的底层技术 ABC+X、更全面的平台支持、更丰富的行业应用，持续输出百度领先于业界的 ABC 技术能力，用 AI 思维推动产业智能化。业内人士认为，百度智能云的新目标既承接了 ABC 战略，又在此前的打法上加入了规模化的目标。品牌全面升级之后的百度智能云，智能开始成为其最显著的标签，这个标签也正在被越来越多的人接受并认可。又过了五个月后，在 2019 年 9 月 2 日，百度 CEO 李彦宏在内部发出全员信，宣布 “云 + AI” 战略进一步升级，百度智能云总经理尹世明直接向集团首席技术官王海峰汇报，百度智能云与 CTO 体系实现高度协同。这次调整中的一个新变化是，尹世明直接向集团首席技术官王海峰汇报，在这次调整之前，ACG 由尹世明负责，向张亚勤汇报；TG 和 AIG 是王海峰直接负责。如此一来，百度智能云与百度 CTO 体系将高度协同。当时的变动中，还有一个人事变动背景是：2019 年 3 月张亚勤宣布 10 月退休。而本次的调整，则被解读为百度在加码产业智能化，为的是推动 AI 技术在产业中得到更进一步的应用。同时，虽然百度 AI 和云之前已经完成协同，但显示出可能并不仅仅是出于业务考量，本次调整进一步显示出，百度 AI 商业化不论是技术侧还是落地侧，都以百度 CTO 王海峰为领导，云与 AI 都纳入 CTO 体系。\n2019-09-02 为了将百度 AI 的领先能力更高效地向产业界输出，让百度成为引领人工智能工业化大生产的关键力量，公司决定进一步升级“云 + AI”战略，进一步提高百度智能云的战略地位。即日起，百度智能云与 CTO 体系高效融合，公司副总裁、百度智能云总经理尹世明携 ACG 团队向集团首席技术官王海峰汇报。\n2020-01-09 为进一步整合资源，发挥技术中台价值，提升业务支持效率，经公司研究决定，AI 技术平台体系（原 AIG）与基础技术体系（原 TG）整合为技术中台群组（TPG），定位于集团级技术中台建设与业务支持。\n AIG（百度人工智能体系）(CTO 王海峰)  = TPG (技术中台群组) + ACG (智能云事业群组) = AIG (AI 技术平台体系) + TG (基础技术体系) + ACG (百度智能云事业群组)    "});index.add({'id':108,'href':'/note/docs/study/','title':"第四部分 学习",'content':"学习 "});index.add({'id':109,'href':'/note/docs/study/domain/company/equity/','title':"股权",'content':"股权 股权设计 股权设计常见隐患 好的股权设计是什么样的？ 股权设计的关键原则 合伙人股权如何分配   要有领军人物，切忌平均分配\n  让 CEO（占有）大股东地位\n 五个创始人，每人拿出 5%的股权，5 个人一共拿出 25%，形成一个激励股权池。把这个激励股权池暂时转到 CEO 的名下，这样 CEO 金大持股 40%，现在的 25%加上之前持有的 15%，其他四个创始人每个人持股 15%，这样 CEO 金大成为大股东，形成了相对控股。    CEO 能否获得这 25%的股权，要看他是否真的承担起 CEO 的责任。\n 针对这 25%的股权设定五年的成熟期，每年成数 5%，而成熟的条件，是这个 CEO 还（是否）能继续承担 CEO 的责任。每年年初制定企业的发展规划，即是年初 CEO 对全体股东做出的业绩承诺，大家认可的今年完成的目标。一年结束，大家回顾这一年的业绩，对 CEO 的业绩进行评估。如果认为他不能胜任，可以解除他职务，选举新的人接任。    如果 CEO 被解除了管理权，对于还没有成熟的股权，则需要交出来。比如在两年后，金大被认为不再能胜任 CEO，他的（激励股权）已经成熟了 10%，剩下的 15%的股权将交出来用以激励接任的 CEO。\n  获得远超其他人股权比例的同时，也承担了巨大的责任。在日常的工作中，他是总负责人，其他人要听从他的安排；但在年终的股东会上，他要对公司的整个业绩负责，要对其它股东有所交代。\n  金字塔结构是最稳定的结构，灵魂人物是不可缺少的，承担主要责任的人，（就）应该拥有主要的权利，获得重要的利益。责、权、利三者对等，这就是公平。\n如何保护公司的控制权 什么算控股  公司法  67% 以上是绝对控股  通过重大事项   50% 以上是相对控股   会计学里  持股超过 50%就称之为“绝对控股”， 持股小于 50%，但处于第一大股东地位的，则被称为相对控股。 再扩展一点，只要能控制董事会的半数以上成员，就能控制公司。   现实  百度的李彦宏持股 22.4% 阿里巴巴的马云持股 7.8% 腾讯的马化腾持股 14.43% 他们都远远小于 50%，谁能说他们不是 BAT 的控制者？    如何做   要找不以控股为目的的股东。\n 什么样的投资人是不想做要公司的控制权呢？ 专业的投资基金，VC、PE 我们称之为财务投资人的，通常都以单纯的投资回报为目的 比如软银的孙正义持有阿里巴巴 34%的股权，远远高于马云，仍然心甘情愿的把公司交给马云去控制。  也有一些战略投资人，除了投资收益外，还会有其他与自己公司发展战略相对应的目的，甚至有的投资人直接就会讲，如果你发展的好，我未来想收购你。      制订合理的初始股权结构。\n 如果公司成立时的初始股权结构不合理，就象一个人的得了先天性的心脏病，想要在事后补救会困难千倍、百倍。合理的初始股权结构，就象一个金字塔，要有一个独大的控股权股东，当然具体数字要依每个公司的具体情况而定，但原则上控制股东的持股比例越高、结构越稳定。    一致行动人。\n 控股股东可以和持有一定股权的合伙人、关系密切的股东达成一致的行动关系，即在股东会的事项表决中，按照一致的意见或听从一个人的声音对投票。把分散的股权集合在一起，形成合力。成为一致行动人，可以共同签署一份一致行动协议，更重要的是，达成心理上的共识。雷军对金山公司的控制，就是通过一致行为的方式完成的。    通过多层公司结构，提高控制权。\n 比如唐僧师徒四人是一个项目公司的创始股东，一共持有公司 70%的股权。唐僧是主创始人，持股 50%，孙悟空持股 10%、八戒和沙僧各持股 5%，如来佛主、唐王李世民做为投资人，持有 40%的股权。现在，可以由唐僧师徒单独设立一个持股公司，把项目公司中的股权比例平移到持股公司中，即 50：10：5：5。唐僧在这家持股公司里持股超过 50%，是绝对控股的股东，通过这家持股公司，唐僧实际上掌握了项目公司 70%的股权，而且不用担心孙悟空他们会造反。    牛卡计划，也就是俗称的 AB 股制度。\n 把股权分成不同的类别，比如说分成 A 类和 B 类，一般来说，每一股股权都会有一份股东会上的表决权，但牛卡计划可以让某一类股权有多份表决权。比如 A 类股权每一股有 10 个表决权，而 B 类每一股持有一个表决权。这样，就等于把 A 类股权放大了 10 倍，持有这类股权的人一般都是企业的创始人或高管。比如 JD 商城，刘强东只持有 20%左右的股权，但他的每一股股权都有二十倍的表决权，所以刘强东在 JD 有着 80%以上的表决权，对公司的控制稳如泰山。但是，牛卡计划目前只有在美国的资本市场上可以使用，只有去美国上市才能用得上这个制度，在其他地方上市尚不能使用。    除了以上五个法宝，还有一些神奇的保护公司控制权的方式，比如阿里巴巴的合伙人制度，比如华为的虚拟股权制度，但这些方式突破常规，有其特殊的原因和历史背景，很难复制或大面部使用，这里就不予展开介绍了。\n  "});index.add({'id':110,'href':'/note/docs/study/domain/operate/','title':"运营",'content':"运营 "});index.add({'id':111,'href':'/note/docs/study/domain/product/requirement/','title':"需求",'content':"需求 需求又称为 user story，是从用户的角度描述的独立功能点。\n在敏捷中对一个需求的描述应当包括 3 个方面：\n As a\u0026hellip; (作为\u0026hellip;角色或岗位) I want\u0026hellip; (我想\u0026hellip;希望做什么) So that\u0026hellip; (以便\u0026hellip;达到什么目的或商业价值)  需求拆分时应该满足 INVEST 原则：\n I：Independent：独立的 N：Negotiable：可协商的 V：Valuable：有价值的 E：Estimate：可评估的 S：Small ：小粒度的 T：Testable：可测试的  评定需求优先级时可参考 MoSCoW 原则：\n Must：必须有 Should：应该有 Could：可有可无 Won\u0026rsquo;t：没有  "});index.add({'id':112,'href':'/note/docs/humanities/music/','title':"2.5 音乐",'content':"音乐 "});index.add({'id':113,'href':'/note/docs/study/domain/','title':"4.5 领域",'content':"领域 "});index.add({'id':114,'href':'/note/docs/live/cook/','title':"5.5 下厨房",'content':"下厨房 "});index.add({'id':115,'href':'/note/docs/study/degree/doctorate/','title':"博士",'content':"博士 博士分类 "});index.add({'id':116,'href':'/note/docs/live/','title':"第五部分 生活",'content':"生活 "});index.add({'id':117,'href':'/note/docs/humanities/movie/','title':"2.7 电影",'content':"电影 "});index.add({'id':118,'href':'/note/docs/live/travel/','title':"5.9 旅行",'content':"旅行 "});index.add({'id':119,'href':'/note/docs/live/diary/2020/','title':"2020 年",'content':"2020 年 年度计划 2020 年读书计划  xxx xxx  2020 年观影计划  xxx xxx  2020 年旅行计划  xxx xxx   年度总结  "});index.add({'id':120,'href':'/note/docs/','title':"Docs",'content':""});})();